<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Typora 基本使用</title>
    <link href="/2025/03/15/Typora-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2025/03/15/Typora-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1><center>Typora 基本使用</center></h1>## 对文字的特殊标注<h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一阶标题  或者快捷键Ctrl+<span class="hljs-number">1</span><br>## 二阶标题 或者快捷键Ctrl+<span class="hljs-number">2</span><br>### 三阶标题    或者快捷键Ctrl+<span class="hljs-number">3</span><br>#### 四阶标题   或者快捷键Ctrl+<span class="hljs-number">4</span><br>##### 五阶标题  或者快捷键Ctrl+<span class="hljs-number">5</span><br>###### 六阶标题 或者快捷键Ctrl+<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h4 id="2-下划线"><a href="#2-下划线" class="headerlink" title="2.下划线"></a>2.下划线</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>下划线的内容<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span> 或按快捷键Ctrl+U<br></code></pre></td></tr></table></figure><h4 id="3-字体加粗"><a href="#3-字体加粗" class="headerlink" title="3.字体加粗"></a>3.字体加粗</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**加粗内容**</span>    或按快捷键Ctrl+B<br></code></pre></td></tr></table></figure><h4 id="4-斜体"><a href="#4-斜体" class="headerlink" title="4.斜体"></a>4.斜体</h4><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*倾斜内容*</span>  或按快捷键Ctrl+I<br></code></pre></td></tr></table></figure><h4 id="5-删除线"><a href="#5-删除线" class="headerlink" title="5.删除线"></a>5.删除线</h4><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">~~删除线的内容~~  或按快捷键Alt+<span class="hljs-built_in">Shift</span>+<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="6-文字高亮"><a href="#6-文字高亮" class="headerlink" title="6.文字高亮"></a>6.文字高亮</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-operator">=</span><span class="hljs-operator">=</span>我是最重要的<span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><h4 id="7-角标-需要设置"><a href="#7-角标-需要设置" class="headerlink" title="7.角标 (需要设置)"></a>7.角标 (需要设置)</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span>^<span class="hljs-number">2</span>^    H~<span class="hljs-number">2</span>~O<br></code></pre></td></tr></table></figure><h4 id="8-文本居中"><a href="#8-文本居中" class="headerlink" title="8.文本居中"></a>8.文本居中</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>这是要居中的文本内容<span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="9-list"><a href="#9-list" class="headerlink" title="9.list"></a>9.list</h4><p><strong>有序</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">数字+英文小数点<span class="hljs-comment">(.)</span>+空格<br></code></pre></td></tr></table></figure><ol><li>策划目标</li><li>战前准备</li><li>开始行动</li></ol><p><strong>无序</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">+</span> 、- 、* 创建无序列<br></code></pre></td></tr></table></figure><ul><li>猪</li><li>兔</li><li>马</li></ul><h4 id="10-Table"><a href="#10-Table" class="headerlink" title="10.Table"></a>10.Table</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">快捷键Ctrl+<span class="hljs-built_in">T</span>弹出对话框<br></code></pre></td></tr></table></figure><h4 id="11-分割线"><a href="#11-分割线" class="headerlink" title="11.分割线"></a>11.分割线</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">***+回车  <br><span class="hljs-comment">---+回车  </span><br></code></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><h4 id="1-图片"><a href="#1-图片" class="headerlink" title="1.图片"></a>1.图片</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">![图片内容]<span class="hljs-params">(http://t10.baidu.com/it/<span class="hljs-attr">u</span>=1069603383,3074552113&amp;<span class="hljs-attr">fm</span>=170&amp;<span class="hljs-attr">s</span>=771B15C75C12D8D61C3C69FB0300501F&amp;<span class="hljs-attr">w</span>=640&amp;<span class="hljs-attr">h</span>=426&amp;img.JPEG)</span><br> 也可使用快捷键Ctrl+K<br>PS：也可将图片直接拖拽进来，自动生成链接<br></code></pre></td></tr></table></figure><h4 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[百度一下，你就知道]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//www.baidu.com/)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Typora</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Typora</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenCV的模块</title>
    <link href="/2024/03/16/OpenCV%E7%9A%84%E6%A8%A1%E5%9D%97/"/>
    <url>/2024/03/16/OpenCV%E7%9A%84%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="OpenCV的模块"><a href="#OpenCV的模块" class="headerlink" title="OpenCV的模块"></a>OpenCV的模块</h1><p>下图列出了OpenCV中包含的各个模块：</p><p><img src="/2024/03/16/OpenCV%E7%9A%84%E6%A8%A1%E5%9D%97/1.png"></p><p>其中core、highgui、imgproc是最基础的模块，该课程主要是围绕这几个模块展开的，分别介绍如下：</p><ul><li><strong>core模块</strong>实现了最核心的数据结构及其基本运算，如绘图函数、数组操作相关函数等。</li><li><strong>highgui模块</strong>实现了视频与图像的读取、显示、存储等接口。</li><li><strong>imgproc模块</strong>实现了图像处理的基础方法，包括图像滤波、图像的几何变换、平滑、阈值分割、形态学处理、边缘检测、目标检测、运动分析和对象跟踪等。</li></ul><p>对于图像处理其他更高层次的方向及应用，OpenCV也有相关的模块实现</p><ul><li><strong>features2d模块</strong>用于提取图像特征以及特征匹配，nonfree模块实现了一些专利算法，如sift特征。</li><li><strong>objdetect模块</strong>实现了一些目标检测的功能，经典的基于Haar、LBP特征的人脸检测，基于HOG的行人、汽车等目标检测，分类器使用Cascade Classification（级联分类）和Latent SVM等。</li><li><strong>stitching模块</strong>实现了图像拼接功能。</li><li><strong>FLANN模块</strong>（Fast Library for Approximate Nearest Neighbors），包含快速近似最近邻搜索FLANN<br>和聚类Clustering算法。</li><li><strong>ml模块</strong>机器学习模块（SVM，决策树，Boosting等等）。</li><li><strong>photo模块</strong>包含图像修复和图像去噪两部分。</li><li><strong>video模块</strong>针对视频处理，如背景分离，前景检测、对象跟踪等。</li><li><strong>calib3d模块</strong>即Calibration（校准）3D，这个模块主要是相机校准和三维重建相关的内容。包含了基本的多视角几何算法，单个立体摄像头标定，物体姿态估计，立体相似性算法，3D信息的重建等等。</li><li><strong>G-API模块</strong>包含超高效的图像处理pipeline引擎</li></ul><hr><p><strong>总结</strong></p><p>   core：最核心的数据结构</p><p>   highgui：视频与图像的读取、显示、存储</p><p>   imgproc：图像处理的基础方法</p><p>   features2d：图像特征以及特征匹配</p>]]></content>
    
    
    <categories>
      
      <category>OpenCV</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenCV</tag>
      
      <tag>模块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图像处理</title>
    <link href="/2024/02/16/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <url>/2024/02/16/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1-图像的起源"><a href="#1-图像的起源" class="headerlink" title="1 图像的起源"></a>1 图像的起源</h1><h2 id="1-1-图像是什么"><a href="#1-1-图像是什么" class="headerlink" title="1.1  图像是什么"></a>1.1  图像是什么</h2><blockquote><p>图像是人类视觉的基础，是自然景物的客观反映，是人类认识世界和人类本身的重要源泉。“图”是物体反射或透射光的分布，“像“是人的视觉系统所接受的图在人脑中所形版的印象或认识，照片、绘画、剪贴画、地图、书法作品、手写汉学、传真、卫星云图、影视画面、X光片、脑电图、心电图等都是图像。—姚敏. 数字图像处理：机械工业出版社，2014年。</p></blockquote><h2 id="1-2-模拟图像和数字图像"><a href="#1-2-模拟图像和数字图像" class="headerlink" title="1.2 模拟图像和数字图像"></a>1.2 模拟图像和数字图像</h2><p>图像起源于1826年前后法国科学家Joseph Nicéphore Niépce发明的第一张可永久保存的照片，属于模拟图像。模拟图像又称连续图像，它通过某种物理量（如光、电等）的强弱变化来记录图像亮度信息，所以是连续变换的。模拟信号的特点是容易受干扰，如今已经基本全面被数字图像替代。</p><p>在第一次世界大战后，1921年美国科学家发明了Bartlane System，并从<strong>伦敦传到纽约传输了第一幅数字图像</strong>，其亮度用离散数值表示，将图片编码成5个灰度级，如下图所示，通过海底电缆进行传输。在发送端图片被编码并使用打孔带记录，通过系统传输后在接收方使用特殊的打印机恢复成图像。1950年左右，计算机被发明，数字图像处理学科正式诞生。</p><h1 id="2-数字图像的表示"><a href="#2-数字图像的表示" class="headerlink" title="2 数字图像的表示"></a>2 数字图像的表示</h1><h2 id="2-1-位数"><a href="#2-1-位数" class="headerlink" title="2.1 位数"></a>2.1 位数</h2><p>计算机采用0&#x2F;1编码的系统，数字图像也是利用0&#x2F;1来记录信息，我们平常接触的图像都是8位数图像，包含0～255灰度，其中0，代表最黑，1，表示最白。</p><p><img src="/2024/02/16/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/1.png"></p><p>人眼对灰度更敏感一些，在16位到32位之间。</p><p><img src="/2024/02/16/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/2.png"></p><h2 id="2-2-图像的分类"><a href="#2-2-图像的分类" class="headerlink" title="2.2 图像的分类"></a>2.2 图像的分类</h2><h5 id="二值图像："><a href="#二值图像：" class="headerlink" title="二值图像："></a><strong>二值图像</strong>：</h5><p>一幅二值图像的二维矩阵仅由0、1两个值构成，“0”代表黑色，“1”代白色。由于每一像素（矩阵中每一元素）取值仅有0、1两种可能，所以计算机中二值图像的数据类型通常为1个二进制位。二值图像通常用于文字、线条图的扫描识别（OCR）和掩膜图像的存储。</p><h5 id="灰度图："><a href="#灰度图：" class="headerlink" title="灰度图："></a><strong>灰度图</strong>：</h5><p>每个像素只有一个采样颜色的图像，这类图像通常显示为从最暗黑色到最亮的白色的灰度，尽管理论上这个采样可以任何颜色的不同深浅，甚至可以是不同亮度上的不同颜色。灰度图像与黑白图像不同，在计算机图像领域中黑白图像只有黑色与白色两种颜色；但是，灰度图像在黑色与白色之间还有许多级的颜色深度。灰度图像经常是在单个电磁波频谱如可见光内测量每个像素的亮度得到的，用于显示的灰度图像通常用每个采样像素8位的非线性尺度来保存，这样可以有256级灰度（如果用16位，则有65536级）。</p><h5 id="彩色图："><a href="#彩色图：" class="headerlink" title="彩色图："></a><strong>彩色图</strong>：</h5><p>每个像素通常是由红（R）、绿（G）、蓝（B）三个分量来表示的，分量介于（0，255）。RGB图像与索引图像一样都可以用来表示彩色图像。与索引图像一样，它分别用红（R）、绿（G）、蓝（B）三原色的组合来表示每个像素的颜色。但与索引图像不同的是，RGB图像每一个像素的颜色值（由RGB三原色表示）直接存放在图像矩阵中，由于每一像素的颜色需由R、G、B三个分量来表示，M、N分别表示图像的行列数，三个M x N的二维矩阵分别表示各个像素的R、G、B三个颜色分量。RGB图像的数据类型一般为8位无符号整形，通常用于表示和存放真彩色图像。</p><hr><p><strong>总结</strong></p><ol><li><p>图像是什么</p><p>图：物体反射或透射光的分布</p><p>像：人的视觉系统所接受的图在人脑中所形版的印象或认识</p></li><li><p>模拟图像和数字图像</p><p>模拟图像：连续存储的数据，</p><p>数字图像：分级存储的数据</p></li><li><p>数字图像</p><p>位数：图像的表示，常见的就是8位</p><p>分类：二值图像，灰度图像和彩色图像</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>图像处理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图像处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模块 &amp; 包</title>
    <link href="/2023/01/23/%E6%A8%A1%E5%9D%97-%E5%8C%85/"/>
    <url>/2023/01/23/%E6%A8%A1%E5%9D%97-%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>了解模块</li><li>导入模块</li><li>制作模块</li><li><code>__all__</code></li><li>包的使用方法</li></ul><h1 id="一-模块"><a href="#一-模块" class="headerlink" title="一. 模块"></a>一. 模块</h1><p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和Python语句。</p><p>模块能定义函数，类和变量，模块里也能包含可执行的代码。</p><h2 id="1-1-导入模块"><a href="#1-1-导入模块" class="headerlink" title="1.1. 导入模块"></a>1.1. 导入模块</h2><h3 id="1-1-1-导入模块的方式"><a href="#1-1-1-导入模块的方式" class="headerlink" title="1.1.1 导入模块的方式"></a>1.1.1 导入模块的方式</h3><ul><li>import 模块名</li><li>from 模块名 import 功能名</li><li>from 模块名 import *</li><li>import 模块名 as 别名</li><li>from 模块名 import 功能名 as 别名</li></ul><h3 id="1-1-2-导入方式详解"><a href="#1-1-2-导入方式详解" class="headerlink" title="1.1.2 导入方式详解"></a>1.1.2 导入方式详解</h3><h4 id="1-1-2-1-import"><a href="#1-1-2-1-import" class="headerlink" title="1.1.2.1 import"></a>1.1.2.1 import</h4><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 导入模块</span><br><span class="hljs-keyword">import</span> 模块名<br><span class="hljs-keyword">import</span> 模块名<span class="hljs-number">1</span>, 模块名<span class="hljs-number">2.</span>..<br><br><span class="hljs-comment"># 2. 调用功能</span><br>模块名.功能名()<br></code></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-built_in">print</span>(math.sqrt(<span class="hljs-number">9</span>))  <span class="hljs-comment"># 3.0</span><br></code></pre></td></tr></table></figure><h4 id="1-1-2-2-from-import"><a href="#1-1-2-2-from-import" class="headerlink" title="1.1.2.2 from..import.."></a>1.1.2.2 from..import..</h4><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> 功能<span class="hljs-number">1</span>, 功能<span class="hljs-number">2</span>, 功能<span class="hljs-number">3.</span>..<br></code></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt<br><span class="hljs-built_in">print</span>(sqrt(<span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><h4 id="1-1-2-3-from-import"><a href="#1-1-2-3-from-import" class="headerlink" title="1.1.2.3 from .. import *"></a>1.1.2.3 from .. import *</h4><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> *<br></code></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br><span class="hljs-built_in">print</span>(sqrt(<span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><h4 id="1-1-2-4-as定义别名"><a href="#1-1-2-4-as定义别名" class="headerlink" title="1.1.2.4 as定义别名"></a>1.1.2.4 as定义别名</h4><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 模块定义别名</span><br><span class="hljs-keyword">import</span> 模块名 <span class="hljs-keyword">as</span> 别名<br><br><span class="hljs-comment"># 功能定义别名</span><br><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> 功能 <span class="hljs-keyword">as</span> 别名<br></code></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 模块别名</span><br><span class="hljs-keyword">import</span> time <span class="hljs-keyword">as</span> tt<br><br>tt.sleep(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><br><span class="hljs-comment"># 功能别名</span><br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep <span class="hljs-keyword">as</span> sl<br>sl(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="1-2-制作模块"><a href="#1-2-制作模块" class="headerlink" title="1.2. 制作模块"></a>1.2. 制作模块</h2><p>在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。<strong>也就是说自定义模块名必须要符合标识符命名规则。</strong></p><h3 id="1-2-1-定义模块"><a href="#1-2-1-定义模块" class="headerlink" title="1.2.1 定义模块"></a>1.2.1 定义模块</h3><p>新建一个Python文件，命名为<code>my_module1.py</code>，并定义<code>testA</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a + b)<br></code></pre></td></tr></table></figure><h3 id="1-2-2-测试模块"><a href="#1-2-2-测试模块" class="headerlink" title="1.2.2 测试模块"></a>1.2.2 测试模块</h3><p>在实际开中，当一个开发人员编写完一个模块后，为了让模块能够在项目中达到想要的效果，这个开发人员会自行在py文件中添加一些测试信息.，例如，在<code>my_module1.py</code>文件中添加测试代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a + b)<br><br><br>testA(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>此时，无论是当前文件，还是其他已经导入了该模块的文件，在运行的时候都会自动执行<code>testA</code>函数的调用。</p><p>解决办法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a + b)<br><br><span class="hljs-comment"># 只在当前文件中调用该函数，其他导入的文件内不符合该条件，则不执行testA函数调用</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    testA(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="1-2-3-调用模块"><a href="#1-2-3-调用模块" class="headerlink" title="1.2.3 调用模块"></a>1.2.3 调用模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_module1<br>my_module1.testA(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="1-2-4-注意事项"><a href="#1-2-4-注意事项" class="headerlink" title="1.2.4 注意事项"></a>1.2.4 注意事项</h3><p>如果使用<code>from .. import ..</code>或<code>from .. import *</code>导入多个模块的时候，且模块内有同名功能。当调用这个同名功能的时候，调用到的是后面导入的模块的功能。</p><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 模块1代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_test</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a + b)<br><br><span class="hljs-comment"># 模块2代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_test</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-built_in">print</span>(a - b)<br>   <br><span class="hljs-comment"># 导入模块和调用功能代码</span><br><span class="hljs-keyword">from</span> my_module1 <span class="hljs-keyword">import</span> my_test<br><span class="hljs-keyword">from</span> my_module2 <span class="hljs-keyword">import</span> my_test<br><br><span class="hljs-comment"># my_test函数是模块2中的函数</span><br>my_test(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="1-3-模块定位顺序"><a href="#1-3-模块定位顺序" class="headerlink" title="1.3. 模块定位顺序"></a>1.3. 模块定位顺序</h2><p>当导入一个模块，Python解析器对模块位置的搜索顺序是：</p><ol><li>当前目录</li><li>如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</li><li>如果都找不到，Python会察看默认路径。UNIX下，默认路径一般为&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python&#x2F;</li></ol><p>模块搜索路径存储在system模块的sys.path变量中。变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</p><ul><li>注意<ul><li>自己的文件名不要和已有模块名重复，否则导致模块功能无法使用</li><li><code>使用from 模块名 import 功能</code>的时候，如果功能名字重复，调用到的是最后定义或导入的功能。</li></ul></li></ul><h2 id="1-4-all"><a href="#1-4-all" class="headerlink" title="1.4. __all__"></a>1.4. <code>__all__</code></h2><p>如果一个模块文件中有<code>__all__</code>变量，当使用<code>from xxx import *</code>导入时，只能导入这个列表中的元素。</p><ul><li>my_module1模块代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">__all__ = [<span class="hljs-string">&#x27;testA&#x27;</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;testA&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testB</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;testB&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>导入模块的文件代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_module1 <span class="hljs-keyword">import</span> *<br>testA()<br>testB()<br></code></pre></td></tr></table></figure><p><img src="/2023/01/23/%E6%A8%A1%E5%9D%97-%E5%8C%85/image-20190305175727272.png"></p><h1 id="二-包"><a href="#二-包" class="headerlink" title="二. 包"></a>二. 包</h1><p>包将有联系的模块组织在一起，即放到同一个文件夹下，并且在这个文件夹创建一个名字为<code>__init__.py</code> 文件，那么这个文件夹就称之为包。</p><h2 id="2-1-制作包"><a href="#2-1-制作包" class="headerlink" title="2.1 制作包"></a>2.1 制作包</h2><p>[New] — [Python Package] — 输入包名 — [OK] — 新建功能模块(有联系的模块)。</p><p>注意：新建包后，包内部会自动创建<code>__init__.py</code>文件，这个文件控制着包的导入行为。</p><h3 id="2-1-1-快速体验"><a href="#2-1-1-快速体验" class="headerlink" title="2.1.1 快速体验"></a>2.1.1 快速体验</h3><ol><li>新建包<code>mypackage</code></li><li>新建包内模块：<code>my_module1</code> 和 <code>my_module2</code></li><li>模块内代码如下</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my_module1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info_print1</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;my_module1&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># my_module2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info_print2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;my_module2&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-2-导入包"><a href="#2-2-导入包" class="headerlink" title="2.2 导入包"></a>2.2 导入包</h2><h3 id="2-2-1-方法一"><a href="#2-2-1-方法一" class="headerlink" title="2.2.1 方法一"></a>2.2.1 方法一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 包名.模块名<br><br>包名.模块名.目标<br></code></pre></td></tr></table></figure><h4 id="2-2-1-1-体验"><a href="#2-2-1-1-体验" class="headerlink" title="2.2.1.1 体验"></a>2.2.1.1 体验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> my_package.my_module1<br><br>my_package.my_module1.info_print1()<br></code></pre></td></tr></table></figure><h3 id="2-2-2-方法二"><a href="#2-2-2-方法二" class="headerlink" title="2.2.2 方法二"></a>2.2.2 方法二</h3><p>注意：必须在<code>__init__.py</code>文件中添加<code>__all__ = []</code>，控制允许导入的模块列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> 包名 <span class="hljs-keyword">import</span> *<br>模块名.目标<br></code></pre></td></tr></table></figure><h4 id="2-2-2-1-体验"><a href="#2-2-2-1-体验" class="headerlink" title="2.2.2.1 体验"></a>2.2.2.1 体验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> my_package <span class="hljs-keyword">import</span> *<br><br>my_module1.info_print1()<br></code></pre></td></tr></table></figure><h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h1><ul><li>导入模块方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 模块名<br><br><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> 目标<br><br><span class="hljs-keyword">from</span> 模块名 <span class="hljs-keyword">import</span> *<br></code></pre></td></tr></table></figure><ul><li>导入包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> 包名.模块名<br><br><span class="hljs-keyword">from</span> 包名 <span class="hljs-keyword">import</span> *<br></code></pre></td></tr></table></figure><ul><li><code>__all__ = []</code> ：允许导入的模块或功能列表</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>模块，包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常</title>
    <link href="/2023/01/23/%E5%BC%82%E5%B8%B8/"/>
    <url>/2023/01/23/%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>了解异常</li><li>捕获异常</li><li>异常的else</li><li>异常finally</li><li>异常的传递</li><li>自定义异常</li></ul><h1 id="一-了解异常"><a href="#一-了解异常" class="headerlink" title="一. 了解异常"></a>一. 了解异常</h1><p>当检测到一个错误时，解释器就无法继续执行了，反而出现了一些错误的提示，这就是所谓的”异常”。</p><p>例如：以<code>r</code>方式打开一个不存在的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/23/%E5%BC%82%E5%B8%B8/image-20190305154200725.png"></p><h1 id="二-异常的写法"><a href="#二-异常的写法" class="headerlink" title="二. 异常的写法"></a>二. 异常的写法</h1><h2 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    可能发生错误的代码<br><span class="hljs-keyword">except</span>:<br>    如果出现异常执行的代码<br></code></pre></td></tr></table></figure><h2 id="2-2-快速体验"><a href="#2-2-快速体验" class="headerlink" title="2.2 快速体验"></a>2.2 快速体验</h2><p>需求：尝试以<code>r</code>模式打开文件，如果文件不存在，则以<code>w</code>方式打开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">except</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-3-捕获指定异常"><a href="#2-3-捕获指定异常" class="headerlink" title="2.3 捕获指定异常"></a>2.3 捕获指定异常</h2><h3 id="2-3-1-语法"><a href="#2-3-1-语法" class="headerlink" title="2.3.1 语法"></a>2.3.1 语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    可能发生错误的代码<br><span class="hljs-keyword">except</span> 异常类型:<br>    如果捕获到该异常类型执行的代码<br></code></pre></td></tr></table></figure><h3 id="2-3-2-体验"><a href="#2-3-2-体验" class="headerlink" title="2.3.2 体验"></a>2.3.2 体验</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(num)<br><span class="hljs-keyword">except</span> NameError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;有错误&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li>如果尝试执行的代码的异常类型和要捕获的异常类型不一致，则无法捕获异常。</li><li>一般try下方只放一行尝试执行的代码。</li></ol></blockquote><h3 id="2-3-3-捕获多个指定异常"><a href="#2-3-3-捕获多个指定异常" class="headerlink" title="2.3.3 捕获多个指定异常"></a>2.3.3 捕获多个指定异常</h3><p>当捕获多个异常时，可以把要捕获的异常类型的名字，放到except 后，并使用元组的方式进行书写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">except</span> (NameError, ZeroDivisionError):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;有错误&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2-3-4-捕获异常描述信息"><a href="#2-3-4-捕获异常描述信息" class="headerlink" title="2.3.4 捕获异常描述信息"></a>2.3.4 捕获异常描述信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(num)<br><span class="hljs-keyword">except</span> (NameError, ZeroDivisionError) <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="2-3-5-捕获所有异常"><a href="#2-3-5-捕获所有异常" class="headerlink" title="2.3.5 捕获所有异常"></a>2.3.5 捕获所有异常</h3><p>Exception是所有程序异常类的父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(num)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h2 id="2-4-异常的else"><a href="#2-4-异常的else" class="headerlink" title="2.4 异常的else"></a>2.4 异常的else</h2><p>else表示的是如果没有异常要执行的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(result)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是else，是没有异常的时候执行的代码&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-5-异常的finally"><a href="#2-5-异常的finally" class="headerlink" title="2.5 异常的finally"></a>2.5 异常的finally</h2><p>finally表示的是无论是否异常都要执行的代码，例如关闭文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没有异常，真开心&#x27;</span>)<br><span class="hljs-keyword">finally</span>:<br>    f.close()<br></code></pre></td></tr></table></figure><h1 id="三-异常的传递"><a href="#三-异常的传递" class="headerlink" title="三. 异常的传递"></a>三. 异常的传递</h1><p>体验异常传递</p><p>需求：</p><pre><code class="hljs">1. 尝试只读方式打开test.txt文件，如果文件存在则读取文件内容，文件不存在则提示用户即可。2. 读取内容要求：尝试循环读取内容，读取过程中如果检测到用户意外终止程序，则`except`捕获异常并提示用户。</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            content = f.readline()<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(content) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            time.sleep(<span class="hljs-number">2</span>)<br>            <span class="hljs-built_in">print</span>(content)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-comment"># 如果在读取文件的过程中，产生了异常，那么就会捕获到</span><br>        <span class="hljs-comment"># 比如 按下了 ctrl+c</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;意外终止了读取数据&#x27;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        f.close()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;关闭文件&#x27;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;没有这个文件&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="四-自定义异常"><a href="#四-自定义异常" class="headerlink" title="四. 自定义异常"></a>四. 自定义异常</h1><p>在Python中，抛出自定义异常的语法为<code> raise 异常类对象</code>。</p><p>需求：密码长度不足，则报异常（用户输入密码，如果输入的长度不足3位，则报错，即抛出自定义异常，并捕获该异常）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义异常类，继承Exception</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShortInputError</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, length, min_len</span>):<br>        self.length = length<br>        self.min_len = min_len<br><br>    <span class="hljs-comment"># 设置抛出异常的描述信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;你输入的长度是<span class="hljs-subst">&#123;self.length&#125;</span>, 不能少于<span class="hljs-subst">&#123;self.min_len&#125;</span>个字符&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">try</span>:<br>        con = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入密码：&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(con) &lt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">raise</span> ShortInputError(<span class="hljs-built_in">len</span>(con), <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> result:<br>        <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码已经输入完成&#x27;</span>)<br><br><br>main()<br></code></pre></td></tr></table></figure><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul><li>异常语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>  可能发生异常的代码<br><span class="hljs-keyword">except</span>:<br>  如果出现异常执行的代码<br><span class="hljs-keyword">else</span>:<br>  没有异常执行的代码<br><span class="hljs-keyword">finally</span>:<br>  无论是否异常都要执行的代码<br></code></pre></td></tr></table></figure><ul><li>捕获异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">except</span> 异常类型:<br>  代码<br><br><span class="hljs-keyword">except</span> 异常类型 <span class="hljs-keyword">as</span> xx:<br>代码<br></code></pre></td></tr></table></figure><ul><li>自定义异常</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 自定义异常类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">异常类类名</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>  代码<br>    <br>    <span class="hljs-comment"># 设置抛出异常的描述信息</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>      <span class="hljs-keyword">return</span> ...<br><br><br><span class="hljs-comment"># 2. 抛出异常</span><br><span class="hljs-keyword">raise</span> 异常类名()<br><br><span class="hljs-comment"># 捕获异常</span><br><span class="hljs-keyword">except</span> Exception...<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象其他</title>
    <link href="/2023/01/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%B6%E4%BB%96/"/>
    <url>/2023/01/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%85%B6%E4%BB%96/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象-其他"><a href="#面向对象-其他" class="headerlink" title="面向对象-其他"></a>面向对象-其他</h1><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>面向对象三大特性</li><li>类属性和实例属性</li><li>类方法和静态方法</li></ul><h1 id="一-面向对象三大特性"><a href="#一-面向对象三大特性" class="headerlink" title="一. 面向对象三大特性"></a>一. 面向对象三大特性</h1><ul><li>封装<ul><li>将属性和方法书写到类的里面的操作即为封装</li><li>封装可以为属性和方法添加私有权限</li></ul></li><li>继承<ul><li>子类默认继承父类的所有属性和方法</li><li>子类可以重写父类属性和方法</li></ul></li><li>多态<ul><li>传入不同的对象，产生不同的结果</li></ul></li></ul><h1 id="二-多态"><a href="#二-多态" class="headerlink" title="二. 多态"></a>二. 多态</h1><h2 id="2-1-了解多态"><a href="#2-1-了解多态" class="headerlink" title="2.1 了解多态"></a>2.1 了解多态</h2><p>多态指的是一类事物有多种形态，（一个抽象类有多个子类，因而多态的概念依赖于继承）。</p><ul><li>定义：多态是一种使用对象的方式，子类重写父类方法，调用不同子类对象的相同父类方法，可以产生不同的执行结果</li><li>好处：调用灵活，有了多态，更容易编写出通用的代码，做出通用的编程，以适应需求的不断变化！</li><li>实现步骤：<ul><li>定义父类，并提供公共方法</li><li>定义子类，并重写父类方法</li><li>传递子类对象给调用者，可以看到不同子类执行效果不同</li></ul></li></ul><h2 id="2-2-体验多态"><a href="#2-2-体验多态" class="headerlink" title="2.2 体验多态"></a>2.2 体验多态</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 父类提供统一的方法，哪怕是空方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;指哪打哪...&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArmyDog</span>(<span class="hljs-title class_ inherited__">Dog</span>):  <span class="hljs-comment"># 继承Dog类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):  <span class="hljs-comment"># 子类重写父类同名方法</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;追击敌人...&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrugDog</span>(<span class="hljs-title class_ inherited__">Dog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;追查毒品...&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">work_with_dog</span>(<span class="hljs-params">self, dog</span>):  <span class="hljs-comment"># 传入不同的对象，执行不同的代码，即不同的work函数</span><br>        dog.work()<br><br><br>ad = ArmyDog()<br>dd = DrugDog()<br><br>daqiu = Person()<br>daqiu.work_with_dog(ad)<br>daqiu.work_with_dog(dd)<br></code></pre></td></tr></table></figure><h1 id="三-类属性和实例属性"><a href="#三-类属性和实例属性" class="headerlink" title="三. 类属性和实例属性"></a>三. 类属性和实例属性</h1><h2 id="3-1-类属性"><a href="#3-1-类属性" class="headerlink" title="3.1 类属性"></a>3.1 类属性</h2><h3 id="3-1-1-设置和访问类属性"><a href="#3-1-1-设置和访问类属性" class="headerlink" title="3.1.1 设置和访问类属性"></a>3.1.1 设置和访问类属性</h3><ul><li>类属性就是 <strong>类对象</strong> 所拥有的属性，它被 <strong>该类的所有实例对象 所共有</strong>。</li><li>类属性可以使用 <strong>类对象</strong> 或 <strong>实例对象</strong> 访问。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    tooth = <span class="hljs-number">10</span><br><br><br>wangcai = Dog()<br>xiaohei = Dog()<br><br><span class="hljs-built_in">print</span>(Dog.tooth)  <span class="hljs-comment"># 10</span><br><span class="hljs-built_in">print</span>(wangcai.tooth)  <span class="hljs-comment"># 10</span><br><span class="hljs-built_in">print</span>(xiaohei.tooth)  <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><blockquote><p>类属性的优点</p><ul><li><strong>记录的某项数据 始终保持一致时</strong>，则定义类属性。</li><li><strong>实例属性</strong> 要求 <strong>每个对象</strong> 为其 <strong>单独开辟一份内存空间</strong> 来记录数据，而 <strong>类属性</strong> 为全类所共有 ，<strong>仅占用一份内存</strong>，<strong>更加节省内存空间</strong>。</li></ul></blockquote><h3 id="3-1-2-修改类属性"><a href="#3-1-2-修改类属性" class="headerlink" title="3.1.2 修改类属性"></a>3.1.2 修改类属性</h3><p>类属性只能通过类对象修改，不能通过实例对象修改，如果通过实例对象修改类属性，表示的是创建了一个实例属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    tooth = <span class="hljs-number">10</span><br><br><br>wangcai = Dog()<br>xiaohei = Dog()<br><br><span class="hljs-comment"># 修改类属性</span><br>Dog.tooth = <span class="hljs-number">12</span><br><span class="hljs-built_in">print</span>(Dog.tooth)  <span class="hljs-comment"># 12</span><br><span class="hljs-built_in">print</span>(wangcai.tooth)  <span class="hljs-comment"># 12</span><br><span class="hljs-built_in">print</span>(xiaohei.tooth)  <span class="hljs-comment"># 12</span><br><br><span class="hljs-comment"># 不能通过对象修改属性，如果这样操作，实则是创建了一个实例属性</span><br>wangcai.tooth = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(Dog.tooth)  <span class="hljs-comment"># 12</span><br><span class="hljs-built_in">print</span>(wangcai.tooth)  <span class="hljs-comment"># 20</span><br><span class="hljs-built_in">print</span>(xiaohei.tooth)  <span class="hljs-comment"># 12</span><br></code></pre></td></tr></table></figure><h2 id="3-2-实例属性"><a href="#3-2-实例属性" class="headerlink" title="3.2 实例属性"></a>3.2 实例属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.age = <span class="hljs-number">5</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info_print</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.age)<br><br><br>wangcai = Dog()<br><span class="hljs-built_in">print</span>(wangcai.age)  <span class="hljs-comment"># 5</span><br><span class="hljs-comment"># print(Dog.age)  # 报错：实例属性不能通过类访问</span><br>wangcai.info_print()  <span class="hljs-comment"># 5</span><br></code></pre></td></tr></table></figure><h1 id="四-类方法和静态方法"><a href="#四-类方法和静态方法" class="headerlink" title="四. 类方法和静态方法"></a>四. 类方法和静态方法</h1><h2 id="4-1-类方法"><a href="#4-1-类方法" class="headerlink" title="4.1 类方法"></a>4.1 类方法</h2><h3 id="4-1-1-类方法特点"><a href="#4-1-1-类方法特点" class="headerlink" title="4.1.1 类方法特点"></a>4.1.1 类方法特点</h3><ul><li>需要用装饰器<code>@classmethod</code>来标识其为类方法，对于类方法，<strong>第一个参数必须是类对象</strong>，一般以<code>cls</code>作为第一个参数。</li></ul><h3 id="4-1-2-类方法使用场景"><a href="#4-1-2-类方法使用场景" class="headerlink" title="4.1.2 类方法使用场景"></a>4.1.2 类方法使用场景</h3><ul><li>当方法中 <strong>需要使用类对象</strong> (如访问私有类属性等)时，定义类方法</li><li>类方法一般和类属性配合使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    __tooth = <span class="hljs-number">10</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_tooth</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> cls.__tooth<br><br><br>wangcai = Dog()<br>result = wangcai.get_tooth()<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><h2 id="4-2-静态方法"><a href="#4-2-静态方法" class="headerlink" title="4.2 静态方法"></a>4.2 静态方法</h2><h3 id="4-2-1-静态方法特点"><a href="#4-2-1-静态方法特点" class="headerlink" title="4.2.1 静态方法特点"></a>4.2.1 静态方法特点</h3><ul><li>需要通过装饰器<code>@staticmethod</code>来进行修饰，<strong>静态方法既不需要传递类对象也不需要传递实例对象（形参没有self&#x2F;cls）</strong>。</li><li>静态方法 也能够通过 <strong>实例对象</strong> 和 <strong>类对象</strong> 去访问。</li></ul><h2 id="4-2-2-静态方法使用场景"><a href="#4-2-2-静态方法使用场景" class="headerlink" title="4.2.2 静态方法使用场景"></a>4.2.2 静态方法使用场景</h2><ul><li>当方法中 <strong>既不需要使用实例对象</strong>(如实例对象，实例属性)，<strong>也不需要使用类对象</strong> (如类属性、类方法、创建实例等)时，定义静态方法</li><li><strong>取消不需要的参数传递</strong>，有利于 <strong>减少不必要的内存占用和性能消耗</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info_print</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是一个狗类，用于创建狗实例....&#x27;</span>)<br><br><br>wangcai = Dog()<br><span class="hljs-comment"># 静态方法既可以使用对象访问又可以使用类访问</span><br>wangcai.info_print()<br>Dog.info_print()<br></code></pre></td></tr></table></figure><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul><li>面向对象三大特性<ul><li>封装</li><li>继承</li><li>多态</li></ul></li><li>类属性<ul><li>归属于类对象的属性，所有对象共有的属性</li></ul></li><li>实例属性</li><li>类方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@classmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xx</span>():<br>  代码<br></code></pre></td></tr></table></figure><ul><li>静态方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@staticmethod</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xx</span>():<br>  代码<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>面向对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>面向对象</tag>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象继承</title>
    <link href="/2023/01/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF/"/>
    <url>/2023/01/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象-继承"><a href="#面向对象-继承" class="headerlink" title="面向对象-继承"></a>面向对象-继承</h1><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>继承的概念</li><li>单继承</li><li>多继承</li><li>子类重写父类的同名属性和方法</li><li>子类调用父类的同名属性和方法</li><li>多层继承</li><li>super()</li><li>私有属性和私有方法</li></ul><h1 id="一-继承的概念"><a href="#一-继承的概念" class="headerlink" title="一. 继承的概念"></a>一. 继承的概念</h1><p>生活中的继承，一般指的是子女继承父辈的财产。</p><p><img src="/2023/01/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF/1.png"></p><ul><li>拓展1：经典类或旧式类</li></ul><p>不由任意内置类型派生出的类，称之为经典类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>:<br>    代码<br>    ......<br></code></pre></td></tr></table></figure><ul><li>拓展2：新式类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>(<span class="hljs-title class_ inherited__">object</span>):<br>  代码<br></code></pre></td></tr></table></figure><p>Python面向对象的继承指的是多个类之间的所属关系，即子类默认继承父类的所有属性和方法，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 父类A</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.num = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">info_print</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.num)<br><br><span class="hljs-comment"># 子类B</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br>result = B()<br>result.info_print()  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><blockquote><p>在Python中，所有类默认继承object类，object类是顶级类或基类；其他子类叫做派生类。</p></blockquote><h1 id="二-单继承"><a href="#二-单继承" class="headerlink" title="二. 单继承"></a>二. 单继承</h1><blockquote><p>故事主线：一个煎饼果子老师傅，在煎饼果子界摸爬滚打多年，研发了一套精湛的摊煎饼果子的技术。师父要把这套技术传授给他的唯一的最得意的徒弟。</p></blockquote><p>分析：徒弟是不是要继承师父的所有技术？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 师父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[古法煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br>        <br><span class="hljs-comment"># 2. 徒弟类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prentice</span>(<span class="hljs-title class_ inherited__">Master</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-comment"># 3. 创建对象daqiu</span><br>daqiu = Prentice()<br><span class="hljs-comment"># 4. 对象访问实例属性</span><br><span class="hljs-built_in">print</span>(daqiu.kongfu)<br><span class="hljs-comment"># 5. 对象调用实例方法</span><br>daqiu.make_cake()<br></code></pre></td></tr></table></figure><h1 id="三-多继承"><a href="#三-多继承" class="headerlink" title="三. 多继承"></a>三. 多继承</h1><blockquote><p>故事推进：daqiu是个爱学习的好孩子，想学习更多的煎饼果子技术，于是，在百度搜索到黑马程序员，报班学习煎饼果子技术。</p></blockquote><p>所谓多继承意思就是一个类同时继承了多个父类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[古法煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-comment"># 创建学校类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[黑马煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prentice</span>(School, Master):<br>    <span class="hljs-keyword">pass</span><br><br><br>daqiu = Prentice()<br><span class="hljs-built_in">print</span>(daqiu.kongfu)<br>daqiu.make_cake()<br></code></pre></td></tr></table></figure><blockquote><p>注意：当一个类有多个父类的时候，默认使用第一个父类的同名属性和方法。</p></blockquote><h1 id="四-子类重写父类同名方法和属性"><a href="#四-子类重写父类同名方法和属性" class="headerlink" title="四. 子类重写父类同名方法和属性"></a>四. 子类重写父类同名方法和属性</h1><blockquote><p>故事：daqiu掌握了师父和培训的技术后，自己潜心钻研出自己的独门配方的一套全新的煎饼果子技术。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[古法煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[黑马煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-comment"># 独创配方</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prentice</span>(School, Master):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[独创煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br>daqiu = Prentice()<br><span class="hljs-built_in">print</span>(daqiu.kongfu)<br>daqiu.make_cake()<br><br><span class="hljs-built_in">print</span>(Prentice.__mro__)<br></code></pre></td></tr></table></figure><blockquote><p>子类和父类具有同名属性和方法，默认使用子类的同名属性和方法。</p></blockquote><h1 id="五-子类调用父类的同名方法和属性"><a href="#五-子类调用父类的同名方法和属性" class="headerlink" title="五. 子类调用父类的同名方法和属性"></a>五. 子类调用父类的同名方法和属性</h1><blockquote><p>故事：很多顾客都希望也能吃到古法和黑马的技术的煎饼果子。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[古法煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[黑马煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prentice</span>(School, Master):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[独创煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 如果是先调用了父类的属性和方法，父类属性会覆盖子类属性，故在调用属性前，先调用自己子类的初始化</span><br>        self.__init__()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br>    <span class="hljs-comment"># 调用父类方法，但是为保证调用到的也是父类的属性，必须在调用方法前调用父类的初始化</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_master_cake</span>(<span class="hljs-params">self</span>):<br>        Master.__init__(self)<br>        Master.make_cake(self)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_school_cake</span>(<span class="hljs-params">self</span>):<br>        School.__init__(self)<br>        School.make_cake(self)<br><br><br>daqiu = Prentice()<br><br>daqiu.make_cake()<br><br>daqiu.make_master_cake()<br><br>daqiu.make_school_cake()<br><br>daqiu.make_cake()<br></code></pre></td></tr></table></figure><h1 id="六-多层继承"><a href="#六-多层继承" class="headerlink" title="六. 多层继承"></a>六. 多层继承</h1><blockquote><p>故事：N年后，daqiu老了，想要把所有技术传承给自己的徒弟。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[古法煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[黑马煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prentice</span>(School, Master):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[独创煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        self.__init__()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_master_cake</span>(<span class="hljs-params">self</span>):<br>        Master.__init__(self)<br>        Master.make_cake(self)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_school_cake</span>(<span class="hljs-params">self</span>):<br>        School.__init__(self)<br>        School.make_cake(self)<br><br><br><span class="hljs-comment"># 徒孙类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tusun</span>(<span class="hljs-title class_ inherited__">Prentice</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br>xiaoqiu = Tusun()<br><br>xiaoqiu.make_cake()<br><br>xiaoqiu.make_school_cake()<br><br>xiaoqiu.make_master_cake()<br><br></code></pre></td></tr></table></figure><h1 id="七-super-调用父类方法"><a href="#七-super-调用父类方法" class="headerlink" title="七. super()调用父类方法"></a>七. super()调用父类方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[古法煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>(<span class="hljs-title class_ inherited__">Master</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[黑马煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br>        <span class="hljs-comment"># 方法2.1</span><br>        <span class="hljs-comment"># super(School, self).__init__()</span><br>        <span class="hljs-comment"># super(School, self).make_cake()</span><br><br>        <span class="hljs-comment"># 方法2.2</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-built_in">super</span>().make_cake()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prentice</span>(<span class="hljs-title class_ inherited__">School</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[独创煎饼果子技术]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        self.__init__()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br>    <span class="hljs-comment"># 子类调用父类的同名方法和属性：把父类的同名属性和方法再次封装</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_master_cake</span>(<span class="hljs-params">self</span>):<br>        Master.__init__(self)<br>        Master.make_cake(self)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_school_cake</span>(<span class="hljs-params">self</span>):<br>        School.__init__(self)<br>        School.make_cake(self)<br><br>    <span class="hljs-comment"># 一次性调用父类的同名属性和方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_old_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 方法一：代码冗余；父类类名如果变化，这里代码需要频繁修改</span><br>        <span class="hljs-comment"># Master.__init__(self)</span><br>        <span class="hljs-comment"># Master.make_cake(self)</span><br>        <span class="hljs-comment"># School.__init__(self)</span><br>        <span class="hljs-comment"># School.make_cake(self)</span><br><br>        <span class="hljs-comment"># 方法二: super()</span><br>        <span class="hljs-comment"># 方法2.1 super(当前类名, self).函数()</span><br>        <span class="hljs-comment"># super(Prentice, self).__init__()</span><br>        <span class="hljs-comment"># super(Prentice, self).make_cake()</span><br><br>        <span class="hljs-comment"># 方法2.2 super().函数()</span><br>        <span class="hljs-built_in">super</span>().__init__()<br>        <span class="hljs-built_in">super</span>().make_cake()<br><br><br>daqiu = Prentice()<br><br>daqiu.make_old_cake()<br></code></pre></td></tr></table></figure><blockquote><p>注意：使用super() 可以自动查找父类。调用顺序遵循 <code>__mro__</code> 类属性的顺序。比较适合单继承使用。</p></blockquote><h1 id="八-私有权限"><a href="#八-私有权限" class="headerlink" title="八. 私有权限"></a>八. 私有权限</h1><h2 id="8-1-定义私有属性和方法"><a href="#8-1-定义私有属性和方法" class="headerlink" title="8.1 定义私有属性和方法"></a>8.1 定义私有属性和方法</h2><p>在Python中，可以为实例属性和方法设置私有权限，即设置某个实例属性或实例方法不继承给子类。</p><blockquote><p>故事：daqiu把技术传承给徒弟的同时，不想把自己的钱(2000000个亿)继承给徒弟，这个时候就要为<code>钱</code>这个实例属性设置私有权限。</p></blockquote><p>设置私有权限的方法：在属性名和方法名 前面 加上两个下划线 __。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[古法煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[黑马煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prentice</span>(School, Master):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[独创煎饼果子配方]&#x27;</span><br>        <span class="hljs-comment"># 定义私有属性</span><br>        self.__money = <span class="hljs-number">2000000</span><br><br>    <span class="hljs-comment"># 定义私有方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__info_print</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.kongfu)<br>        <span class="hljs-built_in">print</span>(self.__money)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        self.__init__()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_master_cake</span>(<span class="hljs-params">self</span>):<br>        Master.__init__(self)<br>        Master.make_cake(self)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_school_cake</span>(<span class="hljs-params">self</span>):<br>        School.__init__(self)<br>        School.make_cake(self)<br><br><br><span class="hljs-comment"># 徒孙类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tusun</span>(<span class="hljs-title class_ inherited__">Prentice</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br>daqiu = Prentice()<br><span class="hljs-comment"># 对象不能访问私有属性和私有方法</span><br><span class="hljs-comment"># print(daqiu.__money)</span><br><span class="hljs-comment"># daqiu.__info_print()</span><br><br>xiaoqiu = Tusun()<br><span class="hljs-comment"># 子类无法继承父类的私有属性和私有方法</span><br><span class="hljs-comment"># print(xiaoqiu.__money)  # 无法访问实例属性__money</span><br><span class="hljs-comment"># xiaoqiu.__info_print()</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：私有属性和私有方法只能在类里面访问和修改。</p></blockquote><h2 id="8-2-获取和修改私有属性值"><a href="#8-2-获取和修改私有属性值" class="headerlink" title="8.2 获取和修改私有属性值"></a>8.2 获取和修改私有属性值</h2><p>在Python中，一般定义函数名<code>get_xx</code>用来获取私有属性，定义<code>set_xx</code>用来修改私有属性值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Master</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[古法煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">School</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[黑马煎饼果子配方]&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Prentice</span>(School, Master):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.kongfu = <span class="hljs-string">&#x27;[独创煎饼果子配方]&#x27;</span><br>        self.__money = <span class="hljs-number">2000000</span><br><br>    <span class="hljs-comment"># 获取私有属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_money</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__money<br><br>    <span class="hljs-comment"># 修改私有属性</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_money</span>(<span class="hljs-params">self</span>):<br>        self.__money = <span class="hljs-number">500</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__info_print</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(self.kongfu)<br>        <span class="hljs-built_in">print</span>(self.__money)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_cake</span>(<span class="hljs-params">self</span>):<br>        self.__init__()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;运用<span class="hljs-subst">&#123;self.kongfu&#125;</span>制作煎饼果子&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_master_cake</span>(<span class="hljs-params">self</span>):<br>        Master.__init__(self)<br>        Master.make_cake(self)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_school_cake</span>(<span class="hljs-params">self</span>):<br>        School.__init__(self)<br>        School.make_cake(self)<br><br><br><span class="hljs-comment"># 徒孙类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tusun</span>(<span class="hljs-title class_ inherited__">Prentice</span>):<br>    <span class="hljs-keyword">pass</span><br><br><br>daqiu = Prentice()<br><br>xiaoqiu = Tusun()<br><span class="hljs-comment"># 调用get_money函数获取私有属性money的值</span><br><span class="hljs-built_in">print</span>(xiaoqiu.get_money())<br><span class="hljs-comment"># 调用set_money函数修改私有属性money的值</span><br>xiaoqiu.set_money()<br><span class="hljs-built_in">print</span>(xiaoqiu.get_money())<br></code></pre></td></tr></table></figure><h1 id="九-总结"><a href="#九-总结" class="headerlink" title="九. 总结"></a>九. 总结</h1><ul><li><p>继承的特点</p><ul><li>子类默认拥有父类的所有属性和方法</li><li>子类重写父类同名方法和属性</li><li>子类调用父类同名方法和属性</li></ul></li><li><p>super()方法快速调用父类方法</p></li><li><p>私有权限</p><ul><li>不能继承给子类的属性和方法需要添加私有权限</li><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>():<br>  <span class="hljs-comment"># 私有属性</span><br>  __属性名 = 值<br><br>  <span class="hljs-comment"># 私有方法</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__函数名</span>(<span class="hljs-params">self</span>):<br>    代码<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>面向对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>面向对象</tag>
      
      <tag>继承</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象基础</title>
    <link href="/2023/01/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/01/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h1><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>理解面向对象</li><li>类和对象</li><li>添加和获取对象属性</li><li>魔法方法</li></ul><h1 id="一-理解面向对象"><a href="#一-理解面向对象" class="headerlink" title="一. 理解面向对象"></a>一. 理解面向对象</h1><p>面向对象是一种抽象化的编程思想，很多编程语言中都有的一种思想。</p><p>例如：洗衣服</p><p>思考：几种途径可以完成洗衣服？</p><p>答： 手洗 和 机洗。</p><p>手洗：找盆 - 放水 - 加洗衣粉 - 浸泡 - 搓洗 - 拧干水 - 倒水 - 漂洗N次 - 拧干 - 晾晒。</p><p>机洗：打开洗衣机 - 放衣服 - 加洗衣粉 - 按下开始按钮 - 晾晒。</p><p>思考：对比两种洗衣服途径，同学们发现了什么？</p><p>答：机洗更简单</p><p>思考：机洗，只需要找到一台洗衣机，加入简单操作就可以完成洗衣服的工作，而不需要关心洗衣机内部发生了什么事情。</p><blockquote><p>总结：&#x3D;&#x3D;面向对象就是将编程当成是一个事物，对外界来说，事物是直接使用的，不用去管他内部的情况。而编程就是设置事物能够做什么事。&#x3D;&#x3D;</p></blockquote><h1 id="二-类和对象"><a href="#二-类和对象" class="headerlink" title="二. 类和对象"></a>二. 类和对象</h1><p>思考：洗衣机洗衣服描述过程中，洗衣机其实就是一个事物，即对象，洗衣机对象哪来的呢？</p><p>答：洗衣机是由工厂工人制作出来。</p><p>思考：工厂工人怎么制作出的洗衣机？</p><p>答：工人根据设计师设计的功能图纸制作洗衣机。</p><p>总结：图纸  → 洗衣机 → 洗衣服。</p><p>在面向对象编程过程中，有两个重要组成部分：&#x3D;&#x3D;类&#x3D;&#x3D; 和 &#x3D;&#x3D;对象&#x3D;&#x3D;。</p><p>&#x3D;&#x3D;类和对象的关系：用类去创建一个对象。&#x3D;&#x3D;</p><h2 id="2-1-理解类和对象"><a href="#2-1-理解类和对象" class="headerlink" title="2.1 理解类和对象"></a>2.1 理解类和对象</h2><h3 id="2-1-1-类"><a href="#2-1-1-类" class="headerlink" title="2.1.1 类"></a>2.1.1 类</h3><p>类是对一系列具有相同&#x3D;&#x3D;特征&#x3D;&#x3D;和&#x3D;&#x3D;行为&#x3D;&#x3D;的事物的统称，是一个&#x3D;&#x3D;抽象的概念&#x3D;&#x3D;，不是真实存在的事物。</p><ul><li>特征即是属性</li><li>行为即是方法</li></ul><p>类比如是制造洗衣机时要用到的图纸，也就是说&#x3D;&#x3D;类是用来创建对象&#x3D;&#x3D;。</p><p><img src="/2023/01/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20190222154356953.png"></p><h3 id="2-1-2-对象"><a href="#2-1-2-对象" class="headerlink" title="2.1.2 对象"></a>2.1.2 对象</h3><p>对象是类创建出来的真实存在的事物，例如：洗衣机。</p><blockquote><p>注意：开发中，先有类，再有对象。</p></blockquote><p><img src="/2023/01/23/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/image-20190222154727379.png"></p><h2 id="2-2-面向对象实现方法"><a href="#2-2-面向对象实现方法" class="headerlink" title="2.2 面向对象实现方法"></a>2.2 面向对象实现方法</h2><h3 id="2-2-1-定义类"><a href="#2-2-1-定义类" class="headerlink" title="2.2.1 定义类"></a>2.2.1 定义类</h3><p>Python2中类分为：经典类 和 新式类</p><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>():<br>    代码<br>    ......<br></code></pre></td></tr></table></figure><blockquote><p>注意：类名要满足标识符命名规则，同时遵循&#x3D;&#x3D;大驼峰命名习惯&#x3D;&#x3D;。</p></blockquote><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Washer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wash</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我会洗衣服&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>拓展：经典类</li></ul><p>不由任意内置类型派生出的类，称之为经典类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>:<br>    代码<br>    ......<br></code></pre></td></tr></table></figure><h3 id="2-2-2-创建对象"><a href="#2-2-2-创建对象" class="headerlink" title="2.2.2 创建对象"></a>2.2.2 创建对象</h3><p>对象又名实例。</p><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">对象名 = 类名()<br></code></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建对象</span><br>haier1 = Washer()<br><br><span class="hljs-comment"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span><br><span class="hljs-built_in">print</span>(haier1)<br><br><span class="hljs-comment"># haier对象调用实例方法</span><br>haier1.wash()<br></code></pre></td></tr></table></figure><blockquote><p>注意：创建对象的过程也叫实例化对象。</p></blockquote><h3 id="2-2-3-self"><a href="#2-2-3-self" class="headerlink" title="2.2.3 self"></a>2.2.3 self</h3><p>self指的是调用该函数的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 定义类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Washer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wash</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我会洗衣服&#x27;</span>)<br>        <span class="hljs-comment"># &lt;__main__.Washer object at 0x0000024BA2B34240&gt;</span><br>        <span class="hljs-built_in">print</span>(self)<br><br><br><span class="hljs-comment"># 2. 创建对象</span><br>haier1 = Washer()<br><span class="hljs-comment"># &lt;__main__.Washer object at 0x0000018B7B224240&gt;</span><br><span class="hljs-built_in">print</span>(haier1)<br><span class="hljs-comment"># haier1对象调用实例方法</span><br>haier1.wash()<br><br><br>haier2 = Washer()<br><span class="hljs-comment"># &lt;__main__.Washer object at 0x0000022005857EF0&gt;</span><br><span class="hljs-built_in">print</span>(haier2)<br></code></pre></td></tr></table></figure><blockquote><p>注意：打印对象和self得到的结果是一致的，都是当前对象的内存中存储地址。</p></blockquote><h1 id="三-添加和获取对象属性"><a href="#三-添加和获取对象属性" class="headerlink" title="三. 添加和获取对象属性"></a>三. 添加和获取对象属性</h1><p>属性即是特征，比如：洗衣机的宽度、高度、重量…</p><p>对象属性既可以在类外面添加和获取，也能在类里面添加和获取。</p><h2 id="3-1-类外面添加对象属性"><a href="#3-1-类外面添加对象属性" class="headerlink" title="3.1 类外面添加对象属性"></a>3.1 类外面添加对象属性</h2><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">对象名.属性名 = 值<br></code></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">haier1.width = <span class="hljs-number">500</span><br>haier1.height = <span class="hljs-number">800</span><br></code></pre></td></tr></table></figure><h2 id="3-2-类外面获取对象属性"><a href="#3-2-类外面获取对象属性" class="headerlink" title="3.2 类外面获取对象属性"></a>3.2 类外面获取对象属性</h2><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">对象名.属性名<br></code></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;haier1洗衣机的宽度是<span class="hljs-subst">&#123;haier1.width&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;haier1洗衣机的高度是<span class="hljs-subst">&#123;haier1.height&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-3-类里面获取对象属性"><a href="#3-3-类里面获取对象属性" class="headerlink" title="3.3 类里面获取对象属性"></a>3.3 类里面获取对象属性</h2><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.属性名<br></code></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Washer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 类里面获取实例属性</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;haier1洗衣机的宽度是<span class="hljs-subst">&#123;self.width&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;haier1洗衣机的高度是<span class="hljs-subst">&#123;self.height&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># 创建对象</span><br>haier1 = Washer()<br><br><span class="hljs-comment"># 添加实例属性</span><br>haier1.width = <span class="hljs-number">500</span><br>haier1.height = <span class="hljs-number">800</span><br><br>haier1.print_info()<br></code></pre></td></tr></table></figure><h1 id="四-魔法方法"><a href="#四-魔法方法" class="headerlink" title="四. 魔法方法"></a>四. 魔法方法</h1><p>在Python中，<code>__xx__()</code>的函数叫做魔法方法，指的是具有特殊功能的函数。</p><h2 id="4-1-init"><a href="#4-1-init" class="headerlink" title="4.1 __init__()"></a>4.1 <code>__init__()</code></h2><h3 id="4-1-1-体验-init"><a href="#4-1-1-体验-init" class="headerlink" title="4.1.1 体验__init__()"></a>4.1.1 体验<code>__init__()</code></h3><p>思考：洗衣机的宽度高度是与生俱来的属性，可不可以在生产过程中就赋予这些属性呢？</p><p>答：理应如此。</p><p>&#x3D;&#x3D;<code>__init__()</code>方法的作用：初始化对象。&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Washer</span>():<br>    <br>    <span class="hljs-comment"># 定义初始化功能的函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 添加实例属性</span><br>        self.width = <span class="hljs-number">500</span><br>        self.height = <span class="hljs-number">800</span><br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 类里面调用实例属性</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;洗衣机的宽度是<span class="hljs-subst">&#123;self.width&#125;</span>, 高度是<span class="hljs-subst">&#123;self.height&#125;</span>&#x27;</span>)<br><br><br>haier1 = Washer()<br>haier1.print_info()<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ul><li><code>__init__()</code>方法，在创建一个对象时默认被调用，不需要手动调用</li><li><code>__init__(self)</code>中的self参数，不需要开发者传递，python解释器会自动把当前的对象引用传递过去。</li></ul></blockquote><h3 id="4-1-2-带参数的-init"><a href="#4-1-2-带参数的-init" class="headerlink" title="4.1.2 带参数的__init__()"></a>4.1.2 带参数的<code>__init__()</code></h3><p>思考：一个类可以创建多个对象，如何对不同的对象设置不同的初始化属性呢？</p><p>答：传参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Washer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, width, height</span>):<br>        self.width = width<br>        self.height = height<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;洗衣机的宽度是<span class="hljs-subst">&#123;self.width&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;洗衣机的高度是<span class="hljs-subst">&#123;self.height&#125;</span>&#x27;</span>)<br><br><br>haier1 = Washer(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br>haier1.print_info()<br><br><br>haier2 = Washer(<span class="hljs-number">30</span>, <span class="hljs-number">40</span>)<br>haier2.print_info()<br></code></pre></td></tr></table></figure><h2 id="4-2-str"><a href="#4-2-str" class="headerlink" title="4.2  __str__()"></a>4.2  <code>__str__()</code></h2><p>当使用print输出对象的时候，默认打印对象的内存地址。如果类定义了<code>__str__</code>方法，那么就会打印从在这个方法中 return 的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Washer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, width, height</span>):<br>        self.width = width<br>        self.height = height<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;这是海尔洗衣机的说明书&#x27;</span><br><br><br>haier1 = Washer(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><span class="hljs-comment"># 这是海尔洗衣机的说明书</span><br><span class="hljs-built_in">print</span>(haier1)<br></code></pre></td></tr></table></figure><h2 id="4-3-del"><a href="#4-3-del" class="headerlink" title="4.3  __del__()"></a>4.3  <code>__del__()</code></h2><p>当删除对象时，python解释器也会默认调用<code>__del__()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Washer</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, width, height</span>):<br>        self.width = width<br>        self.height = height<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self&#125;</span>对象已经被删除&#x27;</span>)<br><br><br>haier1 = Washer(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br><br><span class="hljs-comment"># &lt;__main__.Washer object at 0x0000026118223278&gt;对象已经被删除</span><br><span class="hljs-keyword">del</span> haier1<br></code></pre></td></tr></table></figure><h1 id="五-综合应用"><a href="#五-综合应用" class="headerlink" title="五. 综合应用"></a>五. 综合应用</h1><h2 id="5-1-烤地瓜"><a href="#5-1-烤地瓜" class="headerlink" title="5.1 烤地瓜"></a>5.1 烤地瓜</h2><h3 id="5-1-1-需求"><a href="#5-1-1-需求" class="headerlink" title="5.1.1 需求"></a>5.1.1 需求</h3><p>需求主线：</p><ol><li><p>被烤的时间和对应的地瓜状态：</p><p>0-3分钟：生的</p><p>3-5分钟：半生不熟</p><p>5-8分钟：熟的</p><p>超过8分钟：烤糊了</p></li><li><p>添加的调料：</p><p>用户可以按自己的意愿添加调料</p></li></ol><h3 id="5-1-2-步骤分析"><a href="#5-1-2-步骤分析" class="headerlink" title="5.1.2 步骤分析"></a>5.1.2 步骤分析</h3><p>需求涉及一个事物： 地瓜，故案例涉及一个类：地瓜类。</p><h4 id="5-1-2-1-定义类"><a href="#5-1-2-1-定义类" class="headerlink" title="5.1.2.1 定义类"></a>5.1.2.1 定义类</h4><ul><li><p>地瓜的属性</p><ul><li>被烤的时间</li><li>地瓜的状态</li><li>添加的调料</li></ul></li><li><p>地瓜的方法</p><ul><li>被烤<ul><li>用户根据意愿设定每次烤地瓜的时间</li><li>判断地瓜被烤的总时间是在哪个区间，修改地瓜状态</li></ul></li><li>添加调料<ul><li>用户根据意愿设定添加的调料</li><li>将用户添加的调料存储</li></ul></li></ul></li><li><p>显示对象信息</p></li></ul><h4 id="5-1-2-2-创建对象，调用相关实例方法"><a href="#5-1-2-2-创建对象，调用相关实例方法" class="headerlink" title="5.1.2.2 创建对象，调用相关实例方法"></a>5.1.2.2 创建对象，调用相关实例方法</h4><h3 id="5-1-3-代码实现"><a href="#5-1-3-代码实现" class="headerlink" title="5.1.3 代码实现"></a>5.1.3 代码实现</h3><h4 id="5-1-3-1-定义类"><a href="#5-1-3-1-定义类" class="headerlink" title="5.1.3.1 定义类"></a>5.1.3.1 定义类</h4><ul><li>地瓜属性<ul><li>定义地瓜初始化属性，后期根据程序推进更新实例属性</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SweetPotato</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 被烤的时间</span><br>        self.cook_time = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 地瓜的状态</span><br>        self.cook_static = <span class="hljs-string">&#x27;生的&#x27;</span><br>        <span class="hljs-comment"># 调料列表</span><br>        self.condiments = []<br></code></pre></td></tr></table></figure><h4 id="5-1-3-2-定义烤地瓜方法"><a href="#5-1-3-2-定义烤地瓜方法" class="headerlink" title="5.1.3.2 定义烤地瓜方法"></a>5.1.3.2 定义烤地瓜方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SweetPotato</span>():<br>    ......<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cook</span>(<span class="hljs-params">self, time</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;烤地瓜的方法&quot;&quot;&quot;</span><br>        self.cook_time += time<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= self.cook_time &lt; <span class="hljs-number">3</span>:<br>            self.cook_static = <span class="hljs-string">&#x27;生的&#x27;</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-number">3</span> &lt;= self.cook_time &lt; <span class="hljs-number">5</span>:<br>            self.cook_static = <span class="hljs-string">&#x27;半生不熟&#x27;</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-number">5</span> &lt;= self.cook_time &lt; <span class="hljs-number">8</span>:<br>            self.cook_static = <span class="hljs-string">&#x27;熟了&#x27;</span><br>        <span class="hljs-keyword">elif</span> self.cook_time &gt;= <span class="hljs-number">8</span>:<br>            self.cook_static = <span class="hljs-string">&#x27;烤糊了&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="5-1-3-3-书写str魔法方法，用于输出对象状态"><a href="#5-1-3-3-书写str魔法方法，用于输出对象状态" class="headerlink" title="5.1.3.3 书写str魔法方法，用于输出对象状态"></a>5.1.3.3 书写str魔法方法，用于输出对象状态</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SweetPotato</span>():<br>......<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;这个地瓜烤了<span class="hljs-subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="hljs-subst">&#123;self.cook_static&#125;</span>&#x27;</span><br><br></code></pre></td></tr></table></figure><h4 id="5-1-3-4-创建对象，测试实例属性和实例方法"><a href="#5-1-3-4-创建对象，测试实例属性和实例方法" class="headerlink" title="5.1.3.4  创建对象，测试实例属性和实例方法"></a>5.1.3.4  创建对象，测试实例属性和实例方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">digua1 = SweetPotato()<br><span class="hljs-built_in">print</span>(digua1)<br>digua1.cook(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(digua1)<br></code></pre></td></tr></table></figure><h4 id="5-1-3-5-定义添加调料方法，并调用该实例方法"><a href="#5-1-3-5-定义添加调料方法，并调用该实例方法" class="headerlink" title="5.1.3.5 定义添加调料方法，并调用该实例方法"></a>5.1.3.5 定义添加调料方法，并调用该实例方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SweetPotato</span>():<br>......<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_condiments</span>(<span class="hljs-params">self, condiment</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;添加调料&quot;&quot;&quot;</span><br>        self.condiments.append(condiment)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;这个地瓜烤了<span class="hljs-subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="hljs-subst">&#123;self.cook_static&#125;</span>, 添加的调料有<span class="hljs-subst">&#123;self.condiments&#125;</span>&#x27;</span><br>      <br><br>digua1 = SweetPotato()<br><span class="hljs-built_in">print</span>(digua1)<br><br>digua1.cook(<span class="hljs-number">2</span>)<br>digua1.add_condiments(<span class="hljs-string">&#x27;酱油&#x27;</span>)<br><span class="hljs-built_in">print</span>(digua1)<br><br>digua1.cook(<span class="hljs-number">2</span>)<br>digua1.add_condiments(<span class="hljs-string">&#x27;辣椒面儿&#x27;</span>)<br><span class="hljs-built_in">print</span>(digua1)<br><br>digua1.cook(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(digua1)<br><br>digua1.cook(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(digua1)<br></code></pre></td></tr></table></figure><h3 id="5-1-4-代码总览"><a href="#5-1-4-代码总览" class="headerlink" title="5.1.4 代码总览"></a>5.1.4 代码总览</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SweetPotato</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 被烤的时间</span><br>        self.cook_time = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 地瓜的状态</span><br>        self.cook_static = <span class="hljs-string">&#x27;生的&#x27;</span><br>        <span class="hljs-comment"># 调料列表</span><br>        self.condiments = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cook</span>(<span class="hljs-params">self, time</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;烤地瓜的方法&quot;&quot;&quot;</span><br>        self.cook_time += time<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= self.cook_time &lt; <span class="hljs-number">3</span>:<br>            self.cook_static = <span class="hljs-string">&#x27;生的&#x27;</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-number">3</span> &lt;= self.cook_time &lt; <span class="hljs-number">5</span>:<br>            self.cook_static = <span class="hljs-string">&#x27;半生不熟&#x27;</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-number">5</span> &lt;= self.cook_time &lt; <span class="hljs-number">8</span>:<br>            self.cook_static = <span class="hljs-string">&#x27;熟了&#x27;</span><br>        <span class="hljs-keyword">elif</span> self.cook_time &gt;= <span class="hljs-number">8</span>:<br>            self.cook_static = <span class="hljs-string">&#x27;烤糊了&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_condiments</span>(<span class="hljs-params">self, condiment</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;添加调料&quot;&quot;&quot;</span><br>        self.condiments.append(condiment)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;这个地瓜烤了<span class="hljs-subst">&#123;self.cook_time&#125;</span>分钟, 状态是<span class="hljs-subst">&#123;self.cook_static&#125;</span>, 添加的调料有<span class="hljs-subst">&#123;self.condiments&#125;</span>&#x27;</span><br><br><br>digua1 = SweetPotato()<br><span class="hljs-built_in">print</span>(digua1)<br><br>digua1.cook(<span class="hljs-number">2</span>)<br>digua1.add_condiments(<span class="hljs-string">&#x27;酱油&#x27;</span>)<br><span class="hljs-built_in">print</span>(digua1)<br><br>digua1.cook(<span class="hljs-number">2</span>)<br>digua1.add_condiments(<span class="hljs-string">&#x27;辣椒面儿&#x27;</span>)<br><span class="hljs-built_in">print</span>(digua1)<br><br>digua1.cook(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(digua1)<br><br>digua1.cook(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(digua1)<br></code></pre></td></tr></table></figure><h2 id="5-2-搬家具"><a href="#5-2-搬家具" class="headerlink" title="5.2 搬家具"></a>5.2 搬家具</h2><h3 id="5-2-1-需求"><a href="#5-2-1-需求" class="headerlink" title="5.2.1 需求"></a>5.2.1 需求</h3><p>将小于房子剩余面积的家具摆放到房子中</p><h3 id="5-2-2-步骤分析"><a href="#5-2-2-步骤分析" class="headerlink" title="5.2.2 步骤分析"></a>5.2.2 步骤分析</h3><p>需求涉及两个事物：房子 和 家具，故被案例涉及两个类：房子类 和 家具类。</p><h4 id="5-2-2-1-定义类"><a href="#5-2-2-1-定义类" class="headerlink" title="5.2.2.1 定义类"></a>5.2.2.1 定义类</h4><ul><li><p>房子类</p><ul><li>实例属性<ul><li>房子地理位置</li><li>房子占地面积</li><li>房子剩余面积</li><li>房子内家具列表</li></ul></li><li>实例方法<ul><li>容纳家具</li></ul></li><li>显示房屋信息</li></ul></li><li><p>家具类</p><ul><li>家具名称</li><li>家具占地面积</li></ul></li></ul><h4 id="5-2-2-2-创建对象并调用相关方法"><a href="#5-2-2-2-创建对象并调用相关方法" class="headerlink" title="5.2.2.2 创建对象并调用相关方法"></a>5.2.2.2 创建对象并调用相关方法</h4><h3 id="5-2-3-代码实现"><a href="#5-2-3-代码实现" class="headerlink" title="5.2.3 代码实现"></a>5.2.3 代码实现</h3><h4 id="5-2-3-1-定义类"><a href="#5-2-3-1-定义类" class="headerlink" title="5.2.3.1 定义类"></a>5.2.3.1 定义类</h4><ul><li>家具类</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Furniture</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, area</span>):<br>        <span class="hljs-comment"># 家具名字</span><br>        self.name = name<br>        <span class="hljs-comment"># 家具占地面积</span><br>        self.area = area<br></code></pre></td></tr></table></figure><ul><li><h4 id="房子类"><a href="#房子类" class="headerlink" title="房子类"></a>房子类</h4></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Home</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, address, area</span>):<br>        <span class="hljs-comment"># 地理位置</span><br>        self.address = address<br>        <span class="hljs-comment"># 房屋面积</span><br>        self.area = area<br>        <span class="hljs-comment"># 剩余面积</span><br>        self.free_area = area<br>        <span class="hljs-comment"># 家具列表</span><br>        self.furniture = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;房子坐落于<span class="hljs-subst">&#123;self.address&#125;</span>, 占地面积<span class="hljs-subst">&#123;self.area&#125;</span>, 剩余面积<span class="hljs-subst">&#123;self.free_area&#125;</span>, 家具有<span class="hljs-subst">&#123;self.furniture&#125;</span>&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_furniture</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;容纳家具&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.free_area &gt;= item.area:<br>            self.furniture.append(item.name)<br>            <span class="hljs-comment"># 家具搬入后，房屋剩余面积 = 之前剩余面积 - 该家具面积</span><br>            self.free_area -= item.area<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;家具太大，剩余面积不足，无法容纳&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="5-2-3-2-创建对象并调用实例属性和方法"><a href="#5-2-3-2-创建对象并调用实例属性和方法" class="headerlink" title="5.2.3.2 创建对象并调用实例属性和方法"></a>5.2.3.2 创建对象并调用实例属性和方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">bed = Furniture(<span class="hljs-string">&#x27;双人床&#x27;</span>, <span class="hljs-number">6</span>)<br>jia1 = Home(<span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-number">1200</span>)<br><span class="hljs-built_in">print</span>(jia1)<br><br>jia1.add_furniture(bed)<br><span class="hljs-built_in">print</span>(jia1)<br><br>sofa = Furniture(<span class="hljs-string">&#x27;沙发&#x27;</span>, <span class="hljs-number">10</span>)<br>jia1.add_furniture(sofa)<br><span class="hljs-built_in">print</span>(jia1)<br><br>ball = Furniture(<span class="hljs-string">&#x27;篮球场&#x27;</span>, <span class="hljs-number">1500</span>)<br>jia1.add_furniture(ball)<br><span class="hljs-built_in">print</span>(jia1)<br></code></pre></td></tr></table></figure><h1 id="六-总结"><a href="#六-总结" class="headerlink" title="六. 总结"></a>六. 总结</h1><ul><li><p>面向对象重要组成部分</p><ul><li>类<ul><li>创建类</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">类名</span>():<br>  代码<br></code></pre></td></tr></table></figure><ul><li>对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">对象名 = 类名()<br></code></pre></td></tr></table></figure></li><li><p>添加对象属性</p><ul><li>类外面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">对象名.属性名 = 值<br></code></pre></td></tr></table></figure><ul><li>类里面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.属性名 = 值<br></code></pre></td></tr></table></figure></li><li><p>获取对象属性</p><ul><li>类外面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">对象名.属性名<br></code></pre></td></tr></table></figure><ul><li>类里面</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">self.属性名<br></code></pre></td></tr></table></figure></li><li><p>魔法方法</p><ul><li><code>__init__()</code>: 初始化</li><li><code>__str__()</code>:输出对象信息</li><li><code>__del__()</code>:删除对象时调用</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>面向对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>面向对象</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数加强</title>
    <link href="/2023/01/20/%E5%87%BD%E6%95%B0%E5%8A%A0%E5%BC%BA/"/>
    <url>/2023/01/20/%E5%87%BD%E6%95%B0%E5%8A%A0%E5%BC%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>应用：学员管理系统</li><li>递归</li><li>lambda 表达式</li><li>高阶函数</li></ul><h1 id="一-应用：学员管理系统"><a href="#一-应用：学员管理系统" class="headerlink" title="一. 应用：学员管理系统"></a>一. 应用：学员管理系统</h1><h2 id="1-1-系统简介"><a href="#1-1-系统简介" class="headerlink" title="1.1 系统简介"></a>1.1 系统简介</h2><p>需求：进入系统显示系统功能界面，功能如下：</p><ul><li>1、添加学员</li><li>2、删除学员</li><li>3、修改学员信息</li><li>4、查询学员信息</li><li>5、显示所有学员信息</li><li>6、退出系统</li></ul><p>系统共6个功能，用户根据自己需求选取。</p><h2 id="1-2-步骤分析"><a href="#1-2-步骤分析" class="headerlink" title="1.2 步骤分析"></a>1.2 步骤分析</h2><ol><li><p>显示功能界面</p></li><li><p>用户输入功能序号</p></li><li><p>根据用户输入的功能序号，执行不同的功能(函数)</p><p>3.1 定义函数</p><p>3.2 调用函数</p></li></ol><h2 id="1-3-需求实现"><a href="#1-3-需求实现" class="headerlink" title="1.3 需求实现"></a>1.3 需求实现</h2><h3 id="1-3-1-显示功能界面"><a href="#1-3-1-显示功能界面" class="headerlink" title="1.3.1 显示功能界面"></a>1.3.1 显示功能界面</h3><p>定义函数<code>print_info</code>，负责显示系统功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">20</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎登录学员管理系统&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1: 添加学员&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;2: 删除学员&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;3: 修改学员信息&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;4: 查询学员信息&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;5: 显示所有学员信息&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;6: 退出系统&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">20</span>)<br>    <br>    <br>print_info()<br></code></pre></td></tr></table></figure><h3 id="1-3-2-用户输入序号，选择功能"><a href="#1-3-2-用户输入序号，选择功能" class="headerlink" title="1.3.2 用户输入序号，选择功能"></a>1.3.2 用户输入序号，选择功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">user_num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请选择您需要的功能序号：&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="1-3-3-根据用户选择，执行不同的功能"><a href="#1-3-3-根据用户选择，执行不同的功能" class="headerlink" title="1.3.3 根据用户选择，执行不同的功能"></a>1.3.3 根据用户选择，执行不同的功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> user_num == <span class="hljs-string">&#x27;1&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;添加学员&#x27;</span>)<br><span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;2&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;删除学员&#x27;</span>)<br><span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;3&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改学员信息&#x27;</span>)<br><span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;4&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询学员信息&#x27;</span>)<br><span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;5&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;显示所有学员信息&#x27;</span>)<br><span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;6&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;退出系统&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>工作中，需要根据实际需求调优代码。</p><ol><li>用户选择系统功能的代码需要循环使用，直到用户主动退出系统。</li><li>如果用户输入1-6以外的数字，需要提示用户。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 1. 显示功能界面</span><br>    print_info()<br>    <br>    <span class="hljs-comment"># 2. 用户选择功能</span><br>    user_num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请选择您需要的功能序号：&#x27;</span>)<br><br>    <span class="hljs-comment"># 3. 根据用户选择，执行不同的功能</span><br>    <span class="hljs-keyword">if</span> user_num == <span class="hljs-string">&#x27;1&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;添加学员&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;删除学员&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;3&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改学员信息&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;4&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询学员信息&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;5&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;显示所有学员信息&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;6&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;退出系统&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输入错误，请重新输入!!!&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="1-3-4-定义不同功能的函数"><a href="#1-3-4-定义不同功能的函数" class="headerlink" title="1.3.4 定义不同功能的函数"></a>1.3.4 定义不同功能的函数</h3><p>所有功能函数都是操作学员信息，所有存储所有学员信息应该是一个&#x3D;&#x3D;全局变量&#x3D;&#x3D;，数据类型为&#x3D;&#x3D;列表&#x3D;&#x3D;。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">info = []<br></code></pre></td></tr></table></figure><h4 id="1-3-4-1-添加学员"><a href="#1-3-4-1-添加学员" class="headerlink" title="1.3.4.1 添加学员"></a>1.3.4.1 添加学员</h4><ul><li>需求分析</li></ul><ol><li><p>接收用户输入学员信息，并保存</p></li><li><p>判断是否添加学员信息</p><p>2.1 如果学员姓名已经存在，则报错提示</p><p>2.2 如果学员姓名不存在，则准备空字典，将用户输入的数据追加到字典，再列表追加字典数据</p></li><li><p>对应的if条件成立的位置调用该函数</p></li></ol><ul><li>代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_info</span>():<br>    <span class="hljs-string">&quot;&quot;&quot; 添加学员 &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 接收用户输入学员信息</span><br>    new_id = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入学号：&#x27;</span>)<br>    new_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入姓名：&#x27;</span>)<br>    new_tel = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入手机号：&#x27;</span>)<br>    <br><br>    <span class="hljs-comment"># 声明info是全局变量</span><br>    <span class="hljs-keyword">global</span> info<br><br>    <span class="hljs-comment"># 检测用户输入的姓名是否存在，存在则报错提示</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> info:<br>        <span class="hljs-keyword">if</span> new_name == i[<span class="hljs-string">&#x27;name&#x27;</span>]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;该用户已经存在！&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># 如果用户输入的姓名不存在，则添加该学员信息</span><br>    info_dict = &#123;&#125;<br>    <br>    <span class="hljs-comment"># 将用户输入的数据追加到字典</span><br>    info_dict[<span class="hljs-string">&#x27;id&#x27;</span>] = new_id<br>    info_dict[<span class="hljs-string">&#x27;name&#x27;</span>] = new_name<br>    info_dict[<span class="hljs-string">&#x27;tel&#x27;</span>] = new_tel<br>    <br>    <span class="hljs-comment"># 将这个学员的字典数据追加到列表</span><br>    info.append(info_dict)<br>    <br>    <span class="hljs-built_in">print</span>(info)<br></code></pre></td></tr></table></figure><h4 id="1-3-4-2-删除学员"><a href="#1-3-4-2-删除学员" class="headerlink" title="1.3.4.2 删除学员"></a>1.3.4.2 删除学员</h4><ul><li>需求分析</li></ul><p>按用户输入的学员姓名进行删除</p><ol><li><p>用户输入目标学员姓名</p></li><li><p>检查这个学员是否存在</p><p>2.1 如果存在，则列表删除这个数据</p><p>2.2 如果不存在，则提示“该用户不存在”</p></li><li><p>对应的if条件成立的位置调用该函数</p></li></ol><ul><li>代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除学员</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">del_info</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;删除学员&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 1. 用户输入要删除的学员的姓名</span><br>    del_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要删除的学员的姓名：&#x27;</span>)<br><br>    <span class="hljs-keyword">global</span> info<br>    <span class="hljs-comment"># 2. 判断学员是否存在:如果输入的姓名存在则删除，否则报错提示</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> info:<br>        <span class="hljs-keyword">if</span> del_name == i[<span class="hljs-string">&#x27;name&#x27;</span>]:<br>            info.remove(i)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;该学员不存在&#x27;</span>)<br><br>    <span class="hljs-built_in">print</span>(info)<br></code></pre></td></tr></table></figure><h4 id="1-3-4-3-修改学员信息"><a href="#1-3-4-3-修改学员信息" class="headerlink" title="1.3.4.3 修改学员信息"></a>1.3.4.3 修改学员信息</h4><ul><li>需求分析</li></ul><ol><li><p>用户输入目标学员姓名</p></li><li><p>检查这个学员是否存在</p><p>2.1 如果存在，则修改这位学员的信息，例如手机号</p><p>2.2 如果不存在，则报错</p></li><li><p>对应的if条件成立的位置调用该函数</p></li></ol><ul><li>代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_info</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;修改函数&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 1. 用户输入要修改的学员的姓名</span><br>    modify_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要修改的学员的姓名：&#x27;</span>)<br><br>    <span class="hljs-keyword">global</span> info<br>    <span class="hljs-comment"># 2. 判断学员是否存在：如果输入的姓名存在则修改手机号，否则报错提示</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> info:<br>        <span class="hljs-keyword">if</span> modify_name == i [<span class="hljs-string">&#x27;name&#x27;</span>]:<br>            i[<span class="hljs-string">&#x27;tel&#x27;</span>] = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入新的手机号：&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;该学员不存在&#x27;</span>)<br>    <br>    <span class="hljs-built_in">print</span>(info)<br></code></pre></td></tr></table></figure><h4 id="1-3-4-4-查询学员信息"><a href="#1-3-4-4-查询学员信息" class="headerlink" title="1.3.4.4 查询学员信息"></a>1.3.4.4 查询学员信息</h4><ul><li>需求分析</li></ul><ol><li><p>用户输入目标学员姓名</p></li><li><p>检查学员是否存在</p><p>2.1 如果存在，则显示这个学员的信息</p><p>2.2 如果不存在，则报错提示</p></li><li><p>对应的if条件成立的位置调用该函数</p></li></ol><ul><li>代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查询学员</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search_info</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;查询学员&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 1. 输入要查找的学员姓名：</span><br>    search_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要查找的学员姓名：&#x27;</span>)<br><br>    <span class="hljs-keyword">global</span> info<br>    <span class="hljs-comment"># 2. 判断学员是否存在：如果输入的姓名存在则显示这位学员信息，否则报错提示</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> info:<br>        <span class="hljs-keyword">if</span> search_name == i[<span class="hljs-string">&#x27;name&#x27;</span>]:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查找到的学员信息如下：----------&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;该学员的学号是<span class="hljs-subst">&#123;i[<span class="hljs-string">&#x27;id&#x27;</span>]&#125;</span>, 姓名是<span class="hljs-subst">&#123;i[<span class="hljs-string">&#x27;name&#x27;</span>]&#125;</span>, 手机号是<span class="hljs-subst">&#123;i[<span class="hljs-string">&#x27;tel&#x27;</span>]&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;该学员不存在&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-3-4-5-显示所有学员信息"><a href="#1-3-4-5-显示所有学员信息" class="headerlink" title="1.3.4.5 显示所有学员信息"></a>1.3.4.5 显示所有学员信息</h4><ul><li>需求分析</li></ul><p>打印所有学员信息</p><ul><li>代码实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 显示所有学员信息</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_all</span>():<br>    <span class="hljs-string">&quot;&quot;&quot; 显示所有学员信息 &quot;&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;学号\t姓名\t手机号&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> info:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i[<span class="hljs-string">&quot;id&quot;</span>]&#125;</span>\t<span class="hljs-subst">&#123;i[<span class="hljs-string">&quot;name&quot;</span>]&#125;</span>\t<span class="hljs-subst">&#123;i[<span class="hljs-string">&quot;tel&quot;</span>]&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-3-4-6-退出系统"><a href="#1-3-4-6-退出系统" class="headerlink" title="1.3.4.6 退出系统"></a>1.3.4.6 退出系统</h4><p>在用户输入功能序号<code>6</code>的时候要退出系统，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">......<br><span class="hljs-keyword">elif</span> user_num == <span class="hljs-string">&#x27;6&#x27;</span>:<br>    exit_flag = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;确定要退出吗？yes or no&#x27;</span>)<br>    <span class="hljs-keyword">if</span> exit_flag == <span class="hljs-string">&#x27;yes&#x27;</span>:<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h1 id="二-递归"><a href="#二-递归" class="headerlink" title="二. 递归"></a>二. 递归</h1><h2 id="2-1-递归的应用场景"><a href="#2-1-递归的应用场景" class="headerlink" title="2.1 递归的应用场景"></a>2.1 递归的应用场景</h2><p>递归是一种编程思想，应用场景：</p><ol><li>在我们日常开发中，如果要遍历一个文件夹下面所有的文件，通常会使用递归来实现；</li><li>在后续的算法课程中，很多算法都离不开递归，例如：快速排序。</li></ol><h3 id="2-1-1-递归的特点"><a href="#2-1-1-递归的特点" class="headerlink" title="2.1.1 递归的特点"></a>2.1.1 递归的特点</h3><ul><li>函数内部自己调用自己</li><li>必须有出口</li></ul><h2 id="2-2-应用：3以内数字累加和"><a href="#2-2-应用：3以内数字累加和" class="headerlink" title="2.2 应用：3以内数字累加和"></a>2.2 应用：3以内数字累加和</h2><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 3 + 2 + 1</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_numbers</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-comment"># 1.如果是1，直接返回1 -- 出口</span><br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 2.如果不是1，重复执行累加并返回结果</span><br>    <span class="hljs-keyword">return</span> num + sum_numbers(num-<span class="hljs-number">1</span>)<br><br><br>sum_result = sum_numbers(<span class="hljs-number">3</span>)<br><span class="hljs-comment"># 输出结果为6</span><br><span class="hljs-built_in">print</span>(sum_result)<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/2023/01/20/%E5%87%BD%E6%95%B0%E5%8A%A0%E5%BC%BA/1.png"></p><h1 id="三-lambda-表达式"><a href="#三-lambda-表达式" class="headerlink" title="三. lambda 表达式"></a>三. lambda 表达式</h1><h2 id="3-1-lambda的应用场景"><a href="#3-1-lambda的应用场景" class="headerlink" title="3.1 lambda的应用场景"></a>3.1 lambda的应用场景</h2><p>如果一个函数有一个返回值，并且只有一句代码，可以使用 lambda简化。</p><h2 id="3-2-lambda语法"><a href="#3-2-lambda语法" class="headerlink" title="3.2 lambda语法"></a>3.2 lambda语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> 参数列表 ： 表达式<br></code></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><ul><li>lambda表达式的参数可有可无，函数的参数在lambda表达式中完全适用。</li><li>lambda表达式能接收任何数量的参数但只能返回一个表达式的值。</li></ul><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn1</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">200</span><br><br><br><span class="hljs-built_in">print</span>(fn1)<br><span class="hljs-built_in">print</span>(fn1())<br><br><br><span class="hljs-comment"># lambda表达式</span><br>fn2 = <span class="hljs-keyword">lambda</span>: <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(fn2)<br><span class="hljs-built_in">print</span>(fn2())<br></code></pre></td></tr></table></figure><blockquote><p>注意：直接打印lambda表达式，输出的是此lambda的内存地址</p></blockquote><h2 id="3-3-示例：计算a-b"><a href="#3-3-示例：计算a-b" class="headerlink" title="3.3 示例：计算a + b"></a>3.3 示例：计算a + b</h2><h3 id="3-3-1-函数实现"><a href="#3-3-1-函数实现" class="headerlink" title="3.3.1 函数实现"></a>3.3.1 函数实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><br><br>result = add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><blockquote><p>思考：需求简单，是否代码多？</p></blockquote><h3 id="3-3-2-lambda实现"><a href="#3-3-2-lambda实现" class="headerlink" title="3.3.2 lambda实现"></a>3.3.2 lambda实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fn1 = <span class="hljs-keyword">lambda</span> a, b: a + b<br><span class="hljs-built_in">print</span>(fn1(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><h2 id="3-4-lambda的参数形式"><a href="#3-4-lambda的参数形式" class="headerlink" title="3.4 lambda的参数形式"></a>3.4 lambda的参数形式</h2><h3 id="3-4-1-无参数"><a href="#3-4-1-无参数" class="headerlink" title="3.4.1.无参数"></a>3.4.1.无参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fn1 = <span class="hljs-keyword">lambda</span>: <span class="hljs-number">100</span><br><span class="hljs-built_in">print</span>(fn1())<br></code></pre></td></tr></table></figure><h3 id="3-4-2-一个参数"><a href="#3-4-2-一个参数" class="headerlink" title="3.4.2.一个参数"></a>3.4.2.一个参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fn1 = <span class="hljs-keyword">lambda</span> a: a<br><span class="hljs-built_in">print</span>(fn1(<span class="hljs-string">&#x27;hello world&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="3-4-3-默认参数"><a href="#3-4-3-默认参数" class="headerlink" title="3.4.3.默认参数"></a>3.4.3.默认参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fn1 = <span class="hljs-keyword">lambda</span> a, b, c=<span class="hljs-number">100</span>: a + b + c<br><span class="hljs-built_in">print</span>(fn1(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><h3 id="3-4-4-可变参数：-args"><a href="#3-4-4-可变参数：-args" class="headerlink" title="3.4.4.可变参数：*args"></a>3.4.4.可变参数：*args</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fn1 = <span class="hljs-keyword">lambda</span> *args: args<br><span class="hljs-built_in">print</span>(fn1(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>))<br></code></pre></td></tr></table></figure><blockquote><p>注意：这里的可变参数传入到lambda之后，返回值为元组。</p></blockquote><h3 id="3-4-5-可变参数：-kwargs"><a href="#3-4-5-可变参数：-kwargs" class="headerlink" title="3.4.5.可变参数：**kwargs"></a>3.4.5.可变参数：**kwargs</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fn1 = <span class="hljs-keyword">lambda</span> **kwargs: kwargs<br><span class="hljs-built_in">print</span>(fn1(name=<span class="hljs-string">&#x27;python&#x27;</span>, age=<span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><h2 id="3-5-lambda的应用"><a href="#3-5-lambda的应用" class="headerlink" title="3.5 lambda的应用"></a>3.5 lambda的应用</h2><h3 id="3-5-1-带判断的lambda"><a href="#3-5-1-带判断的lambda" class="headerlink" title="3.5.1. 带判断的lambda"></a>3.5.1. 带判断的lambda</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">fn1 = <span class="hljs-keyword">lambda</span> a, b: a <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> b<br><span class="hljs-built_in">print</span>(fn1(<span class="hljs-number">1000</span>, <span class="hljs-number">500</span>))<br></code></pre></td></tr></table></figure><h3 id="3-5-2-列表数据按字典key的值排序"><a href="#3-5-2-列表数据按字典key的值排序" class="headerlink" title="3.5.2. 列表数据按字典key的值排序"></a>3.5.2. 列表数据按字典key的值排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">students = [<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;TOM&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;ROSE&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">19</span>&#125;,<br>    &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Jack&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">22</span>&#125;<br>]<br><br><span class="hljs-comment"># 按name值升序排列</span><br>students.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&#x27;name&#x27;</span>])<br><span class="hljs-built_in">print</span>(students)<br><br><span class="hljs-comment"># 按name值降序排列</span><br>students.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&#x27;name&#x27;</span>], reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(students)<br><br><span class="hljs-comment"># 按age值升序排列</span><br>students.sort(key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&#x27;age&#x27;</span>])<br><span class="hljs-built_in">print</span>(students)<br></code></pre></td></tr></table></figure><h1 id="四-高阶函数"><a href="#四-高阶函数" class="headerlink" title="四. 高阶函数"></a>四. 高阶函数</h1><p>&#x3D;&#x3D;把函数作为参数传入&#x3D;&#x3D;，这样的函数称为高阶函数，高阶函数是函数式编程的体现。函数式编程就是指这种高度抽象的编程范式。</p><h2 id="4-1-体验高阶函数"><a href="#4-1-体验高阶函数" class="headerlink" title="4.1 体验高阶函数"></a>4.1 体验高阶函数</h2><p>在Python中，<code>abs()</code>函数可以完成对数字求绝对值计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">abs</span>(-<span class="hljs-number">10</span>)  <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><p><code>round()</code>函数可以完成对数字的四舍五入计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">round</span>(<span class="hljs-number">1.2</span>)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">round</span>(<span class="hljs-number">1.9</span>)  <span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><p>需求：任意两个数字，按照指定要求整理数字后再进行求和计算。</p><ul><li>方法1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_num</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(a) + <span class="hljs-built_in">abs</span>(b)<br><br><br>result = add_num(-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 3</span><br></code></pre></td></tr></table></figure><ul><li>方法2</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_num</span>(<span class="hljs-params">a, b, f</span>):<br>    <span class="hljs-keyword">return</span> f(a) + f(b)<br><br><br>result = sum_num(-<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-built_in">abs</span>)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 3</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：两种方法对比之后，发现，方法2的代码会更加简洁，函数灵活性更高。</p></blockquote><p>函数式编程大量使用函数，减少了代码的重复，因此程序比较短，开发速度较快。</p><h2 id="4-2-内置高阶函数"><a href="#4-2-内置高阶函数" class="headerlink" title="4.2 内置高阶函数"></a>4.2 内置高阶函数</h2><h3 id="4-2-1-map"><a href="#4-2-1-map" class="headerlink" title="4.2.1 map()"></a>4.2.1 map()</h3><p>map(func, lst)，将传入的函数变量func作用到lst变量的每个元素中，并将结果组成新的列表(Python2)&#x2F;迭代器(Python3)返回。</p><p>需求：计算<code>list1</code>序列中各个数字的2次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x ** <span class="hljs-number">2</span><br><br><br>result = <span class="hljs-built_in">map</span>(func, list1)<br><br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># &lt;map object at 0x0000013769653198&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result))  <span class="hljs-comment"># [1, 4, 9, 16, 25]</span><br></code></pre></td></tr></table></figure><h3 id="4-2-2-reduce"><a href="#4-2-2-reduce" class="headerlink" title="4.2.2 reduce()"></a>4.2.2 reduce()</h3><p>reduce(func，lst)，其中func必须有两个参数。每次func计算的结果继续和序列的下一个元素做累积计算。</p><blockquote><p>注意：reduce()传入的参数func必须接收2个参数。</p></blockquote><p>需求：计算<code>list1</code>序列中各个数字的累加和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> functools<br><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><br><br>result = functools.reduce(func, list1)<br><br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 15</span><br></code></pre></td></tr></table></figure><h3 id="4-2-3-filter"><a href="#4-2-3-filter" class="headerlink" title="4.2.3 filter()"></a>4.2.3 filter()</h3><p>filter(func, lst)函数用于过滤序列, 过滤掉不符合条件的元素, 返回一个 filter 对象。如果要转换为列表, 可以使用 list() 来转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br><br><br>result = <span class="hljs-built_in">filter</span>(func, list1)<br><br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># &lt;filter object at 0x0000017AF9DC3198&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(result))  <span class="hljs-comment"># [2, 4, 6, 8, 10]</span><br></code></pre></td></tr></table></figure><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul><li><p>递归</p><ul><li>函数内部自己调用自己</li><li>必须有出口</li></ul></li><li><p>lambda</p><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> 参数列表: 表达式<br></code></pre></td></tr></table></figure><ul><li><p>lambda的参数形式</p><ul><li>无参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span>: 表达式<br></code></pre></td></tr></table></figure><ul><li>一个参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> 参数: 表达式<br></code></pre></td></tr></table></figure><ul><li>默认参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> key=value: 表达式<br></code></pre></td></tr></table></figure><ul><li>不定长位置参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> *args: 表达式<br></code></pre></td></tr></table></figure><ul><li>不定长关键字参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">lambda</span> **kwargs: 表达式<br></code></pre></td></tr></table></figure></li></ul></li><li><p>高阶函数</p><ul><li>作用：把函数作为参数传入，化简代码</li><li>内置高阶函数<ul><li>map()</li><li>reduce()</li><li>filter()</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>函数</tag>
      
      <tag>函数加强</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数二</title>
    <link href="/2023/01/20/%E5%87%BD%E6%95%B0%E4%BA%8C/"/>
    <url>/2023/01/20/%E5%87%BD%E6%95%B0%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>变量作用域</li><li>多函数程序执行流程</li><li>函数的返回值</li><li>函数的参数</li><li>拆包和交换两个变量的值</li><li>引用</li><li>可变和不可变类型</li></ul><h1 id="一-变量作用域"><a href="#一-变量作用域" class="headerlink" title="一. 变量作用域"></a>一. 变量作用域</h1><p>变量作用域指的是变量生效的范围，主要分为两类：&#x3D;&#x3D;局部变量&#x3D;&#x3D;和&#x3D;&#x3D;全局变量&#x3D;&#x3D;。</p><ul><li>局部变量</li></ul><p>所谓局部变量是定义在函数体内部的变量，即只在函数体内部生效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>():<br>    a = <span class="hljs-number">100</span><br><br>    <span class="hljs-built_in">print</span>(a)<br><br><br>testA()  <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 报错：name &#x27;a&#x27; is not defined</span><br></code></pre></td></tr></table></figure><blockquote><p>变量a是定义在<code>testA</code>函数内部的变量，在函数外部访问则立即报错。</p></blockquote><p>局部变量的作用：在函数体内部，临时保存数据，即当函数调用完成后，则销毁局部变量。</p><ul><li>全局变量</li></ul><p>所谓全局变量，指的是在函数体内、外都能生效的变量。</p><p>思考：如果有一个数据，在函数A和函数B中都要使用，该怎么办？</p><p>答：将这个数据存储在一个全局变量里面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义全局变量a</span><br>a = <span class="hljs-number">100</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>():<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 访问全局变量a，并打印变量a存储的数据</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testB</span>():<br>    <span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 访问全局变量a，并打印变量a存储的数据</span><br><br><br>testA()  <span class="hljs-comment"># 100</span><br>testB()  <span class="hljs-comment"># 100</span><br></code></pre></td></tr></table></figure><p>思考：<code>testB</code>函数需求修改变量a的值为200，如何修改程序？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>():<br>    <span class="hljs-built_in">print</span>(a)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testB</span>():<br>    a = <span class="hljs-number">200</span><br>    <span class="hljs-built_in">print</span>(a)<br><br><br>testA()  <span class="hljs-comment"># 100</span><br>testB()  <span class="hljs-comment"># 200</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;全局变量a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 全局变量a = 100</span><br></code></pre></td></tr></table></figure><p>思考：在<code>testB</code>函数内部的<code>a = 200</code>中的变量a是在修改全局变量<code>a</code>吗？</p><p>答：不是。观察上述代码发现，15行得到a的数据是100，仍然是定义全局变量a时候的值，而没有返回</p><p><code>testB</code>函数内部的200。综上：<code>testB</code>函数内部的<code>a = 200</code>是定义了一个局部变量。</p><p>思考：如何在函数体内部修改全局变量？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>():<br>    <span class="hljs-built_in">print</span>(a)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testB</span>():<br>    <span class="hljs-comment"># global 关键字声明a是全局变量</span><br>    <span class="hljs-keyword">global</span> a<br>    a = <span class="hljs-number">200</span><br>    <span class="hljs-built_in">print</span>(a)<br><br><br>testA()  <span class="hljs-comment"># 100</span><br>testB()  <span class="hljs-comment"># 200</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;全局变量a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 全局变量a = 200</span><br></code></pre></td></tr></table></figure><h1 id="二-多函数程序执行流程"><a href="#二-多函数程序执行流程" class="headerlink" title="二. 多函数程序执行流程"></a>二. 多函数程序执行流程</h1><p>一般在实际开发过程中，一个程序往往由多个函数（后面知识中会讲解类）组成，并且多个函数共享某些数据，如下所示：</p><ul><li>共用全局变量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 定义全局变量</span><br>glo_num = <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>():<br>    <span class="hljs-keyword">global</span> glo_num<br>    <span class="hljs-comment"># 修改全局变量</span><br>    glo_num = <span class="hljs-number">100</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>():<br>    <span class="hljs-comment"># 调用test1函数中修改后的全局变量</span><br>    <span class="hljs-built_in">print</span>(glo_num)<br>    <br><br><span class="hljs-comment"># 2. 调用test1函数，执行函数内部代码：声明和修改全局变量</span><br>test1()<br><span class="hljs-comment"># 3. 调用test2函数，执行函数内部代码：打印</span><br>test2()  <span class="hljs-comment"># 100</span><br></code></pre></td></tr></table></figure><ul><li>返回值作为参数传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">50</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-built_in">print</span>(num)<br><br><br><span class="hljs-comment"># 1. 保存函数test1的返回值</span><br>result = test1()<br><br><br><span class="hljs-comment"># 2.将函数返回值所在变量作为参数传递到test2函数</span><br>test2(result)  <span class="hljs-comment"># 50</span><br></code></pre></td></tr></table></figure><h1 id="三-函数的返回值"><a href="#三-函数的返回值" class="headerlink" title="三. 函数的返回值"></a>三. 函数的返回值</h1><p>思考：如果一个函数如些两个return (如下所示)，程序如何执行？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_num</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><br><br>result = return_num()<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><p>答：只执行了第一个return，原因是因为return可以退出当前函数，导致return下方的代码不执行。</p><p>思考：如果一个函数要有多个返回值，该如何书写代码？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_num</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br><br><br>result = return_num()<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># (1, 2)</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li><code>return a, b</code>写法，返回多个数据的时候，默认是元组类型。</li><li>return后面可以连接列表、元组或字典，以返回多个值。</li></ol></blockquote><h1 id="四-函数的参数"><a href="#四-函数的参数" class="headerlink" title="四. 函数的参数"></a>四. 函数的参数</h1><h2 id="4-1-位置参数"><a href="#4-1-位置参数" class="headerlink" title="4.1 位置参数"></a>4.1 位置参数</h2><p>位置参数：调用函数时根据函数定义的参数位置来传递参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">name, age, gender</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的名字是<span class="hljs-subst">&#123;name&#125;</span>, 年龄是<span class="hljs-subst">&#123;age&#125;</span>, 性别是<span class="hljs-subst">&#123;gender&#125;</span>&#x27;</span>)<br><br><br>user_info(<span class="hljs-string">&#x27;TOM&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;男&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：传递和定义参数的顺序及个数必须一致。</p></blockquote><h2 id="4-2-关键字参数"><a href="#4-2-关键字参数" class="headerlink" title="4.2 关键字参数"></a>4.2 关键字参数</h2><p>函数调用，通过“键&#x3D;值”形式加以指定。可以让函数更加清晰、容易使用，同时也清除了参数的顺序需求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">name, age, gender</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的名字是<span class="hljs-subst">&#123;name&#125;</span>, 年龄是<span class="hljs-subst">&#123;age&#125;</span>, 性别是<span class="hljs-subst">&#123;gender&#125;</span>&#x27;</span>)<br><br><br>user_info(<span class="hljs-string">&#x27;Rose&#x27;</span>, age=<span class="hljs-number">20</span>, gender=<span class="hljs-string">&#x27;女&#x27;</span>)<br>user_info(<span class="hljs-string">&#x27;小明&#x27;</span>, gender=<span class="hljs-string">&#x27;男&#x27;</span>, age=<span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>注意：<strong>函数调用时，如果有位置参数时，位置参数必须在关键字参数的前面，但关键字参数之间不存在先后顺序。</strong></p><h2 id="4-3-缺省参数"><a href="#4-3-缺省参数" class="headerlink" title="4.3 缺省参数"></a>4.3 缺省参数</h2><p>缺省参数也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值（注意：所有位置参数必须出现在默认参数前，包括函数定义和调用）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">name, age, gender=<span class="hljs-string">&#x27;男&#x27;</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的名字是<span class="hljs-subst">&#123;name&#125;</span>, 年龄是<span class="hljs-subst">&#123;age&#125;</span>, 性别是<span class="hljs-subst">&#123;gender&#125;</span>&#x27;</span>)<br><br><br>user_info(<span class="hljs-string">&#x27;TOM&#x27;</span>, <span class="hljs-number">20</span>)<br>user_info(<span class="hljs-string">&#x27;Rose&#x27;</span>, <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;女&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：函数调用时，如果为缺省参数传值则修改默认参数值；否则使用这个默认值。</p></blockquote><h2 id="4-4-不定长参数"><a href="#4-4-不定长参数" class="headerlink" title="4.4 不定长参数"></a>4.4 不定长参数</h2><p>不定长参数也叫可变参数。用于不确定调用的时候会传递多少个参数(不传参也可以)的场景。此时，可用包裹(packing)位置参数，或者包裹关键字参数，来进行参数传递，会显得非常方便。</p><ul><li>包裹位置传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">*args</span>):<br>    <span class="hljs-built_in">print</span>(args)<br><br><br><span class="hljs-comment"># (&#x27;TOM&#x27;,)</span><br>user_info(<span class="hljs-string">&#x27;TOM&#x27;</span>)<br><span class="hljs-comment"># (&#x27;TOM&#x27;, 18)</span><br>user_info(<span class="hljs-string">&#x27;TOM&#x27;</span>, <span class="hljs-number">18</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：传进的所有参数都会被args变量收集，它会根据传进参数的位置合并为一个元组(tuple)，args是元组类型，这就是包裹位置传递。</p></blockquote><ul><li>包裹关键字传递</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user_info</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-built_in">print</span>(kwargs)<br><br><br><span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;TOM&#x27;, &#x27;age&#x27;: 18, &#x27;id&#x27;: 110&#125;</span><br>user_info(name=<span class="hljs-string">&#x27;TOM&#x27;</span>, age=<span class="hljs-number">18</span>, <span class="hljs-built_in">id</span>=<span class="hljs-number">110</span>)<br></code></pre></td></tr></table></figure><blockquote><p>综上：无论是包裹位置传递还是包裹关键字传递，都是一个组包的过程。</p></blockquote><h1 id="五-拆包和交换变量值"><a href="#五-拆包和交换变量值" class="headerlink" title="五. 拆包和交换变量值"></a>五. 拆包和交换变量值</h1><h2 id="5-1-拆包"><a href="#5-1-拆包" class="headerlink" title="5.1 拆包"></a>5.1 拆包</h2><ul><li>拆包：元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_num</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>, <span class="hljs-number">200</span><br><br><br>num1, num2 = return_num()<br><span class="hljs-built_in">print</span>(num1)  <span class="hljs-comment"># 100</span><br><span class="hljs-built_in">print</span>(num2)  <span class="hljs-comment"># 200</span><br></code></pre></td></tr></table></figure><ul><li>拆包：字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;TOM&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;<br>a, b = dict1<br><br><span class="hljs-comment"># 对字典进行拆包，取出来的是字典的key</span><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># name</span><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># age</span><br><br><span class="hljs-built_in">print</span>(dict1[a])  <span class="hljs-comment"># TOM</span><br><span class="hljs-built_in">print</span>(dict1[b])  <span class="hljs-comment"># 18</span><br></code></pre></td></tr></table></figure><h2 id="5-2-交换变量值"><a href="#5-2-交换变量值" class="headerlink" title="5.2 交换变量值"></a>5.2 交换变量值</h2><p>需求：有变量<code>a = 10</code>和<code>b = 20</code>，交换两个变量的值。</p><ul><li>方法一</li></ul><p>借助第三变量存储数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 定义中间变量</span><br>c = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 2. 将a的数据存储到c</span><br>c = a<br><br><span class="hljs-comment"># 3. 将b的数据20赋值到a，此时a = 20</span><br>a = b<br><br><span class="hljs-comment"># 4. 将之前c的数据10赋值到b，此时b = 10</span><br>b = c<br><br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 20</span><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a, b = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>a, b = b, a<br><span class="hljs-built_in">print</span>(a)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h1 id="六-引用"><a href="#六-引用" class="headerlink" title="六. 引用"></a>六. 引用</h1><h2 id="6-1-了解引用"><a href="#6-1-了解引用" class="headerlink" title="6.1 了解引用"></a>6.1 了解引用</h2><p>在python中，值是靠引用来传递来的。</p><p><strong>我们可以用<code>id()</code>来判断两个变量是否为同一个值的引用。</strong> 我们可以将id值理解为那块内存的地址标识。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. int类型</span><br>a = <span class="hljs-number">1</span><br>b = a<br><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))  <span class="hljs-comment"># 140708464157520</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b))  <span class="hljs-comment"># 140708464157520</span><br><br>a = <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment"># 1,说明int类型为不可变类型 </span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))  <span class="hljs-comment"># 140708464157552，此时得到是的数据2的内存地址</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(b))  <span class="hljs-comment"># 140708464157520</span><br><br><br><span class="hljs-comment"># 2. 列表</span><br>aa = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>]<br>bb = aa<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(aa))  <span class="hljs-comment"># 2325297783432</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(bb))  <span class="hljs-comment"># 2325297783432</span><br><br><br>aa.append(<span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(bb)  <span class="hljs-comment"># [10, 20, 30], 列表为可变类型</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(aa))  <span class="hljs-comment"># 2325297783432</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(bb))  <span class="hljs-comment"># 2325297783432</span><br></code></pre></td></tr></table></figure><h2 id="6-2-引用当做实参"><a href="#6-2-引用当做实参" class="headerlink" title="6.2 引用当做实参"></a>6.2 引用当做实参</h2><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))<br><br>    a += a<br><br>    <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a))<br><br><br><span class="hljs-comment"># int：计算前后id值不同</span><br>b = <span class="hljs-number">100</span><br>test1(b)<br><br><span class="hljs-comment"># 列表：计算前后id值相同</span><br>c = [<span class="hljs-number">11</span>, <span class="hljs-number">22</span>]<br>test1(c)<br></code></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="/2023/01/20/%E5%87%BD%E6%95%B0%E4%BA%8C/image-20190220111744493.png"></p><h1 id="七-可变和不可变类型"><a href="#七-可变和不可变类型" class="headerlink" title="七. 可变和不可变类型"></a>七. 可变和不可变类型</h1><p>所谓可变类型与不可变类型是指：数据能够直接进行修改，如果能直接修改那么就是可变，否则是不可变.</p><ul><li>可变类型<ul><li>列表</li><li>字典</li><li>集合</li></ul></li><li>不可变类型<ul><li>整型</li><li>浮点型</li><li>字符串</li><li>元组</li></ul></li></ul><h1 id="八-总结"><a href="#八-总结" class="headerlink" title="八. 总结"></a>八. 总结</h1><ul><li>变量作用域<ul><li>全局：函数体内外都能生效</li><li>局部：当前函数体内部生效</li></ul></li><li>函数多返回值写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> 表达式<span class="hljs-number">1</span>, 表达式<span class="hljs-number">2.</span>..<br></code></pre></td></tr></table></figure><ul><li>函数的参数<ul><li>位置参数<ul><li>形参和实参的个数和书写顺序必须一致</li></ul></li><li>关键字参数<ul><li>写法： <code>key=value</code></li><li>特点：形参和实参的书写顺序可以不一致；关键字参数必须书写在位置参数的后面</li></ul></li><li>缺省参数<ul><li>缺省参数就是默认参数</li><li>写法：<code>key=vlaue</code></li></ul></li><li>不定长位置参数<ul><li>收集所有位置参数，返回一个元组</li></ul></li><li>不定长关键字参数<ul><li>收集所有关键字参数，返回一个字典</li></ul></li></ul></li><li>引用：Python中，数据的传递都是通过引用</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数一</title>
    <link href="/2023/01/20/%E5%87%BD%E6%95%B0%E4%B8%80/"/>
    <url>/2023/01/20/%E5%87%BD%E6%95%B0%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>函数的作用</li><li>函数的使用步骤</li><li>函数的参数作用</li><li>函数的返回值作用</li><li>函数的说明文档</li><li>函数嵌套</li></ul><h1 id="一-函数的作用"><a href="#一-函数的作用" class="headerlink" title="一. 函数的作用"></a>一. 函数的作用</h1><p>需求：用户到ATM机取钱：</p><ol><li>输入密码后显示”选择功能”界面</li><li>查询余额后显示”选择功能”界面</li><li>取2000钱后显示”选择功能”界面</li></ol><blockquote><p>特点：显示“选择功能”界面需要重复输出给用户，怎么实现？</p></blockquote><p><img src="/2023/01/20/%E5%87%BD%E6%95%B0%E4%B8%80/image-20181231211912413-6262352.png"></p><p>函数就是将&#x3D;&#x3D;一段具有独立功能的代码块&#x3D;&#x3D; 整合到一个整体并命名，在需要的位置&#x3D;&#x3D;调用这个名称&#x3D;&#x3D;即可完成对应的需求。</p><blockquote><p>函数在开发过程中，可以更高效的实现&#x3D;&#x3D;代码重用&#x3D;&#x3D;。</p></blockquote><h1 id="二-函数的使用步骤"><a href="#二-函数的使用步骤" class="headerlink" title="二. 函数的使用步骤"></a>二. 函数的使用步骤</h1><h2 id="2-1-定义函数"><a href="#2-1-定义函数" class="headerlink" title="2.1 定义函数"></a>2.1 定义函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">参数</span>):<br>    代码<span class="hljs-number">1</span><br>    代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><h2 id="2-2-调用函数"><a href="#2-2-调用函数" class="headerlink" title="2.2 调用函数"></a>2.2 调用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">函数名(参数)<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><pre><code class="hljs"> 1. 不同的需求，参数可有可无。 2. 在Python中，函数必须==先定义后使用==。</code></pre><h2 id="2-3-快速体验"><a href="#2-3-快速体验" class="headerlink" title="2.3 快速体验"></a>2.3 快速体验</h2><p>需求：复现ATM取钱功能。</p><ol><li>搭建整体框架(复现需求)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确登录成功&#x27;</span>)<br><br><span class="hljs-comment"># 显示&quot;选择功能&quot;界面</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询余额完毕&#x27;</span>)<br><br><span class="hljs-comment"># 显示&quot;选择功能&quot;界面</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;取了2000元钱&#x27;</span>)<br><br><span class="hljs-comment"># 显示&quot;选择功能&quot;界面</span><br></code></pre></td></tr></table></figure><ol start="2"><li>确定“选择功能”界面内容</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询余额&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;存款&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;取款&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="3"><li>封装”选择功能”</li></ol><blockquote><p>注意：一定是先定义函数，后调用函数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 封装ATM机功能选项 -- 定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">select_func</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----请选择功能-----&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询余额&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;存款&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;取款&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----请选择功能-----&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="4"><li>调用函数</li></ol><p>在需要显示“选择功能”函数的位置调用函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;密码正确登录成功&#x27;</span>)<br><span class="hljs-comment"># 显示&quot;选择功能&quot;界面 -- 调用函数</span><br>select_func()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;查询余额完毕&#x27;</span>)<br><span class="hljs-comment"># 显示&quot;选择功能&quot;界面 -- 调用函数</span><br>select_func()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;取了2000元钱&#x27;</span>)<br><span class="hljs-comment"># 显示&quot;选择功能&quot;界面 -- 调用函数</span><br>select_func()<br></code></pre></td></tr></table></figure><h1 id="三-函数的参数作用"><a href="#三-函数的参数作用" class="headerlink" title="三.函数的参数作用"></a>三.函数的参数作用</h1><p>思考：完成需求如下：一个函数完成两个数1和2的加法运算，如何书写程序？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_num1</span>():<br>    result = <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(result)<br><br><br><span class="hljs-comment"># 调用函数</span><br>add_num1()<br></code></pre></td></tr></table></figure><p>思考：上述add_num1函数只能完成数字1和2的加法运算，如果想要这个函数变得更灵活，可以计算任何用户指定的两个数字的和，如何书写程序？</p><p>分析：用户要在调用函数的时候指定具体数字，那么在定义函数的时候就需要接收用户指定的数字。函数调用时候指定的数字和定义函数时候接收的数字即是函数的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义函数时同时定义了接收用户数据的参数a和b，a和b是形参</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_num2</span>(<span class="hljs-params">a, b</span>):<br>    result = a + b<br>    <span class="hljs-built_in">print</span>(result)<br><br><br><span class="hljs-comment"># 调用函数时传入了真实的数据10 和 20，真实数据为实参</span><br>add_num2(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br></code></pre></td></tr></table></figure><h1 id="四-函数的返回值作用"><a href="#四-函数的返回值作用" class="headerlink" title="四.函数的返回值作用"></a>四.函数的返回值作用</h1><p>例如：我们去超市购物，比如买烟，给钱之后，是不是售货员会返回给我们烟这个商品，在函数中，如果需要返回结果给用户需要使用函数返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;烟&#x27;</span><br><br><span class="hljs-comment"># 使用变量保存函数返回值</span><br>goods = buy()<br><span class="hljs-built_in">print</span>(goods)<br></code></pre></td></tr></table></figure><h2 id="4-1-应用"><a href="#4-1-应用" class="headerlink" title="4.1 应用"></a>4.1 应用</h2><p>需求：制作一个计算器，计算任意两数字之和，并保存结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_num</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><br><br><span class="hljs-comment"># 用result变量保存函数返回值</span><br>result = sum_num(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h1 id="五-函数的说明文档"><a href="#五-函数的说明文档" class="headerlink" title="五.函数的说明文档"></a>五.函数的说明文档</h1><p>思考：定义一个函数后，程序员如何书写程序能够快速提示这个函数的作用？</p><p>答：注释</p><p>思考：如果代码多，我们是不是需要在很多代码中找到这个函数定义的位置才能看到注释？如果想更方便的查看函数的作用怎么办？</p><p>答：函数的说明文档</p><blockquote><p>函数的说明文档也叫函数的文档说明。</p></blockquote><h2 id="5-1-语法"><a href="#5-1-语法" class="headerlink" title="5.1 语法"></a>5.1 语法</h2><ul><li>定义函数的说明文档</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>(<span class="hljs-params">参数</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 说明文档的位置 &quot;&quot;&quot;</span><br>    代码<br>    ......<br></code></pre></td></tr></table></figure><ul><li>查看函数的说明文档</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span>(函数名)<br></code></pre></td></tr></table></figure><h2 id="5-2-快速体验"><a href="#5-2-快速体验" class="headerlink" title="5.2 快速体验"></a>5.2 快速体验</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_num</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-string">&quot;&quot;&quot; 求和函数 &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> a + b<br><br><br><span class="hljs-built_in">help</span>(sum_num)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/20/%E5%87%BD%E6%95%B0%E4%B8%80/image-20190219112749727.png"></p><h1 id="六-函数嵌套调用"><a href="#六-函数嵌套调用" class="headerlink" title="六.函数嵌套调用"></a>六.函数嵌套调用</h1><p>所谓函数嵌套调用指的是&#x3D;&#x3D;一个函数里面又调用了另外一个函数&#x3D;&#x3D;。</p><ul><li>示例</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">testB</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---- testB start----&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这里是testB函数执行的代码...(省略)...&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---- testB end----&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">testA</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---- testA start----&#x27;</span>)<br>    testB()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---- testA end----&#x27;</span>)<br><br>testA()<br></code></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/2023/01/20/%E5%87%BD%E6%95%B0%E4%B8%80/image-20190219113648783.png"></p><ul><li>执行流程</li></ul><p><img src="/2023/01/20/%E5%87%BD%E6%95%B0%E4%B8%80/1.png"></p><blockquote><ul><li>如果函数A中，调用了另外一个函数B，那么先把函数B中的任务都执行完毕之后才会回到上次 函数A执行的位置。</li></ul></blockquote><h1 id="七-函数应用"><a href="#七-函数应用" class="headerlink" title="七. 函数应用"></a>七. 函数应用</h1><h2 id="7-1-打印图形"><a href="#7-1-打印图形" class="headerlink" title="7.1 打印图形"></a>7.1 打印图形</h2><ol><li>打印一条横线</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_line</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">20</span>)<br><br><br>print_line()<br></code></pre></td></tr></table></figure><p><img src="/2023/01/20/%E5%87%BD%E6%95%B0%E4%B8%80/image-20190219155107988.png"></p><ol start="2"><li>打印多条横线</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_line</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">20</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_lines</span>(<span class="hljs-params">num</span>):<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; num:<br>        print_line()<br>        i += <span class="hljs-number">1</span><br><br><br>print_lines(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/20/%E5%87%BD%E6%95%B0%E4%B8%80/image-20190219155040124.png"></p><h2 id="7-2-函数计算"><a href="#7-2-函数计算" class="headerlink" title="7.2 函数计算"></a>7.2 函数计算</h2><ol><li>求三个数之和</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum_num</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-keyword">return</span> a + b + c<br><br><br>result = sum_num(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 6</span><br></code></pre></td></tr></table></figure><ol start="2"><li>求三个数平均值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">average_num</span>(<span class="hljs-params">a, b, c</span>):<br>    sumResult = sum_num(a, b, c)<br>    <span class="hljs-keyword">return</span> sumResult / <span class="hljs-number">3</span><br><br>result = average_num(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(result)  <span class="hljs-comment"># 2.0</span><br></code></pre></td></tr></table></figure><h1 id="八-总结"><a href="#八-总结" class="headerlink" title="八. 总结"></a>八. 总结</h1><ul><li><p>函数的作用：封装代码，高效的代码重用</p></li><li><p>函数使用步骤</p><ul><li>定义函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>():<br>    代码<span class="hljs-number">1</span><br>    代码<span class="hljs-number">2</span><br>    ...<br></code></pre></td></tr></table></figure><ul><li>调用函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">函数名()<br></code></pre></td></tr></table></figure></li><li><p>函数的参数：函数调用的时候可以传入真实数据，增大函数的使用的灵活性</p><ul><li>形参：函数定义时书写的参数(非真实数据)</li><li>实参：函数调用时书写的参数(真实数据)</li></ul></li><li><p>函数的返回值</p><ul><li>作用：函数调用后，返回需要的计算结果</li><li>写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> 表达式<br></code></pre></td></tr></table></figure></li><li><p>函数的说明文档</p><ul><li>作用：保存函数解释说明的信息</li><li>写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>():<br>    <span class="hljs-string">&quot;&quot;&quot; 函数说明文档 &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>函数嵌套调用：一个函数内部嵌套调用另外一个函数</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件操作</title>
    <link href="/2023/01/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/01/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>文件操作的作用</li><li>文件的基本操作<ul><li>打开</li><li>读写</li><li>关闭</li></ul></li><li>文件备份</li><li>文件和文件夹的操作</li></ul><h1 id="一-文件操作的作用"><a href="#一-文件操作的作用" class="headerlink" title="一. 文件操作的作用"></a>一. 文件操作的作用</h1><p>思考：什么是文件？</p><p><img src="/2023/01/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/1.jpg"></p><p>思考：文件操作包含什么？</p><p>答：打开、关闭、读、写、复制….</p><p>思考：文件操作的的作用是什么？</p><p>答：读取内容、写入内容、备份内容……</p><blockquote><p>总结：文件操作的作用就是&#x3D;&#x3D;把一些内容(数据)存储存放起来，可以让程序下一次执行的时候直接使用，而不必重新制作一份，省时省力&#x3D;&#x3D;。</p></blockquote><h1 id="二-文件的基本操作"><a href="#二-文件的基本操作" class="headerlink" title="二. 文件的基本操作"></a>二. 文件的基本操作</h1><h2 id="2-1-文件操作步骤"><a href="#2-1-文件操作步骤" class="headerlink" title="2.1 文件操作步骤"></a>2.1 文件操作步骤</h2><ol><li>打开文件</li><li>读写等操作</li><li>关闭文件</li></ol><blockquote><p>注意：可以只打开和关闭文件，不进行任何读写操作。</p></blockquote><h3 id="2-1-1-打开"><a href="#2-1-1-打开" class="headerlink" title="2.1.1  打开"></a>2.1.1  打开</h3><p>在python，使用open函数，可以打开一个已经存在的文件，或者创建一个新文件，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">open</span>(name, mode)<br></code></pre></td></tr></table></figure><p>name：是要打开的目标文件名的字符串(可以包含文件所在的具体路径)。</p><p>mode：设置打开文件的模式(访问模式)：只读、写入、追加等。</p><h4 id="2-1-1-1-打开文件模式"><a href="#2-1-1-1-打开文件模式" class="headerlink" title="2.1.1.1 打开文件模式"></a>2.1.1.1 打开文件模式</h4><table><thead><tr><th align="center">模式</th><th>描述</th></tr></thead><tbody><tr><td align="center">r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td align="center">r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td align="center">w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td align="center">a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td align="center">a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td align="center">ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><h4 id="2-1-1-2-快速体验"><a href="#2-1-1-2-快速体验" class="headerlink" title="2.1.1.2 快速体验"></a>2.1.1.2 快速体验</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：此时的<code>f</code>是<code>open</code>函数的文件对象。</p></blockquote><h3 id="2-1-2-文件对象方法"><a href="#2-1-2-文件对象方法" class="headerlink" title="2.1.2 文件对象方法"></a>2.1.2 文件对象方法</h3><h5 id="2-1-2-1-写"><a href="#2-1-2-1-写" class="headerlink" title="2.1.2.1 写"></a>2.1.2.1 写</h5><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">对象对象.write(<span class="hljs-string">&#x27;内容&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 打开文件</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><br><span class="hljs-comment"># 2.文件写入</span><br>f.write(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br><br><span class="hljs-comment"># 3. 关闭文件</span><br>f.close()<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><ol><li><code>w</code>和<code>a</code>模式：如果文件不存在则创建该文件；如果文件存在，<code>w</code>模式先清空再写入，<code>a</code>模式直接末尾追加。</li><li><code>r</code>模式：如果文件不存在则报错。</li></ol></blockquote><h5 id="2-1-2-2-读"><a href="#2-1-2-2-读" class="headerlink" title="2.1.2.2 读"></a>2.1.2.2 读</h5><ul><li>read()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象.read(num)<br></code></pre></td></tr></table></figure><blockquote><p>num表示要从文件中读取的数据的长度（单位是字节），如果没有传入num，那么就表示读取文件中所有的数据。</p></blockquote><ul><li>readlines()</li></ul><p>readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个列表，其中每一行的数据为一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>)<br>content = f.readlines()<br><br><span class="hljs-comment"># [&#x27;hello world\n&#x27;, &#x27;abcdefg\n&#x27;, &#x27;aaa\n&#x27;, &#x27;bbb\n&#x27;, &#x27;ccc&#x27;]</span><br><span class="hljs-built_in">print</span>(content)<br><br><span class="hljs-comment"># 关闭文件</span><br>f.close()<br></code></pre></td></tr></table></figure><ul><li>readline()</li></ul><p>readline()一次读取一行内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>)<br><br>content = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第一行：<span class="hljs-subst">&#123;content&#125;</span>&#x27;</span>)<br><br>content = f.readline()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;第二行：<span class="hljs-subst">&#123;content&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># 关闭文件</span><br>f.close()<br></code></pre></td></tr></table></figure><p><img src="/2023/01/20/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/image-20190222105332438.png"></p><h5 id="2-1-2-3-seek"><a href="#2-1-2-3-seek" class="headerlink" title="2.1.2.3 seek()"></a>2.1.2.3 seek()</h5><p>作用：用来移动文件指针。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象.seek(偏移量, 起始位置)<br></code></pre></td></tr></table></figure><blockquote><p>起始位置：</p><ul><li>0：文件开头</li><li>1：当前位置</li><li>2：文件结尾</li></ul></blockquote><h3 id="2-1-3-关闭"><a href="#2-1-3-关闭" class="headerlink" title="2.1.3 关闭"></a>2.1.3 关闭</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs open">文件对象.close()<br></code></pre></td></tr></table></figure><h1 id="三-文件备份"><a href="#三-文件备份" class="headerlink" title="三. 文件备份"></a>三. 文件备份</h1><p>需求：用户输入当前目录下任意文件名，程序完成对该文件的备份功能(备份文件名为xx[备份]后缀，例如：test[备份].txt)。</p><h2 id="3-1-步骤"><a href="#3-1-步骤" class="headerlink" title="3.1 步骤"></a>3.1 步骤</h2><ol><li>接收用户输入的文件名</li><li>规划备份文件名</li><li>备份文件写入数据</li></ol><h2 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h2><ol><li>接收用户输入目标文件名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">old_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您要备份的文件名：&#x27;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li><p>规划备份文件名</p><p>2.1 提取目标文件后缀</p><p>2.2 组织备份的文件名，xx[备份]后缀</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 2.1 提取文件后缀点的下标</span><br>index = old_name.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)<br><br><span class="hljs-comment"># print(index)  # 后缀中.的下标</span><br><br><span class="hljs-comment"># print(old_name[:index])  # 源文件名（无后缀）</span><br><br><span class="hljs-comment"># 2.2 组织新文件名 旧文件名 + [备份] + 后缀</span><br>new_name = old_name[:index] + <span class="hljs-string">&#x27;[备份]&#x27;</span> + old_name[index:]<br><br><span class="hljs-comment"># 打印新文件名（带后缀）</span><br><span class="hljs-comment"># print(new_name)</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>备份文件写入数据</p><p>3.1 打开源文件 和 备份文件</p><p>3.2 将源文件数据写入备份文件</p><p>3.3 关闭文件</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 3.1 打开文件</span><br>old_f = <span class="hljs-built_in">open</span>(old_name, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>new_f = <span class="hljs-built_in">open</span>(new_name, <span class="hljs-string">&#x27;wb&#x27;</span>)<br><br><span class="hljs-comment"># 3.2 将源文件数据写入备份文件</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    con = old_f.read(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(con) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">break</span><br>    new_f.write(con)<br><br><span class="hljs-comment"># 3.3 关闭文件</span><br>old_f.close()<br>new_f.close()<br></code></pre></td></tr></table></figure><h2 id="3-3-思考"><a href="#3-3-思考" class="headerlink" title="3.3 思考"></a>3.3 思考</h2><p>如果用户输入<code>.txt</code>，这是一个无效文件，程序如何更改才能限制只有有效的文件名才能备份？</p><p>答：添加条件判断即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">old_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您要备份的文件名：&#x27;</span>)<br><br>index = old_name.rfind(<span class="hljs-string">&#x27;.&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> index &gt; <span class="hljs-number">0</span>:<br>    postfix = old_name[index:]<br><br>new_name = old_name[:index] + <span class="hljs-string">&#x27;[备份]&#x27;</span> + postfix<br><br>old_f = <span class="hljs-built_in">open</span>(old_name, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>new_f = <span class="hljs-built_in">open</span>(new_name, <span class="hljs-string">&#x27;wb&#x27;</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    con = old_f.read(<span class="hljs-number">1024</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(con) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">break</span><br>    new_f.write(con)<br><br>old_f.close()<br>new_f.close()<br></code></pre></td></tr></table></figure><h1 id="四-文件和文件夹的操作"><a href="#四-文件和文件夹的操作" class="headerlink" title="四. 文件和文件夹的操作"></a>四. 文件和文件夹的操作</h1><p>在Python中文件和文件夹的操作要借助os模块里面的相关功能，具体步骤如下：</p><ol><li>导入os模块</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br></code></pre></td></tr></table></figure><ol start="2"><li>使用<code>os</code>模块相关功能</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.函数名()<br></code></pre></td></tr></table></figure><h2 id="4-1-文件重命名"><a href="#4-1-文件重命名" class="headerlink" title="4.1 文件重命名"></a>4.1 文件重命名</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.rename(目标文件名, 新文件名)<br></code></pre></td></tr></table></figure><h2 id="4-2-删除文件"><a href="#4-2-删除文件" class="headerlink" title="4.2 删除文件"></a>4.2 删除文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.remove(目标文件名)<br></code></pre></td></tr></table></figure><h2 id="4-3-创建文件夹"><a href="#4-3-创建文件夹" class="headerlink" title="4.3 创建文件夹"></a>4.3 创建文件夹</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.mkdir(文件夹名字)<br></code></pre></td></tr></table></figure><h2 id="4-4-删除文件夹"><a href="#4-4-删除文件夹" class="headerlink" title="4.4 删除文件夹"></a>4.4 删除文件夹</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.rmdir(文件夹名字)<br></code></pre></td></tr></table></figure><h2 id="4-5-获取当前目录"><a href="#4-5-获取当前目录" class="headerlink" title="4.5 获取当前目录"></a>4.5 获取当前目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.getcwd()<br></code></pre></td></tr></table></figure><h2 id="4-6-改变默认目录"><a href="#4-6-改变默认目录" class="headerlink" title="4.6 改变默认目录"></a>4.6 改变默认目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.chdir(目录)<br></code></pre></td></tr></table></figure><h2 id="4-7-获取目录列表"><a href="#4-7-获取目录列表" class="headerlink" title="4.7 获取目录列表"></a>4.7 获取目录列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">os.listdir(目录)<br></code></pre></td></tr></table></figure><h1 id="五-应用案例"><a href="#五-应用案例" class="headerlink" title="五.应用案例"></a>五.应用案例</h1><p>需求：批量修改文件名，既可添加指定字符串，又能删除指定字符串。</p><ul><li>步骤</li></ul><ol><li>设置添加删除字符串的的标识</li><li>获取指定目录的所有文件</li><li>将原有文件名添加&#x2F;删除指定字符串，构造新名字</li><li>os.rename()重命名</li></ol><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 设置重命名标识：如果为1则添加指定字符，flag取值为2则删除指定字符</span><br>flag = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 获取指定目录</span><br>dir_name = <span class="hljs-string">&#x27;./&#x27;</span><br><br><span class="hljs-comment"># 获取指定目录的文件列表</span><br>file_list = os.listdir(dir_name)<br><span class="hljs-comment"># print(file_list)</span><br><br><br><span class="hljs-comment"># 遍历文件列表内的文件</span><br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> file_list:<br><br>    <span class="hljs-comment"># 添加指定字符</span><br>    <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:<br>        new_name = <span class="hljs-string">&#x27;Python-&#x27;</span> + name<br>    <span class="hljs-comment"># 删除指定字符</span><br>    <span class="hljs-keyword">elif</span> flag == <span class="hljs-number">2</span>:<br>        num = <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;Python-&#x27;</span>)<br>        new_name = name[num:]<br><br>    <span class="hljs-comment"># 打印新文件名，测试程序正确性</span><br>    <span class="hljs-built_in">print</span>(new_name)<br>    <br>    <span class="hljs-comment"># 重命名</span><br>    os.rename(dir_name+name, dir_name+new_name)<br></code></pre></td></tr></table></figure><h1 id="六-总结"><a href="#六-总结" class="headerlink" title="六. 总结"></a>六. 总结</h1><ul><li><p>文件操作步骤</p><ul><li>打开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象 = <span class="hljs-built_in">open</span>(目标文件, 访问模式)<br></code></pre></td></tr></table></figure><ul><li><p>操作</p><ul><li>读</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象.read()<br>文件对象.readlines()<br>文件对象.readline()<br></code></pre></td></tr></table></figure><ul><li>写</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象.write()<br></code></pre></td></tr></table></figure><ul><li>seek()</li></ul></li><li><p>关闭</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">文件对象.close()<br></code></pre></td></tr></table></figure></li><li><p>主访问模式</p><ul><li>w：写，文件不存在则新建该文件</li><li>r：读，文件不存在则报错</li><li>a：追加</li></ul></li><li><p>文件和文件夹操作</p><ul><li>重命名：os.rename()</li><li>获取当前目录：os.getcwd()</li><li>获取目录列表：os.listdir()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>文件操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码复现：MDOAU-net</title>
    <link href="/2023/01/19/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AMDOAU-net/"/>
    <url>/2023/01/19/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AMDOAU-net/</url>
    
    <content type="html"><![CDATA[<h3 id="“OSError-WinError-1455-页面文件太小，无法完成操作”解决方案"><a href="#“OSError-WinError-1455-页面文件太小，无法完成操作”解决方案" class="headerlink" title="“OSError: [WinError 1455]页面文件太小，无法完成操作”解决方案"></a><strong>“OSError: [WinError 1455]页面文件太小，无法完成操作”解决方案</strong></h3><p>调整页面文件大小，即<strong>给Anaconda所在的那个磁盘分配虚拟内存</strong></p><h4 id="第一步：鼠标右击我的电脑-此电脑-，点击属性"><a href="#第一步：鼠标右击我的电脑-此电脑-，点击属性" class="headerlink" title="第一步：鼠标右击我的电脑 (此电脑)，点击属性"></a><strong>第一步：鼠标右击我的电脑 (此电脑)，点击属性</strong></h4><p><img src="/2023/01/19/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AMDOAU-net/1.png"></p><h4 id="第二步：点击高级系统设置，然后点击设置，如下图所示"><a href="#第二步：点击高级系统设置，然后点击设置，如下图所示" class="headerlink" title="第二步：点击高级系统设置，然后点击设置，如下图所示"></a><strong>第二步：点击高级系统设置，然后点击设置</strong>，如下图所示</h4><p><img src="/2023/01/19/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AMDOAU-net/2.png"></p><h4 id="第三步：依次选择高级-gt-程序-gt-更改，如下图所示"><a href="#第三步：依次选择高级-gt-程序-gt-更改，如下图所示" class="headerlink" title="第三步：依次选择高级 -&gt; 程序 -&gt; 更改，如下图所示"></a><strong>第三步：依次选择高级 -&gt; 程序 -&gt; 更改</strong>，如下图所示</h4><p><img src="/2023/01/19/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AMDOAU-net/3.png"></p><h4 id="第四步：去掉自动管理所有驱动器的分页文件大小前面的对勾-gt-选择磁盘-因为我的Anaconda是安装在D盘的，所以这里选择D盘-gt-点击自定义大小-gt-修改初始大小和最大值-保证小于可用空间即可-gt-点击设置-gt-点击确定，如下图所示"><a href="#第四步：去掉自动管理所有驱动器的分页文件大小前面的对勾-gt-选择磁盘-因为我的Anaconda是安装在D盘的，所以这里选择D盘-gt-点击自定义大小-gt-修改初始大小和最大值-保证小于可用空间即可-gt-点击设置-gt-点击确定，如下图所示" class="headerlink" title="第四步：去掉自动管理所有驱动器的分页文件大小前面的对勾 -&gt; 选择磁盘 (因为我的Anaconda是安装在D盘的，所以这里选择D盘) -&gt; 点击自定义大小 -&gt; 修改初始大小和最大值 (保证小于可用空间即可) -&gt; 点击设置 -&gt; 点击确定，如下图所示"></a><strong>第四步：去掉自动管理所有驱动器的分页文件大小前面的对勾 -&gt; 选择磁盘 (因为我的Anaconda是安装在D盘的，所以这里选择D盘) -&gt; 点击自定义大小 -&gt; 修改初始大小和最大值 (保证小于可用空间即可) -&gt; 点击设置 -&gt; 点击确定</strong>，如下图所示</h4><p><img src="/2023/01/19/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AMDOAU-net/4.png"></p><h4 id="第五步：点击确定，重启电脑即可"><a href="#第五步：点击确定，重启电脑即可" class="headerlink" title="第五步：点击确定，重启电脑即可"></a><strong>第五步：点击确定，重启电脑即可</strong></h4>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MDOAU-net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>推导式</title>
    <link href="/2023/01/16/%E6%8E%A8%E5%AF%BC%E5%BC%8F/"/>
    <url>/2023/01/16/%E6%8E%A8%E5%AF%BC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>列表推导式</li><li>字典推导式</li><li>集合推导式</li></ul><h1 id="一-列表推导式"><a href="#一-列表推导式" class="headerlink" title="一. 列表推导式"></a>一. 列表推导式</h1><p>作用：用一个表达式创建一个有规律的列表或控制一个有规律列表。</p><p>列表推导式又叫列表生成式。</p><h2 id="1-1-快速体验"><a href="#1-1-快速体验" class="headerlink" title="1.1 快速体验"></a>1.1 快速体验</h2><p>需求：创建一个0-10的列表。</p><ul><li>while循环实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 准备一个空列表</span><br>list1 = []<br><br><span class="hljs-comment"># 2. 书写循环，依次追加数字到空列表list1中</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">10</span>:<br>    list1.append(i)<br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>for循环实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    list1.append(i)<br><br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>列表推导式实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><h2 id="1-2-带if的列表推导式"><a href="#1-2-带if的列表推导式" class="headerlink" title="1.2 带if的列表推导式"></a>1.2 带if的列表推导式</h2><p>需求：创建0-10的偶数列表</p><ul><li>方法一：range()步长实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)]<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><ul><li>方法二：if实现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><h2 id="1-3-多个for循环实现列表推导式"><a href="#1-3-多个for循环实现列表推导式" class="headerlink" title="1.3 多个for循环实现列表推导式"></a>1.3 多个for循环实现列表推导式</h2><p>需求：创建列表如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">[(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]<br></code></pre></td></tr></table></figure><ul><li>代码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [(i, j) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><span class="hljs-built_in">print</span>(list1)<br></code></pre></td></tr></table></figure><h1 id="二-字典推导式"><a href="#二-字典推导式" class="headerlink" title="二. 字典推导式"></a>二. 字典推导式</h1><p>思考：如果有如下两个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;gender&#x27;</span>]<br>list2 = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;man&#x27;</span>]<br></code></pre></td></tr></table></figure><p>如何快速合并为一个字典？</p><p>答：字典推导式</p><p>字典推导式作用：快速合并列表为字典或提取字典中目标数据。</p><h1 id="2-1-快速体验"><a href="#2-1-快速体验" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h1><ol><li>创建一个字典：字典key是1-5数字，value是这个数字的2次方。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;i: i**<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)&#125;<br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;1: 1, 2: 4, 3: 9, 4: 16&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>将两个列表合并为一个字典</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;gender&#x27;</span>]<br>list2 = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;man&#x27;</span>]<br><br>dict1 = &#123;list1[i]: list2[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(list1))&#125;<br><span class="hljs-built_in">print</span>(dict1)<br></code></pre></td></tr></table></figure><ol start="3"><li>提取字典中目标数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">counts = &#123;<span class="hljs-string">&#x27;MBP&#x27;</span>: <span class="hljs-number">268</span>, <span class="hljs-string">&#x27;HP&#x27;</span>: <span class="hljs-number">125</span>, <span class="hljs-string">&#x27;DELL&#x27;</span>: <span class="hljs-number">201</span>, <span class="hljs-string">&#x27;Lenovo&#x27;</span>: <span class="hljs-number">199</span>, <span class="hljs-string">&#x27;acer&#x27;</span>: <span class="hljs-number">99</span>&#125;<br><br><span class="hljs-comment"># 需求：提取上述电脑数量大于等于200的字典数据</span><br>count1 = &#123;key: value <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> counts.items() <span class="hljs-keyword">if</span> value &gt;= <span class="hljs-number">200</span>&#125;<br><span class="hljs-built_in">print</span>(count1)  <span class="hljs-comment"># &#123;&#x27;MBP&#x27;: 268, &#x27;DELL&#x27;: 201&#125;</span><br></code></pre></td></tr></table></figure><h1 id="三-集合推导式"><a href="#三-集合推导式" class="headerlink" title="三. 集合推导式"></a>三. 集合推导式</h1><p>需求：创建一个集合，数据为下方列表的2次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>set1 = &#123;i ** <span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1&#125;<br><span class="hljs-built_in">print</span>(set1)  <span class="hljs-comment"># &#123;1, 4&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：集合有数据去重功能。</p></blockquote><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul><li>推导式的作用：简化代码</li><li>推导式写法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表推导式</span><br>[xx <span class="hljs-keyword">for</span> xx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>()]<br><br><span class="hljs-comment"># 字典推导式</span><br>&#123;xx1: xx2 <span class="hljs-keyword">for</span> ... <span class="hljs-keyword">in</span> ...&#125;<br><br><span class="hljs-comment"># 集合推导式</span><br>&#123;xx <span class="hljs-keyword">for</span> xx <span class="hljs-keyword">in</span> ...&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>推导式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>公共操作</title>
    <link href="/2023/01/16/%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/01/16/%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="课程：公共操作"><a href="#课程：公共操作" class="headerlink" title="课程：公共操作"></a>课程：公共操作</h1><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>运算符</li><li>公共方法</li><li>容器类型转换</li></ul><h1 id="一-运算符"><a href="#一-运算符" class="headerlink" title="一. 运算符"></a>一. 运算符</h1><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">支持的容器类型</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">合并</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">*</td><td align="center">复制</td><td align="center">字符串、列表、元组</td></tr><tr><td align="center">in</td><td align="center">元素是否存在</td><td align="center">字符串、列表、元组、字典</td></tr><tr><td align="center">not in</td><td align="center">元素是否不存在</td><td align="center">字符串、列表、元组、字典</td></tr></tbody></table><h2 id="1-1"><a href="#1-1" class="headerlink" title="1.1 +"></a>1.1 +</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串 </span><br>str1 = <span class="hljs-string">&#x27;aa&#x27;</span><br>str2 = <span class="hljs-string">&#x27;bb&#x27;</span><br>str3 = str1 + str2<br><span class="hljs-built_in">print</span>(str3)  <span class="hljs-comment"># aabb</span><br><br><br><span class="hljs-comment"># 2. 列表 </span><br>list1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>list2 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>]<br>list3 = list1 + list2<br><span class="hljs-built_in">print</span>(list3)  <span class="hljs-comment"># [1, 2, 10, 20]</span><br><br><span class="hljs-comment"># 3. 元组 </span><br>t1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>t2 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)<br>t3 = t1 + t2<br><span class="hljs-built_in">print</span>(t3)  <span class="hljs-comment"># (10, 20, 100, 200)</span><br></code></pre></td></tr></table></figure><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2 *"></a>1.2 *</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span> * <span class="hljs-number">10</span>)  <span class="hljs-comment"># ----------</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-built_in">print</span>(list1 * <span class="hljs-number">4</span>)  <span class="hljs-comment"># [&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;hello&#x27;]</span><br><br><span class="hljs-comment"># 3. 元组</span><br>t1 = (<span class="hljs-string">&#x27;world&#x27;</span>,)<br><span class="hljs-built_in">print</span>(t1 * <span class="hljs-number">4</span>)  <span class="hljs-comment"># (&#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;, &#x27;world&#x27;)</span><br></code></pre></td></tr></table></figure><h2 id="1-3-in或not-in"><a href="#1-3-in或not-in" class="headerlink" title="1.3 in或not in"></a>1.3 in或not in</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcd&#x27;</span>)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;abcd&#x27;</span>)  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> list1)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> list1)  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 3. 元组</span><br>t1 = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;aa&#x27;</span> <span class="hljs-keyword">in</span> t1)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;aa&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> t1)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h1 id="二-公共方法"><a href="#二-公共方法" class="headerlink" title="二. 公共方法"></a>二. 公共方法</h1><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>len()</td><td>计算容器中元素个数</td></tr><tr><td>del 或 del()</td><td>删除</td></tr><tr><td>max()</td><td>返回容器中元素最大值</td></tr><tr><td>min()</td><td>返回容器中元素最小值</td></tr><tr><td>range(start, end, step)</td><td>生成从start到end的数字，步长为 step，供for循环使用</td></tr><tr><td>enumerate()</td><td>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</td></tr></tbody></table><h2 id="2-1-len"><a href="#2-1-len" class="headerlink" title="2.1 len()"></a>2.1 len()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br>str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(str1))  <span class="hljs-comment"># 7</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(list1))  <span class="hljs-comment"># 4</span><br><br><span class="hljs-comment"># 3. 元组</span><br>t1 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(t1))  <span class="hljs-comment"># 5</span><br><br><span class="hljs-comment"># 4. 集合</span><br>s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s1))  <span class="hljs-comment"># 3</span><br><br><span class="hljs-comment"># 5. 字典</span><br>dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Rose&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dict1))  <span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><h2 id="2-2-del"><a href="#2-2-del" class="headerlink" title="2.2 del()"></a>2.2 del()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br>str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-keyword">del</span> str1<br><span class="hljs-built_in">print</span>(str1)<br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-keyword">del</span>(list1[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(list1)  <span class="hljs-comment"># [20, 30, 40]</span><br></code></pre></td></tr></table></figure><h2 id="2-3-max"><a href="#2-3-max" class="headerlink" title="2.3 max()"></a>2.3 max()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br>str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(str1))  <span class="hljs-comment"># g</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>(list1))  <span class="hljs-comment"># 40</span><br></code></pre></td></tr></table></figure><h2 id="2-4-min"><a href="#2-4-min" class="headerlink" title="2.4 min()"></a>2.4 min()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 字符串</span><br>str1 = <span class="hljs-string">&#x27;abcdefg&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(str1))  <span class="hljs-comment"># a</span><br><br><span class="hljs-comment"># 2. 列表</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">min</span>(list1))  <span class="hljs-comment"># 10</span><br></code></pre></td></tr></table></figure><h2 id="2-5-range"><a href="#2-5-range" class="headerlink" title="2.5 range()"></a>2.5 range()</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1 2 3 4 5 6 7 8 9</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-comment"># 1 3 5 7 9</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-comment"># 0 1 2 3 4 5 6 7 8 9</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><blockquote><p>注意：range()生成的序列不包含end数字。</p></blockquote><h2 id="2-6-enumerate"><a href="#2-6-enumerate" class="headerlink" title="2.6 enumerate()"></a>2.6 enumerate()</h2><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">enumerate</span>(可遍历对象, start=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：start参数用来设置遍历数据的下标的起始值，默认为0。</p></blockquote><ul><li>快速体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-keyword">for</span> index, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1, start=<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;下标是<span class="hljs-subst">&#123;index&#125;</span>, 对应的字符是<span class="hljs-subst">&#123;char&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%85%AC%E5%85%B1%E6%93%8D%E4%BD%9C/image-20190213115919040.png"></p><h1 id="三-容器类型转换"><a href="#三-容器类型转换" class="headerlink" title="三. 容器类型转换"></a>三. 容器类型转换</h1><h2 id="3-1-tuple"><a href="#3-1-tuple" class="headerlink" title="3.1 tuple()"></a>3.1 tuple()</h2><p>作用：将某个序列转换成元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>]<br>s1 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(list1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(s1))<br></code></pre></td></tr></table></figure><h2 id="3-2-list"><a href="#3-2-list" class="headerlink" title="3.2 list()"></a>3.2 list()</h2><p>作用：将某个序列转换成列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)<br>s1 = &#123;<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>, <span class="hljs-number">400</span>, <span class="hljs-number">500</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(t1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(s1))<br></code></pre></td></tr></table></figure><h2 id="3-3-set"><a href="#3-3-set" class="headerlink" title="3.3 set()"></a>3.3 set()</h2><p>作用：将某个序列转换成集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>, <span class="hljs-number">20</span>]<br>t1 = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(list1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(t1))<br></code></pre></td></tr></table></figure><blockquote><p>注意：</p></blockquote><pre><code class="hljs"> 1. 集合可以快速完成列表去重 2. 集合不支持下标</code></pre><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul><li>运算符<ul><li><ul><li></li></ul></li><li>in &#x2F; not in</li></ul></li><li>公共方法<ul><li>len()</li><li>del()</li><li>range()</li><li>enumerate()</li></ul></li><li>数据类型转换<ul><li>tuple()</li><li>list()</li><li>set()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>公共操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合</title>
    <link href="/2023/01/16/%E9%9B%86%E5%90%88/"/>
    <url>/2023/01/16/%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>创建集合</li><li>集合数据的特点</li><li>集合的常见操作</li></ul><h1 id="一-创建集合"><a href="#一-创建集合" class="headerlink" title="一. 创建集合"></a>一. 创建集合</h1><p>创建集合使用<code>&#123;&#125;</code>或<code>set()</code>， 但是如果要创建空集合只能使用<code>set()</code>，因为<code>&#123;&#125;</code>用来创建空字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-built_in">print</span>(s1)<br><br>s2 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">30</span>, <span class="hljs-number">50</span>&#125;<br><span class="hljs-built_in">print</span>(s2)<br><br>s3 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;abcdefg&#x27;</span>)<br><span class="hljs-built_in">print</span>(s3)<br><br>s4 = <span class="hljs-built_in">set</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(s4))  <span class="hljs-comment"># set</span><br><br>s5 = &#123;&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(s5))  <span class="hljs-comment"># dict</span><br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E9%9B%86%E5%90%88/image-20190318104620690.png"></p><blockquote><p>特点：</p><ol><li>集合可以去掉重复数据；</li><li>集合数据是无序的，故不支持下标</li></ol></blockquote><h1 id="二-集合常见操作方法"><a href="#二-集合常见操作方法" class="headerlink" title="二. 集合常见操作方法"></a>二. 集合常见操作方法</h1><h2 id="2-1-增加数据"><a href="#2-1-增加数据" class="headerlink" title="2.1 增加数据"></a>2.1 增加数据</h2><ul><li>add()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br>s1.add(<span class="hljs-number">100</span>)<br>s1.add(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s1)  <span class="hljs-comment"># &#123;100, 10, 20&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>因为集合有去重功能，所以，当向集合内追加的数据是当前集合已有数据的话，则不进行任何操作。</p></blockquote><ul><li>update(), 追加的数据是序列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br><span class="hljs-comment"># s1.update(100)  # 报错</span><br>s1.update([<span class="hljs-number">100</span>, <span class="hljs-number">200</span>])<br>s1.update(<span class="hljs-string">&#x27;abc&#x27;</span>)<br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E9%9B%86%E5%90%88/image-20190318121424514.png"></p><h2 id="2-2-删除数据"><a href="#2-2-删除数据" class="headerlink" title="2.2 删除数据"></a>2.2 删除数据</h2><ul><li>remove()，删除集合中的指定数据，如果数据不存在则报错。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br><br>s1.remove(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s1)<br><br>s1.remove(<span class="hljs-number">10</span>)  <span class="hljs-comment"># 报错</span><br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><ul><li>discard()，删除集合中的指定数据，如果数据不存在也不会报错。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>&#125;<br><br>s1.discard(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s1)<br><br>s1.discard(<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><ul><li>pop()，随机删除集合中的某个数据，并返回这个数据。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><br>del_num = s1.pop()<br><span class="hljs-built_in">print</span>(del_num)<br><span class="hljs-built_in">print</span>(s1)<br></code></pre></td></tr></table></figure><h2 id="2-3-查找数据"><a href="#2-3-查找数据" class="headerlink" title="2.3 查找数据"></a>2.3 查找数据</h2><ul><li>in：判断数据在集合序列</li><li>not in：判断数据不在集合序列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;<br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">in</span> s1)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> s1)<br></code></pre></td></tr></table></figure><h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h1><ul><li><p>创建集合</p><ul><li>有数据集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = &#123;数据<span class="hljs-number">1</span>, 数据<span class="hljs-number">2</span>, ...&#125;<br></code></pre></td></tr></table></figure><ul><li>无数据集合</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-built_in">set</span>()<br></code></pre></td></tr></table></figure></li><li><p>常见操作</p><ul><li>增加数据<ul><li>add()</li><li>update()</li></ul></li><li>删除数据<ul><li>remove()</li><li>discard()</li></ul></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>集合</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字典</title>
    <link href="/2023/01/16/%E5%AD%97%E5%85%B8/"/>
    <url>/2023/01/16/%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>字典的应用场景</li><li>创建字典的语法</li><li>字典常见操作</li><li>字典的循环遍历</li></ul><h1 id="一-字典的应用场景"><a href="#一-字典的应用场景" class="headerlink" title="一. 字典的应用场景"></a>一. 字典的应用场景</h1><p>思考1： 如果有多个数据，例如：’Tom’, ‘男’, 20，如何快速存储？</p><p>答：列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>]<br></code></pre></td></tr></table></figure><p>思考2：如何查找到数据’Tom’？</p><p>答：查找到下标为0的数据即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>思考3：如果将来数据顺序发生变化，如下所示，还能用<code>list1[0]</code>访问到数据’Tom’吗？。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>]<br></code></pre></td></tr></table></figure><p>答：不能，数据’Tom’此时下标为2。</p><p>思考4：数据顺序发生变化，每个数据的下标也会随之变化，如何保证数据顺序变化前后能使用同一的标准查找数据呢？</p><p>答：字典，字典里面的数据是以&#x3D;&#x3D;键值对&#x3D;&#x3D;形式出现，字典数据和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，只需要按照对应的键的名字查找数据即可。</p><h1 id="二-创建字典的语法"><a href="#二-创建字典的语法" class="headerlink" title="二. 创建字典的语法"></a>二. 创建字典的语法</h1><p>字典特点：</p><ul><li>符号为&#x3D;&#x3D;大括号&#x3D;&#x3D;</li><li>数据为&#x3D;&#x3D;键值对&#x3D;&#x3D;形式出现</li><li>各个键值对之间用&#x3D;&#x3D;逗号&#x3D;&#x3D;隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 有数据字典</span><br>dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br><span class="hljs-comment"># 空字典</span><br>dict2 = &#123;&#125;<br><br>dict3 = <span class="hljs-built_in">dict</span>()<br></code></pre></td></tr></table></figure><blockquote><p>注意：一般称冒号前面的为键(key)，简称k；冒号后面的为值(value)，简称v。</p></blockquote><h1 id="三-字典常见操作"><a href="#三-字典常见操作" class="headerlink" title="三. 字典常见操作"></a>三. 字典常见操作</h1><h2 id="3-1-增"><a href="#3-1-增" class="headerlink" title="3.1 增"></a>3.1 增</h2><p>写法：&#x3D;&#x3D;字典序列[key] &#x3D; 值&#x3D;&#x3D;</p><blockquote><p>注意：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br>dict1[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;Rose&#x27;</span><br><span class="hljs-comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(dict1)<br><br>dict1[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-number">110</span><br><br><span class="hljs-comment"># &#123;&#x27;name&#x27;: &#x27;Rose&#x27;, &#x27;age&#x27;: 20, &#x27;gender&#x27;: &#x27;男&#x27;, &#x27;id&#x27;: 110&#125;</span><br><span class="hljs-built_in">print</span>(dict1)<br></code></pre></td></tr></table></figure><blockquote><p>注意：字典为可变类型。</p></blockquote><h2 id="3-2-删"><a href="#3-2-删" class="headerlink" title="3.2 删"></a>3.2 删</h2><ul><li>del() &#x2F; del：删除字典或删除字典中指定键值对。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br><span class="hljs-keyword">del</span> dict1[<span class="hljs-string">&#x27;gender&#x27;</span>]<br><span class="hljs-comment"># 结果：&#123;&#x27;name&#x27;: &#x27;Tom&#x27;, &#x27;age&#x27;: 20&#125;</span><br><span class="hljs-built_in">print</span>(dict1)<br></code></pre></td></tr></table></figure><ul><li>clear()：清空字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><br>dict1.clear()<br><span class="hljs-built_in">print</span>(dict1)  <span class="hljs-comment"># &#123;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="3-3-改"><a href="#3-3-改" class="headerlink" title="3.3 改"></a>3.3 改</h2><p>写法：&#x3D;&#x3D;字典序列[key] &#x3D; 值&#x3D;&#x3D;</p><blockquote><p>注意：如果key存在则修改这个key对应的值 ；如果key不存在则新增此键值对。</p></blockquote><h2 id="3-4-查"><a href="#3-4-查" class="headerlink" title="3.4 查"></a>3.4 查</h2><h3 id="3-4-1-key值查找"><a href="#3-4-1-key值查找" class="headerlink" title="3.4.1 key值查找"></a>3.4.1 key值查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1[<span class="hljs-string">&#x27;name&#x27;</span>])  <span class="hljs-comment"># Tom</span><br><span class="hljs-built_in">print</span>(dict1[<span class="hljs-string">&#x27;id&#x27;</span>])  <span class="hljs-comment"># 报错</span><br></code></pre></td></tr></table></figure><blockquote><p>如果当前查找的key存在，则返回对应的值；否则则报错。</p></blockquote><h3 id="3-4-2-get"><a href="#3-4-2-get" class="headerlink" title="3.4.2 get()"></a>3.4.2 get()</h3><ul><li>语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字典序列.get(key, 默认值)<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果当前查找的key不存在则返回第二个参数(默认值)，如果省略第二个参数，则返回None。</p></blockquote><ul><li>快速体验</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1.get(<span class="hljs-string">&#x27;name&#x27;</span>))  <span class="hljs-comment"># Tom</span><br><span class="hljs-built_in">print</span>(dict1.get(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-number">110</span>))  <span class="hljs-comment"># 110</span><br><span class="hljs-built_in">print</span>(dict1.get(<span class="hljs-string">&#x27;id&#x27;</span>))  <span class="hljs-comment"># None</span><br></code></pre></td></tr></table></figure><h3 id="3-4-3-keys"><a href="#3-4-3-keys" class="headerlink" title="3.4.3 keys()"></a>3.4.3 keys()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1.keys())  <span class="hljs-comment"># dict_keys([&#x27;name&#x27;, &#x27;age&#x27;, &#x27;gender&#x27;])</span><br></code></pre></td></tr></table></figure><h3 id="3-4-4-values"><a href="#3-4-4-values" class="headerlink" title="3.4.4 values()"></a>3.4.4 values()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1.values())  <span class="hljs-comment"># dict_values([&#x27;Tom&#x27;, 20, &#x27;男&#x27;])</span><br></code></pre></td></tr></table></figure><h3 id="3-4-5-items"><a href="#3-4-5-items" class="headerlink" title="3.4.5 items()"></a>3.4.5 items()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-built_in">print</span>(dict1.items())  <span class="hljs-comment"># dict_items([(&#x27;name&#x27;, &#x27;Tom&#x27;), (&#x27;age&#x27;, 20), (&#x27;gender&#x27;, &#x27;男&#x27;)])</span><br></code></pre></td></tr></table></figure><h1 id="四-字典的循环遍历"><a href="#四-字典的循环遍历" class="headerlink" title="四. 字典的循环遍历"></a>四. 字典的循环遍历</h1><h2 id="4-1-遍历字典的key"><a href="#4-1-遍历字典的key" class="headerlink" title="4.1 遍历字典的key"></a>4.1 遍历字典的key</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dict1.keys():<br>    <span class="hljs-built_in">print</span>(key)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%AD%97%E5%85%B8/image-20190212103905553.png"></p><h2 id="4-2-遍历字典的value"><a href="#4-2-遍历字典的value" class="headerlink" title="4.2 遍历字典的value"></a>4.2 遍历字典的value</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> dict1.values():<br>    <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%AD%97%E5%85%B8/image-20190212103957777.png"></p><h2 id="4-3-遍历字典的元素"><a href="#4-3-遍历字典的元素" class="headerlink" title="4.3 遍历字典的元素"></a>4.3 遍历字典的元素</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> dict1.items():<br>    <span class="hljs-built_in">print</span>(item)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%AD%97%E5%85%B8/image-20190212104046564.png"></p><h2 id="4-4-遍历字典的键值对"><a href="#4-4-遍历字典的键值对" class="headerlink" title="4.4 遍历字典的键值对"></a>4.4 遍历字典的键值对</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">20</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> dict1.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span> = <span class="hljs-subst">&#123;value&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%AD%97%E5%85%B8/image-20190212104223143.png"></p><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul><li>定义字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">dict1 = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">30</span>&#125;<br><br>dict2 = &#123;&#125;<br><br>dict3 = <span class="hljs-built_in">dict</span>()<br></code></pre></td></tr></table></figure><ul><li>常见操作<ul><li>增&#x2F;改</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字典序列[key] = 值<br></code></pre></td></tr></table></figure><ul><li>查找<ul><li>字典序列[key]</li><li>keys()</li><li>values()</li><li>items()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>字典</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>元组</title>
    <link href="/2023/01/16/%E5%85%83%E7%BB%84/"/>
    <url>/2023/01/16/%E5%85%83%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>元组的应用场景</li><li>定义元组</li><li>元组常见操作</li></ul><h1 id="一-元组的应用场景"><a href="#一-元组的应用场景" class="headerlink" title="一.  元组的应用场景"></a>一.  元组的应用场景</h1><p>思考：如果想要存储多个数据，但是这些数据是不能修改的数据，怎么做？</p><p>答：列表？列表可以一次性存储多个数据，但是列表中的数据允许更改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num_list = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br>num_list[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;一个元组可以存储多个数据，元组内的数据是不能修改的。&#x3D;&#x3D;</p><h1 id="二-定义元组"><a href="#二-定义元组" class="headerlink" title="二. 定义元组"></a>二. 定义元组</h1><p>元组特点：定义元组使用&#x3D;&#x3D;小括号&#x3D;&#x3D;，且&#x3D;&#x3D;逗号&#x3D;&#x3D;隔开各个数据，数据可以是不同的数据类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 多个数据元组</span><br>t1 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br><br><span class="hljs-comment"># 单个数据元组</span><br>t2 = (<span class="hljs-number">10</span>,)<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果定义的元组只有一个数据，那么这个数据后面也好添加逗号，否则数据类型为唯一的这个数据的数据类型</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">t2 = (<span class="hljs-number">10</span>,)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t2))  <span class="hljs-comment"># tuple</span><br><br>t3 = (<span class="hljs-number">20</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t3))  <span class="hljs-comment"># int</span><br><br>t4 = (<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(t4))  <span class="hljs-comment"># str</span><br></code></pre></td></tr></table></figure><h1 id="三-元组的常见操作"><a href="#三-元组的常见操作" class="headerlink" title="三. 元组的常见操作"></a>三. 元组的常见操作</h1><p>元组数据不支持修改，只支持查找，具体如下：</p><ul><li>按下标查找数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br><span class="hljs-built_in">print</span>(tuple1[<span class="hljs-number">0</span>])  <span class="hljs-comment"># aa</span><br></code></pre></td></tr></table></figure><ul><li>index()：查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的index方法相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br><span class="hljs-built_in">print</span>(tuple1.index(<span class="hljs-string">&#x27;aa&#x27;</span>))  <span class="hljs-comment"># 0</span><br></code></pre></td></tr></table></figure><ul><li>count()：统计某个数据在当前元组出现的次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br><span class="hljs-built_in">print</span>(tuple1.count(<span class="hljs-string">&#x27;bb&#x27;</span>))  <span class="hljs-comment"># 2</span><br></code></pre></td></tr></table></figure><ul><li>len()：统计元组中数据的个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(tuple1))  <span class="hljs-comment"># 4</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：元组内的直接数据如果修改则立即报错</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>)<br>tuple1[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;aaa&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>但是如果元组里面有列表，修改列表里面的数据则是支持的，故自觉很重要。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">tuple2 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, [<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>], <span class="hljs-number">50</span>, <span class="hljs-number">30</span>)<br><span class="hljs-built_in">print</span>(tuple2[<span class="hljs-number">2</span>])  <span class="hljs-comment"># 访问到列表</span><br><br><span class="hljs-comment"># 结果：(10, 20, [&#x27;aaaaa&#x27;, &#x27;bb&#x27;, &#x27;cc&#x27;], 50, 30)</span><br>tuple2[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;aaaaa&#x27;</span><br><span class="hljs-built_in">print</span>(tuple2)<br></code></pre></td></tr></table></figure><h1 id="四-总结"><a href="#四-总结" class="headerlink" title="四. 总结"></a>四. 总结</h1><ul><li>定义元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">t1 = (<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>)<br><br>t2 = (<span class="hljs-number">10</span>,)<br></code></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>index()</li><li>len()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>元组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>列表</title>
    <link href="/2023/01/16/%E5%88%97%E8%A1%A8/"/>
    <url>/2023/01/16/%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>列表的应用场景</li><li>列表的格式</li><li>列表的常用操作</li><li>列表的循环遍历</li><li>列表的嵌套使用</li></ul><h1 id="一-列表的应用场景"><a href="#一-列表的应用场景" class="headerlink" title="一. 列表的应用场景"></a>一. 列表的应用场景</h1><p>思考：有一个人的姓名(TOM)怎么书写存储程序？</p><p>答：变量。</p><p>思考：如果一个班级100位学生，每个人的姓名都要存储，应该如何书写程序？声明100个变量吗？</p><p>答：列表即可， 列表一次性可以存储多个数据。</p><h1 id="二-列表的格式"><a href="#二-列表的格式" class="headerlink" title="二. 列表的格式"></a>二. 列表的格式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[数据<span class="hljs-number">1</span>, 数据<span class="hljs-number">2</span>, 数据<span class="hljs-number">3</span>, 数据<span class="hljs-number">4.</span>.....]<br></code></pre></td></tr></table></figure><p>列表可以一次性存储多个数据，且可以为不同数据类型。</p><h1 id="三-列表的常用操作"><a href="#三-列表的常用操作" class="headerlink" title="三. 列表的常用操作"></a>三. 列表的常用操作</h1><p>列表的作用是一次性存储多个数据，程序员可以对这些数据进行的操作有：增、删、改、查。</p><h2 id="3-1-查找"><a href="#3-1-查找" class="headerlink" title="3.1 查找"></a>3.1 查找</h2><h3 id="3-1-1-下标"><a href="#3-1-1-下标" class="headerlink" title="3.1.1 下标"></a>3.1.1 下标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">0</span>])  <span class="hljs-comment"># Tom</span><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">1</span>])  <span class="hljs-comment"># Lily</span><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">2</span>])  <span class="hljs-comment"># Rose</span><br></code></pre></td></tr></table></figure><h3 id="3-1-2-函数"><a href="#3-1-2-函数" class="headerlink" title="3.1.2 函数"></a>3.1.2 函数</h3><ul><li>index()：返回指定数据所在位置的下标 。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.index(数据, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-built_in">print</span>(name_list.index(<span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>))  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：如果查找的数据不存在则报错。</p></blockquote><ul><li>count()：统计指定数据在当前列表中出现的次数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-built_in">print</span>(name_list.count(<span class="hljs-string">&#x27;Lily&#x27;</span>))  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><ul><li>len()：访问列表长度，即列表中数据的个数。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(name_list))  <span class="hljs-comment"># 3</span><br></code></pre></td></tr></table></figure><h3 id="3-1-3-判断是否存在"><a href="#3-1-3-判断是否存在" class="headerlink" title="3.1.3 判断是否存在"></a>3.1.3 判断是否存在</h3><ul><li>in：判断指定数据在某个列表序列，如果在返回True，否则返回False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Lily&#x27;</span> <span class="hljs-keyword">in</span> name_list)<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Lilys&#x27;</span> <span class="hljs-keyword">in</span> name_list)<br></code></pre></td></tr></table></figure><ul><li>not in：判断指定数据不在某个列表序列，如果不在返回True，否则返回False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Lily&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name_list)<br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Lilys&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name_list)<br></code></pre></td></tr></table></figure><ul><li>体验案例</li></ul><p>需求：查找用户输入的名字是否已经存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您要搜索的名字：&#x27;</span>)<br><br><span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> name_list:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的名字是<span class="hljs-subst">&#123;name&#125;</span>, 名字已经存在&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的名字是<span class="hljs-subst">&#123;name&#125;</span>, 名字不存在&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-2-增加"><a href="#3-2-增加" class="headerlink" title="3.2 增加"></a>3.2 增加</h2><p>作用：增加指定数据到列表中。</p><ul><li>append()：列表结尾追加数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.append(数据)<br></code></pre></td></tr></table></figure><ol start="2"><li>体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.append(<span class="hljs-string">&#x27;xiaoming&#x27;</span>)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/%E5%88%97%E8%A1%A8/image-20190130160154636.png"></p><blockquote><p>列表追加数据的时候，直接在原列表里面追加了指定数据，即修改了原列表，故列表为可变类型数据。</p></blockquote><ol start="3"><li>注意点</li></ol><p>如果append()追加的数据是一个序列，则追加整个序列到列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.append([<span class="hljs-string">&#x27;xiaoming&#x27;</span>, <span class="hljs-string">&#x27;xiaohong&#x27;</span>])<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, [&#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>extend()：列表结尾追加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.extend(数据)<br></code></pre></td></tr></table></figure><ol start="2"><li><p>快速体验</p><p>2.1 单个数据</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.extend(<span class="hljs-string">&#x27;xiaoming&#x27;</span>)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;x&#x27;, &#x27;i&#x27;, &#x27;a&#x27;, &#x27;o&#x27;, &#x27;m&#x27;, &#x27;i&#x27;, &#x27;n&#x27;, &#x27;g&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><pre><code class="hljs">2.2 序列数据</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.extend([<span class="hljs-string">&#x27;xiaoming&#x27;</span>, <span class="hljs-string">&#x27;xiaohong&#x27;</span>])<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;, &#x27;xiaoming&#x27;, &#x27;xiaohong&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>insert()：指定位置新增数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.insert(位置下标, 数据)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.insert(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;xiaoming&#x27;</span>)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;xiaoming&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><h2 id="3-3-删除"><a href="#3-3-删除" class="headerlink" title="3.3 删除"></a>3.3 删除</h2><ul><li>del</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> 目标<br></code></pre></td></tr></table></figure><ol start="2"><li><p>快速体验</p><p>2.1 删除列表</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-comment"># 结果：报错提示：name &#x27;name_list&#x27; is not defined</span><br><span class="hljs-keyword">del</span> name_list<br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><pre><code class="hljs">2.2 删除指定数据</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-keyword">del</span> name_list[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 结果：[&#x27;Lily&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>pop()：删除指定下标的数据(默认为最后一个)，并返回该数据。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.pop(下标)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>del_name = name_list.pop(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 结果：Lily</span><br><span class="hljs-built_in">print</span>(del_name)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>remove()：移除列表中某个数据的第一个匹配项。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.remove(数据)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.remove(<span class="hljs-string">&#x27;Rose&#x27;</span>)<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>clear()：清空列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list.clear()<br><span class="hljs-built_in">print</span>(name_list) <span class="hljs-comment"># 结果： []</span><br></code></pre></td></tr></table></figure><h2 id="3-4-修改"><a href="#3-4-修改" class="headerlink" title="3.4 修改"></a>3.4 修改</h2><ul><li>修改指定下标数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_list[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;aaa&#x27;</span><br><br><span class="hljs-comment"># 结果：[&#x27;aaa&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_list)<br></code></pre></td></tr></table></figure><ul><li>逆置：reverse()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num_list = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><br>num_list.reverse()<br><br><span class="hljs-comment"># 结果：[8, 6, 3, 2, 5, 1]</span><br><span class="hljs-built_in">print</span>(num_list)<br></code></pre></td></tr></table></figure><ul><li>排序：sort()</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">列表序列.sort( key=<span class="hljs-literal">None</span>, reverse=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：reverse表示排序规则，<strong>reverse &#x3D; True</strong> 降序， <strong>reverse &#x3D; False</strong> 升序（默认）</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num_list = [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><br>num_list.sort()<br><br><span class="hljs-comment"># 结果：[1, 2, 3, 5, 6, 8]</span><br><span class="hljs-built_in">print</span>(num_list)<br></code></pre></td></tr></table></figure><h2 id="3-5-复制"><a href="#3-5-复制" class="headerlink" title="3.5 复制"></a>3.5 复制</h2><p>函数：copy()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>name_li2 = name_list.copy()<br><br><span class="hljs-comment"># 结果：[&#x27;Tom&#x27;, &#x27;Lily&#x27;, &#x27;Rose&#x27;]</span><br><span class="hljs-built_in">print</span>(name_li2)<br></code></pre></td></tr></table></figure><h1 id="四-列表的循环遍历"><a href="#四-列表的循环遍历" class="headerlink" title="四. 列表的循环遍历"></a>四. 列表的循环遍历</h1><p>需求：依次打印列表中的各个数据。</p><h2 id="4-1-while"><a href="#4-1-while" class="headerlink" title="4.1 while"></a>4.1 while</h2><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(name_list):<br>    <span class="hljs-built_in">print</span>(name_list[i])<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/2023/01/16/%E5%88%97%E8%A1%A8/image-20190130164205143.png"></p><h2 id="4-2-for"><a href="#4-2-for" class="headerlink" title="4.2 for"></a>4.2 for</h2><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> name_list:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><ul><li>执行结果</li></ul><p><img src="/2023/01/16/%E5%88%97%E8%A1%A8/image-20190130164227739.png"></p><h1 id="五-列表嵌套"><a href="#五-列表嵌套" class="headerlink" title="五. 列表嵌套"></a>五. 列表嵌套</h1><p>所谓列表嵌套指的就是一个列表里面包含了其他的子列表。</p><p>应用场景：要存储班级一、二、三三个班级学生姓名，且每个班级的学生姓名在一个列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小绿&#x27;</span>], [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>], [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>]]<br></code></pre></td></tr></table></figure><blockquote><p>思考： 如何查找到数据”李四”？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一步：按下标查找到李四所在的列表</span><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># 第二步：从李四所在的列表里面，再按下标找到数据李四</span><br><span class="hljs-built_in">print</span>(name_list[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h1 id="六-总结"><a href="#六-总结" class="headerlink" title="六. 总结"></a>六. 总结</h1><ul><li>列表的格式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[数据<span class="hljs-number">1</span>, 数据<span class="hljs-number">2</span>, 数据<span class="hljs-number">3</span>]<br></code></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>index()</li><li>len()</li><li>append()</li><li>pop()</li><li>remove()</li></ul></li><li>列表嵌套</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [[<span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;小红&#x27;</span>, <span class="hljs-string">&#x27;小绿&#x27;</span>], [<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-string">&#x27;Lily&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>], [<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-string">&#x27;王五&#x27;</span>]]<br>name_list[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>列表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串</title>
    <link href="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>认识字符串</li><li>下标</li><li>切片</li><li>常用操作方法</li></ul><h1 id="一-认识字符串"><a href="#一-认识字符串" class="headerlink" title="一. 认识字符串"></a>一. 认识字符串</h1><p>字符串是 Python 中最常用的数据类型。我们一般使用引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;hello world&#x27;</span><br>b = <span class="hljs-string">&quot;abcdefg&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))<br></code></pre></td></tr></table></figure><blockquote><p>注意：控制台显示结果为<code>&lt;class &#39;str&#39;&gt;</code>， 即数据类型为str(字符串)。</p></blockquote><h2 id="1-1-字符串特征"><a href="#1-1-字符串特征" class="headerlink" title="1.1 字符串特征"></a>1.1 字符串特征</h2><ul><li>一对引号字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name1 = <span class="hljs-string">&#x27;Tom&#x27;</span><br>name2 = <span class="hljs-string">&quot;Rose&quot;</span><br></code></pre></td></tr></table></figure><ul><li>三引号字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name3 = <span class="hljs-string">&#x27;&#x27;&#x27; Tom &#x27;&#x27;&#x27;</span><br>name4 = <span class="hljs-string">&quot;&quot;&quot; Rose &quot;&quot;&quot;</span><br>a = <span class="hljs-string">&#x27;&#x27;&#x27; i am Tom, </span><br><span class="hljs-string">        nice to meet you! &#x27;&#x27;&#x27;</span><br><br>b = <span class="hljs-string">&quot;&quot;&quot; i am Rose, </span><br><span class="hljs-string">        nice to meet you! &quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：三引号形式的字符串支持换行。</p></blockquote><blockquote><p>思考：如果创建一个字符串<code> I&#39;m Tom</code>?</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">c = <span class="hljs-string">&quot;I&#x27;m Tom&quot;</span><br>d = <span class="hljs-string">&#x27;I\&#x27;m Tom&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="1-2-字符串输出"><a href="#1-2-字符串输出" class="headerlink" title="1.2 字符串输出"></a>1.2 字符串输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br><br>name = <span class="hljs-string">&#x27;Tom&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s&#x27;</span> % name)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;我的名字是<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="1-3-字符串输入"><a href="#1-3-字符串输入" class="headerlink" title="1.3 字符串输入"></a>1.3 字符串输入</h2><p>在Python中，使用<code>input()</code>接收用户输入。</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的名字：&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的名字是<span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(name))<br><br>password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的密码：&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的密码是<span class="hljs-subst">&#123;password&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(password))<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129172920882.png"></p><h1 id="二、下标"><a href="#二、下标" class="headerlink" title="二、下标"></a>二、下标</h1><p><code>“下标”</code>又叫<code>“索引”</code>，就是编号。比如火车座位号，座位号的作用：按照编号快速找到对应的座位。同理，下标的作用即是通过下标快速找到对应的数据。</p><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129173606647.png"></p><h2 id="2-1-快速体验"><a href="#2-1-快速体验" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h2><p>需求：字符串<code>name = &quot;abcdef&quot;</code>，取到不同下标对应的数据。</p><ul><li>代码</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;abcdef&quot;</span><br><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><ul><li>输出结果</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129174231104.png"></p><blockquote><p>注意：下标从&#x3D;&#x3D;0&#x3D;&#x3D;开始。</p></blockquote><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/2.png"></p><h1 id="三、切片"><a href="#三、切片" class="headerlink" title="三、切片"></a>三、切片</h1><p>切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p><h2 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">序列[开始位置下标:结束位置下标:步长]<br></code></pre></td></tr></table></figure><blockquote><p>注意</p></blockquote><pre><code class="hljs"> 1. 不包含结束位置下标对应的数据， 正负整数均可； 2. 步长是选取间隔，正负整数均可，默认步长为1。</code></pre><h2 id="3-2-体验"><a href="#3-2-体验" class="headerlink" title="3.2 体验"></a>3.2 体验</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;abcdefg&quot;</span><br><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>:<span class="hljs-number">1</span>])  <span class="hljs-comment"># cde</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])  <span class="hljs-comment"># cde</span><br><span class="hljs-built_in">print</span>(name[:<span class="hljs-number">5</span>])  <span class="hljs-comment"># abcde</span><br><span class="hljs-built_in">print</span>(name[<span class="hljs-number">1</span>:])  <span class="hljs-comment"># bcdefg</span><br><span class="hljs-built_in">print</span>(name[:])  <span class="hljs-comment"># abcdefg</span><br><span class="hljs-built_in">print</span>(name[::<span class="hljs-number">2</span>])  <span class="hljs-comment"># aceg</span><br><span class="hljs-built_in">print</span>(name[:-<span class="hljs-number">1</span>])  <span class="hljs-comment"># abcdef, 负1表示倒数第一个数据</span><br><span class="hljs-built_in">print</span>(name[-<span class="hljs-number">4</span>:-<span class="hljs-number">1</span>])  <span class="hljs-comment"># def</span><br><span class="hljs-built_in">print</span>(name[::-<span class="hljs-number">1</span>])  <span class="hljs-comment"># gfedcba</span><br></code></pre></td></tr></table></figure><h1 id="四、常用操作方法"><a href="#四、常用操作方法" class="headerlink" title="四、常用操作方法"></a>四、常用操作方法</h1><p>字符串的常用操作方法有查找、修改和判断三大类。</p><h2 id="4-1-查找"><a href="#4-1-查找" class="headerlink" title="4.1 查找"></a>4.1 查找</h2><p>所谓字符串查找方法即是查找子串在字符串中的位置或出现的次数。</p><ul><li>find()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回-1。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.find(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-built_in">print</span>(mystr.find(<span class="hljs-string">&#x27;and&#x27;</span>))  <span class="hljs-comment"># 12</span><br><span class="hljs-built_in">print</span>(mystr.find(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-number">30</span>))  <span class="hljs-comment"># 23</span><br><span class="hljs-built_in">print</span>(mystr.find(<span class="hljs-string">&#x27;ands&#x27;</span>))  <span class="hljs-comment"># -1</span><br></code></pre></td></tr></table></figure><ul><li>index()：检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.index(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-built_in">print</span>(mystr.index(<span class="hljs-string">&#x27;and&#x27;</span>))  <span class="hljs-comment"># 12</span><br><span class="hljs-built_in">print</span>(mystr.index(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-number">15</span>, <span class="hljs-number">30</span>))  <span class="hljs-comment"># 23</span><br><span class="hljs-built_in">print</span>(mystr.index(<span class="hljs-string">&#x27;ands&#x27;</span>))  <span class="hljs-comment"># 报错</span><br></code></pre></td></tr></table></figure><ul><li>rfind()： 和find()功能相同，但查找方向为&#x3D;&#x3D;右侧&#x3D;&#x3D;开始。</li><li>rindex()：和index()功能相同，但查找方向为&#x3D;&#x3D;右侧&#x3D;&#x3D;开始。</li><li>count()：返回某个子串在字符串中出现的次数</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.count(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><blockquote><p>注意：开始和结束位置下标可以省略，表示在整个字符串序列中查找。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-built_in">print</span>(mystr.count(<span class="hljs-string">&#x27;and&#x27;</span>))  <span class="hljs-comment"># 3</span><br><span class="hljs-built_in">print</span>(mystr.count(<span class="hljs-string">&#x27;ands&#x27;</span>))  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(mystr.count(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>))  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h2 id="4-2-修改"><a href="#4-2-修改" class="headerlink" title="4.2 修改"></a>4.2 修改</h2><p>所谓修改字符串，指的就是通过函数的形式修改字符串中的数据。</p><ul><li>replace()：替换</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.replace(旧子串, 新子串, 替换次数)<br></code></pre></td></tr></table></figure><blockquote><p>注意：替换次数如果查出子串出现次数，则替换次数为该子串出现次数。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：hello world he itcast he itheima he Python</span><br><span class="hljs-built_in">print</span>(mystr.replace(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;he&#x27;</span>))<br><span class="hljs-comment"># 结果：hello world he itcast he itheima he Python</span><br><span class="hljs-built_in">print</span>(mystr.replace(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;he&#x27;</span>, <span class="hljs-number">10</span>))<br><span class="hljs-comment"># 结果：hello world and itcast and itheima and Python</span><br><span class="hljs-built_in">print</span>(mystr)<br></code></pre></td></tr></table></figure><blockquote><p>注意：数据按照是否能直接修改分为&#x3D;&#x3D;可变类型&#x3D;&#x3D;和&#x3D;&#x3D;不可变类型&#x3D;&#x3D;两种。字符串类型的数据修改的时候不能改变原有字符串，属于不能直接修改数据的类型即是不可变类型。</p></blockquote><ul><li>split()：按照指定字符分割字符串。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.split(分割字符, num)<br></code></pre></td></tr></table></figure><blockquote><p>注意：num表示的是分割字符出现的次数，即将来返回数据个数为num+1个。</p></blockquote><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima &#x27;, &#x27; Python&#x27;]</span><br><span class="hljs-built_in">print</span>(mystr.split(<span class="hljs-string">&#x27;and&#x27;</span>))<br><span class="hljs-comment"># 结果：[&#x27;hello world &#x27;, &#x27; itcast &#x27;, &#x27; itheima and Python&#x27;]</span><br><span class="hljs-built_in">print</span>(mystr.split(<span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-number">2</span>))<br><span class="hljs-comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and&#x27;, &#x27;itcast&#x27;, &#x27;and&#x27;, &#x27;itheima&#x27;, &#x27;and&#x27;, &#x27;Python&#x27;]</span><br><span class="hljs-built_in">print</span>(mystr.split(<span class="hljs-string">&#x27; &#x27;</span>))<br><span class="hljs-comment"># 结果：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;and itcast and itheima and Python&#x27;]</span><br><span class="hljs-built_in">print</span>(mystr.split(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果分割字符是原有字符串中的子串，分割后则丢失该子串。</p></blockquote><ul><li>join()：用一个字符或子串合并字符串，即是将多个字符串合并为一个新的字符串。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符或子串.join(多字符串组成的序列)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&#x27;chuan&#x27;</span>, <span class="hljs-string">&#x27;zhi&#x27;</span>, <span class="hljs-string">&#x27;bo&#x27;</span>, <span class="hljs-string">&#x27;ke&#x27;</span>]<br>t1 = (<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>, <span class="hljs-string">&#x27;ddd&#x27;</span>)<br><span class="hljs-comment"># 结果：chuan_zhi_bo_ke</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;_&#x27;</span>.join(list1))<br><span class="hljs-comment"># 结果：aa...b...cc...ddd</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;...&#x27;</span>.join(t1))<br></code></pre></td></tr></table></figure><ul><li>capitalize()：将字符串第一个字符转换成大写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：Hello world and itcast and itheima and python</span><br><span class="hljs-built_in">print</span>(mystr.capitalize())<br></code></pre></td></tr></table></figure><blockquote><p>注意：capitalize()函数转换后，只字符串第一个字符大写，其他的字符全都小写。</p></blockquote><ul><li>title()：将字符串每个单词首字母转换成大写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：Hello World And Itcast And Itheima And Python</span><br><span class="hljs-built_in">print</span>(mystr.title())<br></code></pre></td></tr></table></figure><ul><li>lower()：将字符串中大写转小写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：hello world and itcast and itheima and python</span><br><span class="hljs-built_in">print</span>(mystr.lower())<br></code></pre></td></tr></table></figure><ul><li>upper()：将字符串中小写转大写。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：HELLO WORLD AND ITCAST AND ITHEIMA AND PYTHON</span><br><span class="hljs-built_in">print</span>(mystr.upper())<br></code></pre></td></tr></table></figure><ul><li>lstrip()：删除字符串左侧空白字符。</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129213453010.png"></p><ul><li>rstrip()：删除字符串右侧空白字符。</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129213558850.png"></p><ul><li>strip()：删除字符串两侧空白字符。</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190129213637584.png"></p><ul><li>ljust()：返回一个原字符串左对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.ljust(长度, 填充字符)<br></code></pre></td></tr></table></figure><ol start="2"><li>输出效果</li></ol><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190130141125560.png"></p><ul><li>rjust()：返回一个原字符串右对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li><li>center()：返回一个原字符串居中对齐,并使用指定字符(默认空格)填充至对应长度 的新字符串，语法和ljust()相同。</li></ul><p><img src="/2023/01/16/%E5%AD%97%E7%AC%A6%E4%B8%B2/image-20190130141442074.png"></p><h2 id="4-3-判断"><a href="#4-3-判断" class="headerlink" title="4.3 判断"></a>4.3 判断</h2><p>所谓判断即是判断真假，返回的结果是布尔型数据类型：True 或 False。</p><ul><li>startswith()：检查字符串是否是以指定子串开头，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.startswith(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python   &quot;</span><br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr.startswith(<span class="hljs-string">&#x27;hello&#x27;</span>))<br><br><span class="hljs-comment"># 结果False</span><br><span class="hljs-built_in">print</span>(mystr.startswith(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">5</span>, <span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><ul><li>endswith()：：检查字符串是否是以指定子串结尾，是则返回 True，否则返回 False。如果设置开始和结束位置下标，则在指定范围内检查。</li></ul><ol><li>语法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">字符串序列.endswith(子串, 开始位置下标, 结束位置下标)<br></code></pre></td></tr></table></figure><ol start="2"><li>快速体验</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr = <span class="hljs-string">&quot;hello world and itcast and itheima and Python&quot;</span><br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr.endswith(<span class="hljs-string">&#x27;Python&#x27;</span>))<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr.endswith(<span class="hljs-string">&#x27;python&#x27;</span>))<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr.endswith(<span class="hljs-string">&#x27;Python&#x27;</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><ul><li>isalpha()：如果字符串至少有一个字符并且所有字符都是字母则返回 True, 否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr1 = <span class="hljs-string">&#x27;hello&#x27;</span><br>mystr2 = <span class="hljs-string">&#x27;hello12345&#x27;</span><br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr1.isalpha())<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr2.isalpha())<br></code></pre></td></tr></table></figure><ul><li>isdigit()：如果字符串只包含数字则返回 True 否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr1 = <span class="hljs-string">&#x27;aaa12345&#x27;</span><br>mystr2 = <span class="hljs-string">&#x27;12345&#x27;</span><br><br><span class="hljs-comment"># 结果： False</span><br><span class="hljs-built_in">print</span>(mystr1.isdigit())<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr2.isdigit())<br></code></pre></td></tr></table></figure><ul><li>isalnum()：如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True,否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr1 = <span class="hljs-string">&#x27;aaa12345&#x27;</span><br>mystr2 = <span class="hljs-string">&#x27;12345-&#x27;</span><br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr1.isalnum())<br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr2.isalnum())<br></code></pre></td></tr></table></figure><ul><li>isspace()：如果字符串中只包含空白，则返回 True，否则返回 False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">mystr1 = <span class="hljs-string">&#x27;1 2 3 4 5&#x27;</span><br>mystr2 = <span class="hljs-string">&#x27;     &#x27;</span><br><br><span class="hljs-comment"># 结果：False</span><br><span class="hljs-built_in">print</span>(mystr1.isspace())<br><br><span class="hljs-comment"># 结果：True</span><br><span class="hljs-built_in">print</span>(mystr2.isspace())<br></code></pre></td></tr></table></figure><h1 id="五-总结"><a href="#五-总结" class="headerlink" title="五. 总结"></a>五. 总结</h1><ul><li>下标<ul><li>计算机为数据序列中每个元素分配的从0开始的编号</li></ul></li><li>切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">序列名[开始位置下标:结束位置下标:步长]<br></code></pre></td></tr></table></figure><ul><li>常用操作方法<ul><li>find()</li><li>index()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>数据序列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>数据序列</tag>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 循环</title>
    <link href="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/"/>
    <url>/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>了解循环</li><li>while语法【重点】</li><li>while应用</li><li>break和continue</li><li>while循环嵌套【重点】</li><li>while循环嵌套应用【难点】</li><li>for循环</li></ul><h1 id="一-循环简介"><a href="#一-循环简介" class="headerlink" title="一. 循环简介"></a>一. 循环简介</h1><h2 id="1-1-循环的作用"><a href="#1-1-循环的作用" class="headerlink" title="1.1 循环的作用"></a>1.1 循环的作用</h2><blockquote><p>思考：假如我有个女朋友，有一天我们闹矛盾生气了，女朋友说：道歉，说100遍“媳妇儿，我错了”。这个时候程序员会怎么做？</p><p>答：100遍<code>print(&#39;媳妇儿，我错了&#39;)</code></p></blockquote><blockquote><p>思考：复制粘贴100次吗？</p><p>答：重复执行100次一样的代码，程序中循环即可</p></blockquote><p>循环的作用：让代码更高效的重复执行。</p><h2 id="1-2-循环的分类"><a href="#1-2-循环的分类" class="headerlink" title="1.2 循环的分类"></a>1.2 循环的分类</h2><p>在Python中，循环分为<code>while</code>和<code>for</code>两种，最终实现效果相同。</p><h1 id="二-while的语法"><a href="#二-while的语法" class="headerlink" title="二. while的语法"></a>二. while的语法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    条件成立重复执行的代码<span class="hljs-number">1</span><br>    条件成立重复执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><h2 id="2-1-快速体验"><a href="#2-1-快速体验" class="headerlink" title="2.1 快速体验"></a>2.1 快速体验</h2><p>需求：复现重复执行100次<code>print(&#39;媳妇儿，我错了&#39;)</code>（输出更简洁一些，我们这里设置5次）。</p><p>分析：初始值是0次，终点是5次，重复做的事情输出“媳妇儿， 我错了”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 循环的计数器</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;任务结束&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="三-while的应用"><a href="#三-while的应用" class="headerlink" title="三. while的应用"></a>三. while的应用</h1><h2 id="3-1-应用一：计算1-100累加和"><a href="#3-1-应用一：计算1-100累加和" class="headerlink" title="3.1 应用一：计算1-100累加和"></a>3.1 应用一：计算1-100累加和</h2><p>分析：1-100的累加和，即1 + 2 + 3 + 4 +….，即前两个数字的相加结果 + 下一个数字( 前一个数字 + 1)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>    result += i<br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 输出5050</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><blockquote><p>注意：为了验证程序的准确性，可以先改小数值，验证结果正确后，再改成1-100做累加。</p></blockquote><h2 id="3-2-应用二：计算1-100偶数累加和"><a href="#3-2-应用二：计算1-100偶数累加和" class="headerlink" title="3.2 应用二：计算1-100偶数累加和"></a>3.2 应用二：计算1-100偶数累加和</h2><p>分析：1-100的偶数和，即 2 + 4 + 6 + 8….，得到偶数的方法如下：</p><ul><li>偶数即是和2取余结果为0的数字，可以加入条件语句判断是否为偶数，为偶数则累加</li><li>初始值为0 &#x2F; 2 , 计数器每次累加2</li></ul><h3 id="3-2-1-方法一：条件判断和2取余数则累加"><a href="#3-2-1-方法一：条件判断和2取余数则累加" class="headerlink" title="3.2.1 方法一：条件判断和2取余数则累加"></a>3.2.1 方法一：条件判断和2取余数则累加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一：条件判断和2取余数为0则累加计算</span><br>i = <span class="hljs-number">1</span><br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>        result += i<br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 输出2550</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h3 id="3-2-2-方法二：计数器控制"><a href="#3-2-2-方法二：计数器控制" class="headerlink" title="3.2.2 方法二：计数器控制"></a>3.2.2 方法二：计数器控制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法二：计数器控制增量为2</span><br>i = <span class="hljs-number">0</span><br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>    result += i<br>    i += <span class="hljs-number">2</span><br><br><span class="hljs-comment"># 输出2550</span><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h1 id="四、break和continue"><a href="#四、break和continue" class="headerlink" title="四、break和continue"></a>四、break和continue</h1><p>break和continue是循环中满足一定条件退出循环的两种不同方式。</p><h2 id="4-1-理解"><a href="#4-1-理解" class="headerlink" title="4.1 理解"></a>4.1 理解</h2><p>举例：一共吃5个苹果，吃完第一个，吃第二个…，这里”吃苹果”的动作是不是重复执行？</p><p>情况一：如果吃的过程中，吃完第三个吃饱了，则不需要再吃第4个和第五个苹果，即是吃苹果的动作停止，这里就是break控制循环流程，即&#x3D;&#x3D;终止此循环&#x3D;&#x3D;。</p><p>情况二：如果吃的过程中，吃到第三个吃出一个大虫子…,是不是这个苹果就不吃了，开始吃第四个苹果，这里就是continue控制循环流程，即&#x3D;&#x3D;退出当前一次循环继而执行下一次循环代码&#x3D;&#x3D;。</p><h3 id="4-1-1-情况一：break"><a href="#4-1-1-情况一：break" class="headerlink" title="4.1.1 情况一：break"></a>4.1.1 情况一：break</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">4</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;吃饱了不吃了&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;吃了第<span class="hljs-subst">&#123;i&#125;</span>个苹果&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190124114340900.png"></p><h3 id="4-1-2-情况二：continue"><a href="#4-1-2-情况二：continue" class="headerlink" title="4.1.2 情况二：continue"></a>4.1.2 情况二：continue</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;大虫子，第<span class="hljs-subst">&#123;i&#125;</span>个不吃了&#x27;</span>)<br>        <span class="hljs-comment"># 在continue之前一定要修改计数器，否则会陷入死循环</span><br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;吃了第<span class="hljs-subst">&#123;i&#125;</span>个苹果&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190124114514775.png"></p><h1 id="五-while循环嵌套"><a href="#五-while循环嵌套" class="headerlink" title="五. while循环嵌套"></a>五. while循环嵌套</h1><h2 id="5-1-应用场景"><a href="#5-1-应用场景" class="headerlink" title="5.1 应用场景"></a>5.1 应用场景</h2><p>故事梗概：有天女朋友又生气了，惩罚：说3遍“媳妇儿， 我错了”，这个程序是不是循环即可？但如果女朋友说：还要刷今天晚饭的碗，这个程序怎么书写？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿， 我错了&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;刷晚饭的碗&#x27;</span>)<br></code></pre></td></tr></table></figure><p>但如果女朋友还是生气，把这套惩罚要连续3天都执行，有如何书写程序？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    <span class="hljs-keyword">while</span> 条件:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿， 我错了&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;刷晚饭的碗&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="5-2-语法"><a href="#5-2-语法" class="headerlink" title="5.2 语法"></a>5.2 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<br>    ......<br>    <span class="hljs-keyword">while</span> 条件<span class="hljs-number">2</span>:<br>        条件<span class="hljs-number">2</span>成立执行的代码<br>        ......<br></code></pre></td></tr></table></figure><blockquote><p>总结：所谓while循环嵌套，就是一个while里面嵌套一个while的写法，每个while和之前的基础语法是相同的。</p></blockquote><h2 id="5-3-快速体验：复现场景"><a href="#5-3-快速体验：复现场景" class="headerlink" title="5.3 快速体验：复现场景"></a>5.3 快速体验：复现场景</h2><h3 id="5-3-1-代码"><a href="#5-3-1-代码" class="headerlink" title="5.3.1 代码"></a>5.3.1 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">j = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> j &lt; <span class="hljs-number">3</span>:<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;刷晚饭的碗&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;一套惩罚结束----------------&#x27;</span>)<br>    j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="5-3-2-执行结果"><a href="#5-3-2-执行结果" class="headerlink" title="5.3.2 执行结果"></a>5.3.2 执行结果</h3><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104161506542-6589706.png"></p><h3 id="5-3-3-理解执行流程"><a href="#5-3-3-理解执行流程" class="headerlink" title="5.3.3 理解执行流程"></a>5.3.3 理解执行流程</h3><p>当内部循环执行完成之后，再执行下一次外部循环的条件判断。</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/while2.png"></p><h1 id="六-while循环嵌套应用"><a href="#六-while循环嵌套应用" class="headerlink" title="六. while循环嵌套应用"></a>六. while循环嵌套应用</h1><h2 id="6-1-应用一：打印星号-正方形"><a href="#6-1-应用一：打印星号-正方形" class="headerlink" title="6.1 应用一：打印星号(正方形)"></a>6.1 应用一：打印星号(正方形)</h2><h3 id="6-1-1-需求"><a href="#6-1-1-需求" class="headerlink" title="6.1.1 需求"></a>6.1.1 需求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">*****<br>*****<br>*****<br>*****<br>*****<br></code></pre></td></tr></table></figure><h3 id="6-1-2-代码"><a href="#6-1-2-代码" class="headerlink" title="6.1.2 代码"></a>6.1.2 代码</h3><p>分析：一行输出5个星号，重复打印5行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重复打印5行星星</span><br>j = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> j &lt;= <span class="hljs-number">4</span>:<br>    <span class="hljs-comment"># 一行星星的打印</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">4</span>:<br>        <span class="hljs-comment"># 一行内的星星不能换行，取消print默认结束符\n</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 每行结束要换行，这里借助一个空的print，利用print默认结束符换行</span><br>    <span class="hljs-built_in">print</span>()<br>    j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="6-2-应用二：打印星号-三角形"><a href="#6-2-应用二：打印星号-三角形" class="headerlink" title="6.2 应用二：打印星号(三角形)"></a>6.2 应用二：打印星号(三角形)</h2><h3 id="6-2-1-需求"><a href="#6-2-1-需求" class="headerlink" title="6.2.1 需求"></a>6.2.1 需求</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">*<br>**<br>***<br>****<br>*****<br></code></pre></td></tr></table></figure><h3 id="6-2-2-代码"><a href="#6-2-2-代码" class="headerlink" title="6.2.2 代码"></a>6.2.2 代码</h3><p>分析：&#x3D;&#x3D;一行输出星星的个数和行号是相等的&#x3D;&#x3D;，每行：重复打印行号数字个星号，将打印行星号的命令重复执行5次实现打印5行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重复打印5行星星</span><br><span class="hljs-comment"># j表示行号</span><br>j = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> j &lt;= <span class="hljs-number">4</span>:<br>    <span class="hljs-comment"># 一行星星的打印</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># i表示每行里面星星的个数，这个数字要和行号相等所以i要和j联动</span><br>    <span class="hljs-keyword">while</span> i &lt;= j:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;*&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>()<br>    j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="6-3-九九乘法表"><a href="#6-3-九九乘法表" class="headerlink" title="6.3 九九乘法表"></a>6.3 九九乘法表</h2><h3 id="6-3-1-执行结果"><a href="#6-3-1-执行结果" class="headerlink" title="6.3.1 执行结果"></a>6.3.1 执行结果</h3><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104163553616-6590953.png"></p><h3 id="6-3-2-代码"><a href="#6-3-2-代码" class="headerlink" title="6.3.2 代码"></a>6.3.2 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重复打印9行表达式</span><br>j = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> j &lt;= <span class="hljs-number">9</span>:<br>    <span class="hljs-comment"># 打印一行里面的表达式 a * b = a*b</span><br>    i = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> i &lt;= j:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;i&#125;</span>*<span class="hljs-subst">&#123;j&#125;</span>=<span class="hljs-subst">&#123;j*i&#125;</span>&#x27;</span>, end=<span class="hljs-string">&#x27;\t&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>()<br>    j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="七、for循环"><a href="#七、for循环" class="headerlink" title="七、for循环"></a>七、for循环</h1><h2 id="7-1-语法"><a href="#7-1-语法" class="headerlink" title="7.1 语法"></a>7.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 临时变量 <span class="hljs-keyword">in</span> 序列:<br>    重复执行的代码<span class="hljs-number">1</span><br>    重复执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><h2 id="7-2-快速体验"><a href="#7-2-快速体验" class="headerlink" title="7.2 快速体验"></a>7.2 快速体验</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104164152311-6591312.png"></p><h2 id="7-3-break"><a href="#7-3-break" class="headerlink" title="7.3 break"></a>7.3 break</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;e&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;遇到e不打印&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104165242555-6591962.png"></p><h2 id="7-4-continue"><a href="#7-4-continue" class="headerlink" title="7.4 continue"></a>7.4 continue</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;e&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;遇到e不打印&#x27;</span>)<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104165413160-6592053.png"></p><h1 id="八-else"><a href="#八-else" class="headerlink" title="八. else"></a>八. else</h1><p>循环可以和else配合使用，else下方缩进的代码指的是&#x3D;&#x3D;当循环正常结束之后要执行的代码&#x3D;&#x3D;。</p><h2 id="8-1-while…else"><a href="#8-1-while…else" class="headerlink" title="8.1 while…else"></a>8.1 while…else</h2><p>需求：女朋友生气了，要惩罚：连续说5遍“媳妇儿，我错了”，如果道歉正常完毕女朋友就原谅我了，这个程序怎么写？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿原谅我了...&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>思考： 这个print是不是没有循环也能执行？</p></blockquote><h3 id="8-1-1-语法"><a href="#8-1-1-语法" class="headerlink" title="8.1.1 语法"></a>8.1.1 语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    条件成立重复执行的代码<br><span class="hljs-keyword">else</span>:<br>    循环正常结束之后要执行的代码<br></code></pre></td></tr></table></figure><h3 id="8-1-2-示例"><a href="#8-1-2-示例" class="headerlink" title="8.1.2 示例"></a>8.1.2 示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190125111816497.png"></p><h3 id="8-1-3-退出循环的方式"><a href="#8-1-3-退出循环的方式" class="headerlink" title="8.1.3 退出循环的方式"></a>8.1.3 退出循环的方式</h3><p>需求：女朋友生气，要求道歉5遍：媳妇儿，我错了。道歉到第三遍的时候，媳妇埋怨这一遍说的不真诚，是不是就是要退出循环了？这个退出有两种可能性：</p><ul><li>更生气，不打算原谅，也不需要道歉了，程序如何书写？</li><li>只一遍不真诚，可以忍受，继续下一遍道歉，程序如何书写？</li></ul><ol><li>break</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这遍说的不真诚&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190125111952693.png"></p><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><ol start="2"><li>continue</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">i = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这遍说的不真诚&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇儿，我错了&#x27;</span>)<br>    i += <span class="hljs-number">1</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;媳妇原谅我了，真开心，哈哈哈哈&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190125112111170.png"></p><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h2 id="8-2-for…else"><a href="#8-2-for…else" class="headerlink" title="8.2 for…else"></a>8.2 for…else</h2><h3 id="8-2-1-语法"><a href="#8-2-1-语法" class="headerlink" title="8.2.1 语法"></a>8.2.1 语法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 临时变量 <span class="hljs-keyword">in</span> 序列:<br>    重复执行的代码<br>    ...<br><span class="hljs-keyword">else</span>:<br>    循环正常结束之后要执行的代码<br></code></pre></td></tr></table></figure><blockquote><p>所谓else指的是循环正常结束之后要执行的代码，即如果是break终止循环的情况，else下方缩进的代码将不执行。</p></blockquote><h3 id="8-2-2-示例"><a href="#8-2-2-示例" class="headerlink" title="8.2.2 示例"></a>8.2.2 示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;循环正常结束之后执行的代码&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="8-2-3-退出循环的方式"><a href="#8-2-3-退出循环的方式" class="headerlink" title="8.2.3 退出循环的方式"></a>8.2.3 退出循环的方式</h3><ol><li>break终止循环</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;e&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;遇到e不打印&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;循环正常结束之后执行的代码&#x27;</span>)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104165551501-6592151.png"></p><blockquote><p>没有执行else缩进的代码。</p></blockquote><ol start="2"><li>continue控制循环</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">str1 = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> str1:<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;e&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;遇到e不打印&#x27;</span>)<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;循环正常结束之后执行的代码&#x27;</span>)<br></code></pre></td></tr></table></figure><p>执行结果：</p><p><img src="/2023/01/16/Python-%E5%BE%AA%E7%8E%AF/image-20190104165714740-6592234.png"></p><blockquote><p>因为continue是退出当前一次循环，继续下一次循环，所以该循环在continue控制下是可以正常结束的，当循环结束后，则执行了else缩进的代码。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>循环的作用：控制代码重复执行</li><li>while语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件:<br>    条件成立重复执行的代码<span class="hljs-number">1</span><br>    条件成立重复执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><ul><li>while循环嵌套语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<br>    ......<br>    <span class="hljs-keyword">while</span> 条件<span class="hljs-number">2</span>:<br>        条件<span class="hljs-number">2</span>成立执行的代码<br>        ......<br></code></pre></td></tr></table></figure><ul><li>for循环语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> 临时变量 <span class="hljs-keyword">in</span> 序列:<br>    重复执行的代码<span class="hljs-number">1</span><br>    重复执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><ul><li>break退出整个循环</li><li>continue退出本次循环，继续执行下一次重复执行的代码</li><li>else<ul><li>while和for都可以配合else使用</li><li>else下方缩进的代码含义：当循环正常结束后执行的代码</li><li>break终止循环不会执行else下方缩进的代码</li><li>continue退出循环的方式执行else下方缩进的代码</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>循环</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 条件语句</title>
    <link href="/2023/01/16/Python-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/01/16/Python-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="一-了解条件语句"><a href="#一-了解条件语句" class="headerlink" title="一. 了解条件语句"></a>一. 了解条件语句</h1><p>假设一个场景：</p><ul><li>同学们这个年龄去过网吧吗？</li><li>去网吧进门想要上网必须做的一件事是做什么？（考虑重点）</li><li>为什么要把身份证给工作人员？</li><li>是不是就是为了判断是否成年？</li><li>是不是如果成年可以上网？如果不成年则不允许上网？</li></ul><p>其实这里所谓的判断就是条件语句，即<strong>条件成立执行某些代码，条件不成立则不执行这些代码</strong>。</p><h1 id="二-if-语法"><a href="#二-if-语法" class="headerlink" title="二. if 语法"></a>二. if 语法</h1><h2 id="2-1-语法"><a href="#2-1-语法" class="headerlink" title="2.1 语法"></a>2.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>    条件成立执行的代码<span class="hljs-number">1</span><br>    条件成立执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><h1 id="三-实例：上网"><a href="#三-实例：上网" class="headerlink" title="三. 实例：上网"></a>三. 实例：上网</h1><p>需求分析：如果用户年龄大于等于18岁，即成年，输出”已经成年，可以上网”。</p><h2 id="3-1-简单版"><a href="#3-1-简单版" class="headerlink" title="3.1 简单版"></a>3.1 简单版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">20</span><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已经成年，可以上网&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系统关闭&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="3-2-进阶版"><a href="#3-2-进阶版" class="headerlink" title="3.2 进阶版"></a>3.2 进阶版</h2><p>新增需求：用户可以输出自己的年龄，然后系统进行判断是否成年，成年则输出”您的年龄是’用户输入的年龄’，已经成年，可以上网”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># input接受用户输入的数据是字符串类型，条件是age和整型18做判断，所以这里要int转换数据类型</span><br>age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的年龄：&#x27;</span>))<br><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系统关闭&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="四-if…else…"><a href="#四-if…else…" class="headerlink" title="四. if…else…"></a>四. if…else…</h1><p>作用：条件成立执行if下方的代码; 条件不成立执行else下方的代码。</p><blockquote><p>思考：网吧上网的实例，如果成年，允许上网，如果不成年呢？是不是应该回复用户不能上网？</p></blockquote><h2 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>    条件成立执行的代码<span class="hljs-number">1</span><br>    条件成立执行的代码<span class="hljs-number">2</span><br>    ......<br><span class="hljs-keyword">else</span>:<br>    条件不成立执行的代码<span class="hljs-number">1</span><br>    条件不成立执行的代码<span class="hljs-number">2</span><br>    ......<br></code></pre></td></tr></table></figure><h2 id="4-2-实用版：网吧上网"><a href="#4-2-实用版：网吧上网" class="headerlink" title="4.2 实用版：网吧上网"></a>4.2 实用版：网吧上网</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的年龄：&#x27;</span>))<br><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,已经成年，可以上网&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,未成年，请自行回家写作业&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;系统关闭&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：如果条件成立执行了某些代码，那么其他的情况的代码将不会执行。</p></blockquote><h1 id="五、多重判断"><a href="#五、多重判断" class="headerlink" title="五、多重判断"></a>五、多重判断</h1><blockquote><p>思考：中国合法工作年龄为18-60岁，即如果年龄小于18的情况为童工，不合法；如果年龄在18-60岁之间为合法工龄；大于60岁为法定退休年龄。</p></blockquote><h2 id="5-1-语法"><a href="#5-1-语法" class="headerlink" title="5.1 语法"></a>5.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<span class="hljs-number">1</span><br>    条件<span class="hljs-number">1</span>成立执行的代码<span class="hljs-number">2</span><br>    ......<br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">2</span>：<br>条件<span class="hljs-number">2</span>成立执行的代码<span class="hljs-number">1</span><br>    条件<span class="hljs-number">2</span>成立执行的代码<span class="hljs-number">2</span><br>    ......<br>......<br><span class="hljs-keyword">else</span>:<br>    以上条件都不成立执行执行的代码<br></code></pre></td></tr></table></figure><blockquote><p>多重判断也可以和else配合使用。一般else放到整个if语句的最后，表示以上条件都不成立的时候执行的代码。</p></blockquote><h2 id="5-2-实例：工龄判断"><a href="#5-2-实例：工龄判断" class="headerlink" title="5.2 实例：工龄判断"></a>5.2 实例：工龄判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的年龄：&#x27;</span>))<br><span class="hljs-keyword">if</span> age &lt; <span class="hljs-number">18</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,童工一枚&#x27;</span>)<br><span class="hljs-keyword">elif</span> (age &gt;= <span class="hljs-number">18</span>) <span class="hljs-keyword">and</span> (age &lt;= <span class="hljs-number">60</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,合法工龄&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &gt; <span class="hljs-number">60</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您的年龄是<span class="hljs-subst">&#123;age&#125;</span>,可以退休&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>拓展：<code>age &gt;= 18 and age &lt;= 60</code>可以化简为<code>18 &lt;= age &lt;= 60</code>。</p></blockquote><h1 id="六、if嵌套"><a href="#六、if嵌套" class="headerlink" title="六、if嵌套"></a>六、if嵌套</h1><blockquote><p>思考：坐公交：如果有钱可以上车，没钱不能上车；上车后如果有空座，则可以坐下；如果没空座，就要站着。怎么书写程序？</p></blockquote><h2 id="6-1-语法"><a href="#6-1-语法" class="headerlink" title="6.1 语法"></a>6.1 语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>：<br>条件<span class="hljs-number">1</span>成立执行的代码<br>    条件<span class="hljs-number">1</span>成立执行的代码<br>    <br>    <span class="hljs-keyword">if</span> 条件<span class="hljs-number">2</span>：<br>    条件<span class="hljs-number">2</span>成立执行的代码<br>        条件<span class="hljs-number">2</span>成立执行的代码<br>    <br></code></pre></td></tr></table></figure><blockquote><p>注意：条件2的if也是处于条件1成立执行的代码的缩进关系内部。</p></blockquote><h2 id="6-2-实例：坐公交"><a href="#6-2-实例：坐公交" class="headerlink" title="6.2 实例：坐公交"></a>6.2 实例：坐公交</h2><h3 id="6-2-1-判断是否能上车"><a href="#6-2-1-判断是否能上车" class="headerlink" title="6.2.1 判断是否能上车"></a>6.2.1 判断是否能上车</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 如果有钱，则可以上车</span><br><span class="hljs-string">    2. 上车后，如果有空座，可以坐下</span><br><span class="hljs-string">    上车后，如果没有空座，则站着等空座位</span><br><span class="hljs-string">如果没钱，不能上车</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱</span><br>money = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> money == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="6-2-2-判断是否能坐下"><a href="#6-2-2-判断是否能坐下" class="headerlink" title="6.2.2 判断是否能坐下"></a>6.2.2 判断是否能坐下</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">1. 如果有钱，则可以上车</span><br><span class="hljs-string">    2. 上车后，如果有空座，可以坐下</span><br><span class="hljs-string">    上车后，如果没有空座，则站着等空座位</span><br><span class="hljs-string">如果没钱，不能上车</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 假设用 money = 1 表示有钱, money = 0表示没有钱; seat = 1 表示有空座，seat = 0 表示没有空座</span><br>money = <span class="hljs-number">1</span><br>seat = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> money == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;土豪，不差钱，顺利上车&#x27;</span>)<br>    <span class="hljs-keyword">if</span> seat == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;有空座，可以坐下&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没有空座，站等&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没钱，不能上车，追着公交车跑&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="七-应用：猜拳游戏"><a href="#七-应用：猜拳游戏" class="headerlink" title="七. 应用：猜拳游戏"></a>七. 应用：猜拳游戏</h1><p>需求分析：</p><ul><li><p>参与游戏的角色</p><ul><li>玩家<ul><li>手动出拳</li></ul></li><li>电脑<ul><li>随机出拳</li></ul></li></ul></li><li><p>判断输赢</p><ul><li>玩家获胜</li></ul><table><thead><tr><th>玩家</th><th>电脑</th></tr></thead><tbody><tr><td>石头</td><td>剪刀</td></tr><tr><td>剪刀</td><td>布</td></tr><tr><td>布</td><td>石头</td></tr></tbody></table><ul><li>平局<ul><li>玩家出拳 和 电脑出拳相同</li></ul></li><li>电脑获胜</li></ul></li></ul><p>随机做法：</p><pre><code class="hljs"> 1. 导出random模块 2. random.randint(开始,结束)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">提示：0-石头，1-剪刀，2-布</span><br><span class="hljs-string">1. 出拳</span><br><span class="hljs-string">玩家输入出拳</span><br><span class="hljs-string">电脑随机出拳</span><br><span class="hljs-string"></span><br><span class="hljs-string">2. 判断输赢</span><br><span class="hljs-string">玩家获胜</span><br><span class="hljs-string">平局</span><br><span class="hljs-string">电脑获胜</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># 导入random模块</span><br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-comment"># 计算电脑出拳的随机数字</span><br>computer = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(computer)<br><br>player = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请出拳：0-石头，1-剪刀，2-布：&#x27;</span>))<br><br><span class="hljs-comment"># 玩家胜利 p0:c1 或 p1:c2 或 p2:c0</span><br><span class="hljs-keyword">if</span> (player == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> computer == <span class="hljs-number">1</span>) <span class="hljs-keyword">or</span> (player == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> computer == <span class="hljs-number">2</span>) <span class="hljs-keyword">or</span> (player == <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> computer == <span class="hljs-number">0</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;玩家获胜&#x27;</span>)<br><br><span class="hljs-comment"># 平局：玩家 == 电脑</span><br><span class="hljs-keyword">elif</span> player == computer:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;平局&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;电脑获胜&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="八-三目运算符"><a href="#八-三目运算符" class="headerlink" title="八.  三目运算符"></a>八.  三目运算符</h1><p>三目运算符也叫三元运算符。</p><p>语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">值<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> 条件 <span class="hljs-keyword">else</span> 值<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>快速体验：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br><br>c = a <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> b<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>if语句语法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>    条件成立执行的代码<br></code></pre></td></tr></table></figure><ul><li>if…else…</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件:<br>    条件成立执行的代码<br><span class="hljs-keyword">else</span>:<br>    条件不成立执行的代码<br></code></pre></td></tr></table></figure><ul><li>多重判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<br><span class="hljs-keyword">elif</span> 条件<span class="hljs-number">2</span>:<br>    条件<span class="hljs-number">2</span>成立执行的代码<br><span class="hljs-keyword">else</span>:<br>    以上条件都不成立执行的代码<br></code></pre></td></tr></table></figure><ul><li>if嵌套</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> 条件<span class="hljs-number">1</span>:<br>    条件<span class="hljs-number">1</span>成立执行的代码<br>    <span class="hljs-keyword">if</span> 条件<span class="hljs-number">2</span>:<br>        条件<span class="hljs-number">2</span>成立执行的代码<br>        ....<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>条件语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码复现：GFPGAN</title>
    <link href="/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AGFPGAN/"/>
    <url>/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9AGFPGAN/</url>
    
    <content type="html"><![CDATA[<p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python inference_gfpgan.py<br></code></pre></td></tr></table></figure><p>带参数（默认）</p><p>带参数（默认）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python inference_gfpgan.py -i inputs/whole_imgs -o results -v 1.3 -s 2<br></code></pre></td></tr></table></figure><p>说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">Usage: python inference_gfpgan.py -i inputs/whole_imgs -o results -v 1.3 -s 2 [options]...<br><br>  -h                   show this help<br>  -i input             Input image or folder. Default: inputs/whole_imgs<br>  -o output            Output folder. Default: results<br>  -v version           GFPGAN model version. Option: 1 | 1.2 | 1.3. Default: 1.3<br>  -s upscale           The final upsampling scale of the image. Default: 2<br>  -bg_upsampler        background upsampler. Default: realesrgan<br>  -bg_tile             Tile size for background sampler, 0 for no tile during testing. Default: 400<br>  -suffix              Suffix of the restored faces<br>  -only_center_face    Only restore the center face<br>  -aligned             Input are aligned faces<br>  -ext                 Image extension. Options: auto | jpg | png, auto means using the same extension as inputs. Default: auto<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GFPGAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码复现：CycleGAN and pix2pix</title>
    <link href="/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ACycleGAN-and-pix2pix/"/>
    <url>/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ACycleGAN-and-pix2pix/</url>
    
    <content type="html"><![CDATA[<h4 id="安装visdom"><a href="#安装visdom" class="headerlink" title="安装visdom"></a>安装visdom</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install visdom<br></code></pre></td></tr></table></figure><p>开启visdom服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m visdom.server<br></code></pre></td></tr></table></figure><h4 id="训练数据集（数据集名“xxx”更改自己的数据集名称）"><a href="#训练数据集（数据集名“xxx”更改自己的数据集名称）" class="headerlink" title="训练数据集（数据集名“xxx”更改自己的数据集名称）"></a>训练数据集（数据集名“xxx”更改自己的数据集名称）</h4><p>cyclegan训练命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python train.py --dataroot ./datasets/xxx --name xxx_cyclegan --model cycle_gan<br></code></pre></td></tr></table></figure><p>pix2pix训练命令（AtoB表示由A数据集训练生成B数据集）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python train.py --dataroot ./datasets/xxx --name xxx_pix2pix --model pix2pix --direction AtoB<br></code></pre></td></tr></table></figure><h4 id="测试训练好的模型"><a href="#测试训练好的模型" class="headerlink" title="测试训练好的模型"></a>测试训练好的模型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python test.py --dataroot ./datasets/xxx --name xxx_pix2pix --model pix2pix<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CycleGAN and pix2pix</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>conda 虚拟环境配置</title>
    <link href="/2023/01/14/conda-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/01/14/conda-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>以管理员的身份打开anaconda prompt</p><p>查看显卡支持的cuda版本<br>下载安装对应版本的cuda、cuDNN</p><p>CUDA软件（官网地址）：<a href="https://developer.nvidia.com/cuda-11.0-download-archive?target_os=Windows&target_arch=x86_64&target_version=10&target_type=exenetwork">https://developer.nvidia.com/cuda-11.0-download-archive?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exenetwork</a><br>cuDNN（官网地址）：<a href="https://developer.nvidia.com/compute/machine-learning/cudnn/secure/8.0.2.39/11.0_20200724/cudnn-11.0-windows-x64-v8.0.2.39.zip">https://developer.nvidia.com/compute/machine-learning/cudnn/secure/8.0.2.39/11.0_20200724/cudnn-11.0-windows-x64-v8.0.2.39.zip</a></p><p>创建虚拟环境路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create --prefix D:\anaconda\conda\envs<br></code></pre></td></tr></table></figure><p>激活虚拟环境路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate D:\anaconda\conda\envs<br></code></pre></td></tr></table></figure><p>查看虚拟环境列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda env list<br></code></pre></td></tr></table></figure><p>创建虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n xxx python=3.8<br></code></pre></td></tr></table></figure><p>激活虚拟环境（在项目根路径下打开cmd）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate xxx<br></code></pre></td></tr></table></figure><p>退出当前环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda deactivate<br></code></pre></td></tr></table></figure><p>删除虚拟环境（xxx为虚拟环境名）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda remove -n xxx --all<br></code></pre></td></tr></table></figure><p>安装对应版本的python（创建虚拟环境时没有指定python时需要安装）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install python==3.8.5<br></code></pre></td></tr></table></figure><p>安装对应版本pytorch（要和cuda的版本对应）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install torch===1.7.1+cu110 torchvision===0.8.2+cu110 torchaudio===0.7.2 -f https://download.pytorch.org/whl/torch_stable.html -i https://pypi.douban.com/simple/<br></code></pre></td></tr></table></figure><p>安装程序所需依赖（在requirement.txt所在文件夹路径执行cmd命令）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>查看已安装依赖包列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda list<br></code></pre></td></tr></table></figure><p>释放GPU内存，清除GPU中的张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br>torch.cuda.empty_cache()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码复现：Bringing Old Photos Back to Life</title>
    <link href="/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ABringing-Old-Photos-Back-to-Life/"/>
    <url>/2023/01/14/%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%8E%B0%EF%BC%9ABringing-Old-Photos-Back-to-Life/</url>
    
    <content type="html"><![CDATA[<p>不知道为什么cuda报错，先用CPU运行</p><p>修复带划痕&#x2F;有破损的老照片（使用 RTX 2080Ti 最大可修复 512x512 的照片）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python run.py --input_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\test_images\old_w_scratch --output_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\output --with_scratch --GPU -1<br></code></pre></td></tr></table></figure><p>改进老照片的色彩或清晰度（使用 RTX 2080Ti 最大可改善 1024x1024 的照片）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python run.py --input_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\test_images\old --output_folder E:\AI_MyProject\project_code\Bringing-Old-Photos-Back-to-Life\output --GPU -1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Old Photos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python运算符</title>
    <link href="/2023/01/14/Python%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/01/14/Python%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="运算符的分类"><a href="#运算符的分类" class="headerlink" title="运算符的分类"></a>运算符的分类</h1><ul><li>算数运算符</li><li>赋值运算符</li><li>复合赋值运算符</li><li>比较运算符</li><li>逻辑运算符</li></ul><h2 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符"></a>1. 算数运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">加</td><td>1 + 1 输出结果为 2</td></tr><tr><td align="center">-</td><td align="center">减</td><td>1-1 输出结果为 0</td></tr><tr><td align="center">*</td><td align="center">乘</td><td>2 * 2 输出结果为 4</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td><td>10 &#x2F; 2 输出结果为 5</td></tr><tr><td align="center">&#x2F;&#x2F;</td><td align="center">整除</td><td>9 &#x2F;&#x2F; 4 输出结果为2</td></tr><tr><td align="center">%</td><td align="center">取余</td><td>9 % 4 输出结果为 1</td></tr><tr><td align="center">**</td><td align="center">指数</td><td>2 ** 4 输出结果为 16，即 2 * 2 * 2 * 2</td></tr><tr><td align="center">()</td><td align="center">小括号</td><td>小括号用来提高运算优先级，即 (1 + 2) * 3 输出结果为 9</td></tr></tbody></table><blockquote><p>注意：</p></blockquote><ul><li>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li></ul><h2 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2. 赋值运算符"></a>2. 赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td><td>将<code>=</code>右侧的结果赋值给等号左侧的变量</td></tr></tbody></table><ul><li>单个变量赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><ul><li>多个变量赋值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">num1, float1, str1 = <span class="hljs-number">10</span>, <span class="hljs-number">0.5</span>, <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-built_in">print</span>(num1)<br><span class="hljs-built_in">print</span>(float1)<br><span class="hljs-built_in">print</span>(str1)<br></code></pre></td></tr></table></figure><ul><li>多变量赋相同值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = b = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><h2 id="3-复合赋值运算符"><a href="#3-复合赋值运算符" class="headerlink" title="3. 复合赋值运算符"></a>3. 复合赋值运算符</h2><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+&#x3D;</td><td>加法赋值运算符</td><td>c +&#x3D; a 等价于 c &#x3D; c + a</td></tr><tr><td>-&#x3D;</td><td>减法赋值运算符</td><td>c -&#x3D; a 等价于 c &#x3D; c- a</td></tr><tr><td>*&#x3D;</td><td>乘法赋值运算符</td><td>c *&#x3D; a 等价于 c &#x3D; c * a</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值运算符</td><td>c &#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F; a</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>整除赋值运算符</td><td>c &#x2F;&#x2F;&#x3D; a 等价于 c &#x3D; c &#x2F;&#x2F; a</td></tr><tr><td>%&#x3D;</td><td>取余赋值运算符</td><td>c %&#x3D; a 等价于 c &#x3D; c % a</td></tr><tr><td>**&#x3D;</td><td>幂赋值运算符</td><td>c ** &#x3D; a 等价于 c &#x3D; c ** a</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br>a += <span class="hljs-number">1</span><br><span class="hljs-comment"># 输出101  a = a + 1,最终a = 100 + 1</span><br><span class="hljs-built_in">print</span>(a)<br><br>b = <span class="hljs-number">2</span><br>b *= <span class="hljs-number">3</span><br><span class="hljs-comment"># 输出6  b = b * 3,最终b = 2 * 3</span><br><span class="hljs-built_in">print</span>(b)<br><br>c = <span class="hljs-number">10</span><br>c += <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br><span class="hljs-comment"># 输出13, 先算运算符右侧1 + 2 = 3， c += 3 , 推导出c = 10 + 3</span><br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h2 id="4-比较运算符"><a href="#4-比较运算符" class="headerlink" title="4. 比较运算符"></a>4. 比较运算符</h2><p>比较运算符也叫关系运算符， 通常用来判断。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>判断相等。如果两个操作数的结果相等，则条件结果为真(True)，否则条件结果为假(False)</td><td>如a&#x3D;3,b&#x3D;3，则（a &#x3D;&#x3D; b) 为 True</td></tr><tr><td>!&#x3D;</td><td>不等于 。如果两个操作数的结果不相等，则条件为真(True)，否则条件结果为假(False)</td><td>如a&#x3D;3,b&#x3D;3，则（a &#x3D;&#x3D; b) 为 True如a&#x3D;1,b&#x3D;3，则(a !&#x3D; b) 为 True</td></tr><tr><td>&gt;</td><td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a&#x3D;7,b&#x3D;3，则(a &gt; b) 为 True</td></tr><tr><td>&lt;</td><td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a&#x3D;7,b&#x3D;3，则(a &lt; b) 为 False</td></tr><tr><td>&gt;&#x3D;</td><td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td><td>如a&#x3D;7,b&#x3D;3，则(a &lt; b) 为 False如a&#x3D;3,b&#x3D;3，则(a &gt;&#x3D; b) 为 True</td></tr><tr><td>&lt;&#x3D;</td><td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td><td>如a&#x3D;3,b&#x3D;3，则(a &lt;&#x3D; b) 为 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">7</span><br>b = <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(a == b)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a != b)  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a &lt; b)   <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a &gt; b)   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(a &lt;= b)  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>(a &gt;= b)  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5. 逻辑运算符"></a>5. 逻辑运算符</h2><table><thead><tr><th>运算符</th><th>逻辑表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>and</td><td>x and y</td><td>布尔”与”：如果 x 为 False，x and y 返回 False，否则它返回 y 的值。</td><td>True and False， 返回 False。</td></tr><tr><td>or</td><td>x or y</td><td>布尔”或”：如果 x 是 True，它返回 True，否则它返回 y 的值。</td><td>False or True， 返回 True。</td></tr><tr><td>not</td><td>not x</td><td>布尔”非”：如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。</td><td>not True 返回 False, not False 返回 True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">1</span><br>b = <span class="hljs-number">2</span><br>c = <span class="hljs-number">3</span><br><span class="hljs-built_in">print</span>((a &lt; b) <span class="hljs-keyword">and</span> (b &lt; c))  <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>((a &gt; b) <span class="hljs-keyword">and</span> (b &lt; c))  <span class="hljs-comment"># False</span><br><span class="hljs-built_in">print</span>((a &gt; b) <span class="hljs-keyword">or</span> (b &lt; c))   <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-keyword">not</span> (a &gt; b))          <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h3 id="5-1-拓展"><a href="#5-1-拓展" class="headerlink" title="5.1 拓展"></a>5.1 拓展</h3><p>数字之间的逻辑运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">0</span><br>b = <span class="hljs-number">1</span><br>c = <span class="hljs-number">2</span><br><br><span class="hljs-comment"># and运算符，只要有一个值为0，则结果为0，否则结果为最后一个非0数字</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">and</span> b)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">and</span> a)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">and</span> c)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(c <span class="hljs-keyword">and</span> a)  <span class="hljs-comment"># 0</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">and</span> c)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(c <span class="hljs-keyword">and</span> b)  <span class="hljs-comment"># 1</span><br><br><span class="hljs-comment"># or运算符，只有所有值为0结果才为0，否则结果为第一个非0数字</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">or</span> b)  <span class="hljs-comment"># 1</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">or</span> c)  <span class="hljs-comment"># 2</span><br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">or</span> c)  <span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>算数运算的优先级<ul><li>混合运算优先级顺序：<code>()</code>高于 <code>**</code> 高于 <code>*</code> <code>/</code> <code>//</code> <code>%</code> 高于 <code>+</code> <code>-</code></li></ul></li><li>赋值运算符<ul><li>&#x3D;</li></ul></li><li>复合赋值运算符<ul><li>+&#x3D;</li><li>-&#x3D;</li><li>优先级<ol><li>先算复合赋值运算符右侧的表达式</li><li>再算复合赋值运算的算数运算</li><li>最后算赋值运算</li></ol></li></ul></li><li>比较运算符<ul><li>判断相等： &#x3D;&#x3D; </li><li>大于等于： &gt;&#x3D;</li><li>小于等于：&lt;&#x3D;</li><li>不等于： !&#x3D;</li></ul></li><li>逻辑运算符<ul><li>与： and</li><li>或：or</li><li>非：not</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>运算符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python转换数据类型</title>
    <link href="/2023/01/14/Python%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/01/14/Python%E8%BD%AC%E6%8D%A2%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一-转换数据类型的作用"><a href="#一-转换数据类型的作用" class="headerlink" title="一. 转换数据类型的作用"></a>一. 转换数据类型的作用</h1><p>问：input()接收用户输入的数据都是字符串类型，如果用户输入1，想得到整型该如何操作？</p><p>答：转换数据类型即可，即将字符串类型转换成整型。</p><h1 id="二-转换数据类型的函数"><a href="#二-转换数据类型的函数" class="headerlink" title="二. 转换数据类型的函数"></a>二. 转换数据类型的函数</h1><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;int(x [,base ])&#x3D;&#x3D;</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">&#x3D;&#x3D;float(x )&#x3D;&#x3D;</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">complex(real [,imag ])</td><td align="center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td align="center">&#x3D;&#x3D;str(x )&#x3D;&#x3D;</td><td align="center">将对象 x 转换为字符串</td></tr><tr><td align="center">repr(x )</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center">&#x3D;&#x3D;eval(str )&#x3D;&#x3D;</td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="center">&#x3D;&#x3D;tuple(s )&#x3D;&#x3D;</td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center">&#x3D;&#x3D;list(s )&#x3D;&#x3D;</td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">chr(x )</td><td align="center">将一个整数转换为一个Unicode字符</td></tr><tr><td align="center">ord(x )</td><td align="center">将一个字符转换为它的ASCII整数值</td></tr><tr><td align="center">hex(x )</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x )</td><td align="center">将一个整数转换为一个八进制字符串</td></tr><tr><td align="center">bin(x )</td><td align="center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><h1 id="三-快速体验"><a href="#三-快速体验" class="headerlink" title="三. 快速体验"></a>三. 快速体验</h1><p>需求：input接收用户输入，用户输入“1”，将这个数据1转换成整型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. 接收用户输入</span><br>num = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的幸运数字：&#x27;</span>)<br><br><span class="hljs-comment"># 2. 打印结果</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;您的幸运数字是<span class="hljs-subst">&#123;num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-comment"># 3. 检测接收到的用户输入的数据类型 -- str类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(num))<br><br><span class="hljs-comment"># 4. 转换数据类型为整型 -- int类型</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">int</span>(num)))<br></code></pre></td></tr></table></figure><h1 id="四-实验"><a href="#四-实验" class="headerlink" title="四. 实验"></a>四. 实验</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1. float() -- 转换成浮点型</span><br>num1 = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">float</span>(num1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">float</span>(num1)))<br><br><span class="hljs-comment"># 2. str() -- 转换成字符串类型</span><br>num2 = <span class="hljs-number">10</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">str</span>(num2)))<br><br><span class="hljs-comment"># 3. tuple() -- 将一个序列转换成元组</span><br>list1 = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(list1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">tuple</span>(list1)))<br><br><br><span class="hljs-comment"># 4. list() -- 将一个序列转换成列表</span><br>t1 = (<span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">300</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(t1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">list</span>(t1)))<br><br><span class="hljs-comment"># 5. eval() -- 将字符串中的数据转换成Python表达式原本类型</span><br>str1 = <span class="hljs-string">&#x27;10&#x27;</span><br>str2 = <span class="hljs-string">&#x27;[1, 2, 3]&#x27;</span><br>str3 = <span class="hljs-string">&#x27;(1000, 2000, 3000)&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str1)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str2)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-built_in">eval</span>(str3)))<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>转换数据类型常用的函数<ul><li>int()</li><li>float()</li><li>str()</li><li>list()</li><li>tuple()</li><li>eval()</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>转换数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python输入</title>
    <link href="/2023/01/14/Python%E8%BE%93%E5%85%A5/"/>
    <url>/2023/01/14/Python%E8%BE%93%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="一-输入"><a href="#一-输入" class="headerlink" title="一. 输入"></a>一. 输入</h1><p>在Python中，程序接收用户输入的数据的功能即是输入。</p><h2 id="1-2-输入的语法"><a href="#1-2-输入的语法" class="headerlink" title="1.2 输入的语法"></a>1.2 输入的语法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;提示信息&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="1-3-输入的特点"><a href="#1-3-输入的特点" class="headerlink" title="1.3 输入的特点"></a>1.3 输入的特点</h2><ul><li>当程序执行到<code>input</code>，等待用户输入，输入完成之后才继续向下执行。</li><li>在Python中，<code>input</code>接收用户输入后，一般存储到变量，方便使用。</li><li>在Python中，<code>input</code>会把接收到的任意用户输入的数据都当做字符串处理。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入您的密码：&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;您输入的密码是<span class="hljs-subst">&#123;password&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(password))<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>输入功能<ul><li>input(‘提示文字’)</li></ul></li><li>输入的特点<ul><li>一般将input接收的数据存储到变量</li><li>input接收的任何数据默认都是字符串数据类型</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>输入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python输出</title>
    <link href="/2023/01/14/Python%E8%BE%93%E5%87%BA/"/>
    <url>/2023/01/14/Python%E8%BE%93%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>作用：程序输出内容给用户</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)<br><br>age = <span class="hljs-number">18</span><br><span class="hljs-built_in">print</span>(age)<br><br><span class="hljs-comment"># 需求：输出“今年我的年龄是18岁”</span><br></code></pre></td></tr></table></figure><h1 id="一-格式化输出"><a href="#一-格式化输出" class="headerlink" title="一.  格式化输出"></a>一.  格式化输出</h1><p>所谓的格式化输出即按照一定的格式输出内容。</p><h3 id="1-1-格式化符号"><a href="#1-1-格式化符号" class="headerlink" title="1.1 格式化符号"></a>1.1 格式化符号</h3><table><thead><tr><th align="center">格式符号</th><th align="center">转换</th></tr></thead><tbody><tr><td align="center">&#x3D;&#x3D;%s&#x3D;&#x3D;</td><td align="center">字符串</td></tr><tr><td align="center">&#x3D;&#x3D;%d&#x3D;&#x3D;</td><td align="center">有符号的十进制整数</td></tr><tr><td align="center">&#x3D;&#x3D;%f&#x3D;&#x3D;</td><td align="center">浮点数</td></tr><tr><td align="center">%c</td><td align="center">字符</td></tr><tr><td align="center">%u</td><td align="center">无符号十进制整数</td></tr><tr><td align="center">%o</td><td align="center">八进制整数</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数（小写ox）</td></tr><tr><td align="center">%X</td><td align="center">十六进制整数（大写OX）</td></tr><tr><td align="center">%e</td><td align="center">科学计数法（小写’e’）</td></tr><tr><td align="center">%E</td><td align="center">科学计数法（大写’E’）</td></tr><tr><td align="center">%g</td><td align="center">%f和%e的简写</td></tr><tr><td align="center">%G</td><td align="center">%f和%E的简写</td></tr></tbody></table><blockquote><p>技巧</p></blockquote><ul><li>%06d，表示输出的整数显示位数，不足以0补全，超出当前位数则原样输出</li><li>%.2f，表示小数点后显示的小数位数。</li></ul><h3 id="1-2-体验"><a href="#1-2-体验" class="headerlink" title="1.2 体验"></a>1.2 体验</h3><p>格式化字符串除了%s，还可以写为<code>f&#39;&#123;表达式&#125;&#39;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">age = <span class="hljs-number">18</span> <br>name = <span class="hljs-string">&#x27;TOM&#x27;</span><br>weight = <span class="hljs-number">75.5</span><br>student_id = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># 我的名字是TOM</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s&#x27;</span> % name)<br><br><span class="hljs-comment"># 我的学号是0001</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的学号是%4d&#x27;</span> % student_id)<br><br><span class="hljs-comment"># 我的体重是75.50公斤</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的体重是%.2f公斤&#x27;</span> % weight)<br><br><span class="hljs-comment"># 我的名字是TOM，今年18岁了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s，今年%d岁了&#x27;</span> % (name, age))<br><br><span class="hljs-comment"># 我的名字是TOM，明年19岁了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我的名字是%s，明年%d岁了&#x27;</span> % (name, age + <span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># 我的名字是TOM，明年19岁了</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;我的名字是<span class="hljs-subst">&#123;name&#125;</span>, 明年<span class="hljs-subst">&#123;age + <span class="hljs-number">1</span>&#125;</span>岁了&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>f-格式化字符串是Python3.6中新增的格式化方法，该方法更简单易读。</p></blockquote><h3 id="1-3-转义字符"><a href="#1-3-转义字符" class="headerlink" title="1.3 转义字符"></a>1.3 转义字符</h3><ul><li><code>\n</code>：换行。</li><li><code>\t</code>：制表符，一个tab键（4个空格）的距离。</li></ul><h3 id="1-4-结束符"><a href="#1-4-结束符" class="headerlink" title="1.4 结束符"></a>1.4 结束符</h3><blockquote><p>想一想，为什么两个print会换行输出？</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;输出的内容&#x27;</span>, end=<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>在Python中，print()， 默认自带<code>end=&quot;\n&quot;</code>这个换行结束符，所以导致每两个<code>print</code>直接会换行展示，用户可以按需求更改结束符。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>格式化符号<ul><li>%s：格式化输出字符串</li><li>%d：格式化输出整数</li><li>%f：格式化输出浮点数</li></ul></li><li>f-字符串<ul><li>f’{表达式}’</li></ul></li><li>转义字符<ul><li>\n：换行</li><li>\t：制表符</li></ul></li><li>print结束符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;内容&#x27;</span>, end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>输出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python注释</title>
    <link href="/2023/01/14/Python%E6%B3%A8%E9%87%8A/"/>
    <url>/2023/01/14/Python%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="注释的分类及语法"><a href="#注释的分类及语法" class="headerlink" title="注释的分类及语法"></a>注释的分类及语法</h1><p>注释分为两类：&#x3D;&#x3D;单行注释&#x3D;&#x3D; 和 &#x3D;&#x3D;多行注释&#x3D;&#x3D;。</p><ul><li>单行注释</li></ul><p>只能注释一行内容，语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 注释内容</span><br></code></pre></td></tr></table></figure><ul><li>多行注释</li></ul><p>可以注释多行内容，一般用在注释一段代码的情况， 语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">第一行注释</span><br><span class="hljs-string">第二行注释</span><br><span class="hljs-string">第三行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">注释1</span><br><span class="hljs-string">注释2</span><br><span class="hljs-string">注释3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p>快捷键： &#x3D;&#x3D;ctrl + &#x2F;&#x3D;&#x3D;</p></blockquote><h2 id="快速体验"><a href="#快速体验" class="headerlink" title="快速体验"></a>快速体验</h2><ul><li>单行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输出hello world</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)  <span class="hljs-comment"># 输出(简单的说明可以放到一行代码的后面，一般习惯代码后面添加两个空格再书写注释文字)</span><br></code></pre></td></tr></table></figure><ul><li>多行注释</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    下面三行都是输出的作用，输出内容分别是：</span><br><span class="hljs-string">    hello Python</span><br><span class="hljs-string">    hello itcast</span><br><span class="hljs-string">    hello itheima</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itcast&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itheima&#x27;</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    下面三行都是输出的作用，输出内容分别是：</span><br><span class="hljs-string">    hello Python</span><br><span class="hljs-string">    hello itcast</span><br><span class="hljs-string">    hello itheima</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello Python&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itcast&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello itheima&#x27;</span>)<br></code></pre></td></tr></table></figure><blockquote><p>注意：解释器不执行任何的注释内容。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>注释的作用</li></ul><p>用人类熟悉的语言对代码进行解释说明，方便后期维护。</p><ul><li>注释的分类<ul><li>单行： <code># 注释内容</code>，快捷键ctrl+&#x2F;</li><li>多行：<code>&quot;&quot;&quot; 注释内容 &quot;&quot;&quot;</code> 或 <code>&#39;&#39;&#39; 注释内容 &#39;&#39;&#39;</code></li></ul></li><li>解释器不执行注释内容</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>注释</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>article title</title>
    <link href="/2023/01/13/article-title/"/>
    <url>/2023/01/13/article-title/</url>
    
    <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><p>这是一张图片<br><img src="/2023/01/13/article-title/KDA.jpg"></p><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><p>这是一串代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arry[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><p>就到这吧</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/13/hello-world/"/>
    <url>/2023/01/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
